/**
 * Angular wrapper for Bryntum DatePicker
 */
import { ElementRef, EventEmitter, SimpleChanges, OnDestroy, OnInit } from '@angular/core';
import { AlignSpec, Base, ContainerItemConfig, ContainerLayoutConfig, Layout, MaskConfig, Model, Month, MonthConfig, PanelCollapserConfig, PanelCollapserOverlayConfig, PanelHeader, Rectangle, Scroller, ScrollerConfig, StateProvider, TabConfig, Tool, ToolConfig, ToolbarConfig, TooltipConfig, Widget } from '@bryntum/calendar';
import { DatePicker } from '@bryntum/calendar';
import * as i0 from "@angular/core";
export declare class BryntumDatePickerComponent implements OnInit, OnDestroy {
    static instanceClass: typeof DatePicker;
    static instanceName: string;
    private static bryntumEvents;
    private static bryntumFeatureNames;
    private static bryntumConfigs;
    private static bryntumConfigsOnly;
    private static bryntumProps;
    private elementRef;
    instance: DatePicker;
    private bryntumConfig;
    constructor(element: ElementRef);
    activeDate: Date;
    adopt: HTMLElement | string;
    align: AlignSpec | string;
    anchor: boolean;
    ariaDescription: string;
    ariaLabel: string;
    autoUpdateRecord: boolean;
    bbar: (Partial<ContainerItemConfig> | string)[] | Partial<ToolbarConfig>;
    bodyCls: string | object;
    bubbleEvents: object;
    callOnFunctions: boolean;
    cellRenderer: Function | string;
    centered: boolean;
    collapsed: boolean;
    collapsible: boolean | Partial<PanelCollapserConfig> | Partial<PanelCollapserOverlayConfig>;
    config: object;
    constrainTo: HTMLElement | Widget | Rectangle;
    contentElementCls: string | object;
    dayNameFormat: string;
    defaultBindProperty: string;
    defaultFocus: Function;
    defaults: object;
    disabledDates: Function | Date[] | string;
    disableOtherMonthCells: boolean;
    disableWeekends: boolean;
    dock: 'top' | 'bottom' | 'left' | 'right' | 'start' | 'end' | 'header' | 'pre-header' | object;
    draggable: boolean | object;
    editMonth: boolean;
    floating: boolean;
    focusDisabledDates: boolean;
    footer: object | string;
    header: string | boolean | PanelHeader;
    headerRenderer: Function | string;
    hideAnimation: boolean | object;
    hideOtherMonthCells: boolean;
    hideWhenEmpty: boolean;
    htmlCls: string | object;
    ignoreParentReadOnly: boolean;
    itemCls: string;
    lazyItems: Record<string, Partial<ContainerItemConfig>> | Partial<ContainerItemConfig>[] | Widget[];
    listeners: object;
    localeClass: typeof Base;
    localizable: boolean;
    localizableProperties: string[];
    maskDefaults: Partial<MaskConfig>;
    masked: boolean | string | Partial<MaskConfig>;
    maxDate: Date;
    minColumnWidth: number;
    minDate: Date;
    minRowHeight: number | string;
    monitorResize: boolean;
    month: Month | Partial<MonthConfig>;
    multiSelect: boolean | 'range';
    namedItems: Record<string, Partial<ContainerItemConfig>>;
    nonWorkingDays: Record<number, boolean>;
    owner: Widget;
    positioned: boolean;
    preventTooltipOnTouch: boolean;
    relayStoreEvents: boolean;
    ripple: boolean | object;
    rootElement: ShadowRoot;
    scrollAction: 'hide' | 'realign' | null;
    showAnimation: boolean | object;
    showTooltipWhenDisabled: boolean;
    showWeekColumn: boolean;
    showWeekNumber: boolean;
    sixWeeks: boolean;
    stateful: boolean | object | string[];
    statefulEvents: object | string[];
    stateId: string;
    stateProvider: StateProvider;
    strips: Record<string, Partial<ContainerItemConfig>>;
    tab: boolean | Partial<TabConfig>;
    tag: string;
    tbar: (Partial<ContainerItemConfig> | string)[] | Partial<ToolbarConfig>;
    textAlign: 'left' | 'center' | 'right' | 'start' | 'end';
    textContent: boolean;
    tip: Partial<TooltipConfig>;
    trapFocus: boolean;
    ui: string | object;
    weekRenderer: Function | string;
    weekStartDay: number;
    weight: number;
    alignSelf: string;
    animateTimeShift: boolean;
    appendTo: HTMLElement | string;
    cls: string | object;
    content: string;
    dataset: object;
    date: Date;
    disabled: boolean;
    extraData: string | number | boolean | object;
    flex: number | string;
    height: number | string;
    hidden: boolean;
    html: string | Function;
    id: string;
    insertBefore: HTMLElement | string;
    insertFirst: HTMLElement | string;
    items: Widget[] | Partial<ContainerItemConfig>[] | Record<string, Partial<ContainerItemConfig>> | Record<string, Partial<ContainerItemConfig> | boolean | null>;
    layout: Layout | string | Partial<ContainerLayoutConfig>;
    layoutStyle: object;
    margin: number | string;
    maxHeight: string | number;
    maxWidth: string | number;
    minHeight: string | number;
    minWidth: string | number;
    readOnly: boolean;
    record: Model;
    scrollable: Scroller | boolean | Partial<ScrollerConfig>;
    selection: Date[];
    strictRecordMapping: boolean;
    title: string;
    tools: Record<string, Tool | Partial<ToolConfig>> | Record<string, Tool> | Record<string, Partial<ToolConfig>>;
    tooltip: string | Partial<TooltipConfig>;
    width: number | string;
    x: number;
    y: number;
    anchorSize: number[];
    isSettingValues: boolean;
    isValid: boolean;
    state: object;
    type: string;
    values: Record<string, object>;
    onBeforeDestroy: EventEmitter<object>;
    onBeforeHide: EventEmitter<object>;
    onBeforeRefresh: EventEmitter<object>;
    onBeforeSetRecord: EventEmitter<object>;
    onBeforeShow: EventEmitter<object>;
    onCatchAll: EventEmitter<object>;
    onDateChange: EventEmitter<object>;
    onDestroy: EventEmitter<object>;
    onFocusIn: EventEmitter<object>;
    onFocusOut: EventEmitter<object>;
    onHide: EventEmitter<object>;
    onPaint: EventEmitter<object>;
    onReadOnly: EventEmitter<object>;
    onRecompose: EventEmitter<object>;
    onRefresh: EventEmitter<object>;
    onResize: EventEmitter<object>;
    onSelectionChange: EventEmitter<object>;
    onShow: EventEmitter<object>;
    onToolClick: EventEmitter<object>;
    /**
     * Create and append the underlying widget
     */
    ngOnInit(): void;
    /**
     * Watch for changes
     * @param changes
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Destroy the component
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BryntumDatePickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BryntumDatePickerComponent, "bryntum-date-picker", never, { "activeDate": "activeDate"; "adopt": "adopt"; "align": "align"; "anchor": "anchor"; "ariaDescription": "ariaDescription"; "ariaLabel": "ariaLabel"; "autoUpdateRecord": "autoUpdateRecord"; "bbar": "bbar"; "bodyCls": "bodyCls"; "bubbleEvents": "bubbleEvents"; "callOnFunctions": "callOnFunctions"; "cellRenderer": "cellRenderer"; "centered": "centered"; "collapsed": "collapsed"; "collapsible": "collapsible"; "config": "config"; "constrainTo": "constrainTo"; "contentElementCls": "contentElementCls"; "dayNameFormat": "dayNameFormat"; "defaultBindProperty": "defaultBindProperty"; "defaultFocus": "defaultFocus"; "defaults": "defaults"; "disabledDates": "disabledDates"; "disableOtherMonthCells": "disableOtherMonthCells"; "disableWeekends": "disableWeekends"; "dock": "dock"; "draggable": "draggable"; "editMonth": "editMonth"; "floating": "floating"; "focusDisabledDates": "focusDisabledDates"; "footer": "footer"; "header": "header"; "headerRenderer": "headerRenderer"; "hideAnimation": "hideAnimation"; "hideOtherMonthCells": "hideOtherMonthCells"; "hideWhenEmpty": "hideWhenEmpty"; "htmlCls": "htmlCls"; "ignoreParentReadOnly": "ignoreParentReadOnly"; "itemCls": "itemCls"; "lazyItems": "lazyItems"; "listeners": "listeners"; "localeClass": "localeClass"; "localizable": "localizable"; "localizableProperties": "localizableProperties"; "maskDefaults": "maskDefaults"; "masked": "masked"; "maxDate": "maxDate"; "minColumnWidth": "minColumnWidth"; "minDate": "minDate"; "minRowHeight": "minRowHeight"; "monitorResize": "monitorResize"; "month": "month"; "multiSelect": "multiSelect"; "namedItems": "namedItems"; "nonWorkingDays": "nonWorkingDays"; "owner": "owner"; "positioned": "positioned"; "preventTooltipOnTouch": "preventTooltipOnTouch"; "relayStoreEvents": "relayStoreEvents"; "ripple": "ripple"; "rootElement": "rootElement"; "scrollAction": "scrollAction"; "showAnimation": "showAnimation"; "showTooltipWhenDisabled": "showTooltipWhenDisabled"; "showWeekColumn": "showWeekColumn"; "showWeekNumber": "showWeekNumber"; "sixWeeks": "sixWeeks"; "stateful": "stateful"; "statefulEvents": "statefulEvents"; "stateId": "stateId"; "stateProvider": "stateProvider"; "strips": "strips"; "tab": "tab"; "tag": "tag"; "tbar": "tbar"; "textAlign": "textAlign"; "textContent": "textContent"; "tip": "tip"; "trapFocus": "trapFocus"; "ui": "ui"; "weekRenderer": "weekRenderer"; "weekStartDay": "weekStartDay"; "weight": "weight"; "alignSelf": "alignSelf"; "animateTimeShift": "animateTimeShift"; "appendTo": "appendTo"; "cls": "cls"; "content": "content"; "dataset": "dataset"; "date": "date"; "disabled": "disabled"; "extraData": "extraData"; "flex": "flex"; "height": "height"; "hidden": "hidden"; "html": "html"; "id": "id"; "insertBefore": "insertBefore"; "insertFirst": "insertFirst"; "items": "items"; "layout": "layout"; "layoutStyle": "layoutStyle"; "margin": "margin"; "maxHeight": "maxHeight"; "maxWidth": "maxWidth"; "minHeight": "minHeight"; "minWidth": "minWidth"; "readOnly": "readOnly"; "record": "record"; "scrollable": "scrollable"; "selection": "selection"; "strictRecordMapping": "strictRecordMapping"; "title": "title"; "tools": "tools"; "tooltip": "tooltip"; "width": "width"; "x": "x"; "y": "y"; "anchorSize": "anchorSize"; "isSettingValues": "isSettingValues"; "isValid": "isValid"; "state": "state"; "type": "type"; "values": "values"; }, { "onBeforeDestroy": "onBeforeDestroy"; "onBeforeHide": "onBeforeHide"; "onBeforeRefresh": "onBeforeRefresh"; "onBeforeSetRecord": "onBeforeSetRecord"; "onBeforeShow": "onBeforeShow"; "onCatchAll": "onCatchAll"; "onDateChange": "onDateChange"; "onDestroy": "onDestroy"; "onFocusIn": "onFocusIn"; "onFocusOut": "onFocusOut"; "onHide": "onHide"; "onPaint": "onPaint"; "onReadOnly": "onReadOnly"; "onRecompose": "onRecompose"; "onRefresh": "onRefresh"; "onResize": "onResize"; "onSelectionChange": "onSelectionChange"; "onShow": "onShow"; "onToolClick": "onToolClick"; }, never, never>;
}
