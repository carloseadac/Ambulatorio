/**
 * Angular wrapper for Bryntum Combo
 */
import { ElementRef, EventEmitter, SimpleChanges, OnDestroy, OnInit } from '@angular/core';
import { AlignSpec, Base, ChipViewConfig, CollectionFilterConfig, ContainerItemConfig, FieldContainer, FieldContainerConfig, FieldTriggerConfig, MaskConfig, Rectangle, Scroller, ScrollerConfig, Store, StoreConfig, TabConfig, TooltipConfig, Widget } from '@bryntum/calendar';
import { Combo } from '@bryntum/calendar';
import * as i0 from "@angular/core";
export declare class BryntumComboComponent implements OnInit, OnDestroy {
    static instanceClass: typeof Combo;
    static instanceName: string;
    private static bryntumEvents;
    private static bryntumFeatureNames;
    private static bryntumConfigs;
    private static bryntumConfigsOnly;
    private static bryntumProps;
    private elementRef;
    instance: Combo;
    private bryntumConfig;
    constructor(element: ElementRef);
    adopt: HTMLElement | string;
    align: AlignSpec | string;
    anchor: boolean;
    ariaDescription: string;
    ariaLabel: string;
    autoClose: boolean;
    autoComplete: string;
    autoExpand: boolean;
    autoSelect: boolean;
    bubbleEvents: object;
    callOnFunctions: boolean;
    caseSensitive: boolean;
    centered: boolean;
    chipView: Partial<ChipViewConfig>;
    clearable: boolean | Partial<FieldTriggerConfig>;
    clearTextOnPickerHide: boolean;
    config: object;
    constrainTo: HTMLElement | Widget | Rectangle;
    container: Record<string, Partial<ContainerItemConfig>> | Partial<ContainerItemConfig>[] | Partial<FieldContainerConfig> | FieldContainer;
    containValues: boolean | string | Function;
    contentElementCls: string | object;
    createOnUnmatched: Function | string | boolean;
    defaultBindProperty: string;
    displayField: string;
    displayValueRenderer: Function;
    dock: 'top' | 'bottom' | 'left' | 'right' | 'start' | 'end' | 'header' | 'pre-header' | object;
    draggable: boolean | object;
    emptyText: string;
    encodeFilterParams: Function;
    filterOnEnter: boolean;
    filterParamName: string;
    filterSelected: boolean;
    floating: boolean;
    hideAnimation: boolean | object;
    hidePickerOnSelect: boolean;
    hideTrigger: boolean;
    highlightExternalChange: boolean;
    hint: string | Function;
    hintHtml: string | Function;
    htmlCls: string | object;
    ignoreParentReadOnly: boolean;
    inline: boolean;
    inlinePicker: boolean;
    inputAlign: string;
    inputAttributes: object;
    inputType: string;
    inputWidth: string | number;
    items: object[] | string[] | object;
    keyStrokeChangeDelay: number;
    keyStrokeFilterDelay: number;
    labelCls: string | object;
    labelPosition: 'before' | 'above';
    labels: object[];
    labelWidth: string | number;
    listCls: string;
    listeners: object;
    listItemTpl: Function;
    localeClass: typeof Base;
    localizable: boolean;
    localizableProperties: string[];
    maskDefaults: Partial<MaskConfig>;
    masked: boolean | string | Partial<MaskConfig>;
    maxLength: number;
    minChars: number;
    minLength: number;
    monitorResize: boolean;
    multiSelect: boolean;
    multiValueSeparator: string;
    name: string;
    overlayAnchor: boolean;
    owner: Widget;
    picker: object;
    pickerAlignElement: string;
    pickerWidth: number;
    placeholder: string;
    positioned: boolean;
    preventTooltipOnTouch: boolean;
    primaryFilter: Partial<CollectionFilterConfig>;
    relayStoreEvents: boolean;
    required: boolean;
    revertOnEscape: boolean;
    ripple: boolean | object;
    rootElement: ShadowRoot;
    scrollAction: 'hide' | 'realign' | null;
    showAnimation: boolean | object;
    showTooltipWhenDisabled: boolean;
    spellCheck: boolean;
    tab: boolean | Partial<TabConfig>;
    tabIndex: number;
    tag: string;
    textAlign: 'left' | 'center' | 'right' | 'start' | 'end';
    title: string;
    triggerAction: 'all' | 'last' | null;
    ui: string | object;
    validateFilter: boolean;
    validateOnInput: boolean;
    valueField: string | null;
    weight: number;
    alignSelf: string;
    appendTo: HTMLElement | string;
    badge: string;
    cls: string | object;
    content: string;
    dataset: object;
    disabled: boolean;
    editable: boolean;
    extraData: string | number | boolean | object;
    filterOperator: '=' | '!=' | '>' | '>=' | '<' | '<=' | '*' | 'startsWith' | 'endsWith' | 'isIncludedIn';
    flex: number | string;
    height: number | string;
    hidden: boolean;
    html: string | Function;
    id: string;
    insertBefore: HTMLElement | string;
    insertFirst: HTMLElement | string;
    label: string;
    margin: number | string;
    maxHeight: string | number;
    maxWidth: string | number;
    minHeight: string | number;
    minWidth: string | number;
    readOnly: boolean;
    scrollable: Scroller | boolean | Partial<ScrollerConfig>;
    store: Store | Partial<StoreConfig>;
    tooltip: string | Partial<TooltipConfig>;
    triggers: Record<string, Widget> | Record<string, FieldTriggerConfig>;
    value: object | number | string | number[] | string[];
    width: number | string;
    x: number;
    y: number;
    anchorSize: number[];
    input: HTMLElement;
    type: string;
    onAction: EventEmitter<object>;
    onBeforeDestroy: EventEmitter<object>;
    onBeforeHide: EventEmitter<object>;
    onBeforeShow: EventEmitter<object>;
    onCatchAll: EventEmitter<object>;
    onChange: EventEmitter<object>;
    onClear: EventEmitter<object>;
    onDestroy: EventEmitter<object>;
    onFocusIn: EventEmitter<object>;
    onFocusOut: EventEmitter<object>;
    onHide: EventEmitter<object>;
    onInput: EventEmitter<object>;
    onPaint: EventEmitter<object>;
    onReadOnly: EventEmitter<object>;
    onRecompose: EventEmitter<object>;
    onResize: EventEmitter<object>;
    onSelect: EventEmitter<object>;
    onShow: EventEmitter<object>;
    onTrigger: EventEmitter<object>;
    /**
     * Create and append the underlying widget
     */
    ngOnInit(): void;
    /**
     * Watch for changes
     * @param changes
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Destroy the component
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BryntumComboComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BryntumComboComponent, "bryntum-combo", never, { "adopt": "adopt"; "align": "align"; "anchor": "anchor"; "ariaDescription": "ariaDescription"; "ariaLabel": "ariaLabel"; "autoClose": "autoClose"; "autoComplete": "autoComplete"; "autoExpand": "autoExpand"; "autoSelect": "autoSelect"; "bubbleEvents": "bubbleEvents"; "callOnFunctions": "callOnFunctions"; "caseSensitive": "caseSensitive"; "centered": "centered"; "chipView": "chipView"; "clearable": "clearable"; "clearTextOnPickerHide": "clearTextOnPickerHide"; "config": "config"; "constrainTo": "constrainTo"; "container": "container"; "containValues": "containValues"; "contentElementCls": "contentElementCls"; "createOnUnmatched": "createOnUnmatched"; "defaultBindProperty": "defaultBindProperty"; "displayField": "displayField"; "displayValueRenderer": "displayValueRenderer"; "dock": "dock"; "draggable": "draggable"; "emptyText": "emptyText"; "encodeFilterParams": "encodeFilterParams"; "filterOnEnter": "filterOnEnter"; "filterParamName": "filterParamName"; "filterSelected": "filterSelected"; "floating": "floating"; "hideAnimation": "hideAnimation"; "hidePickerOnSelect": "hidePickerOnSelect"; "hideTrigger": "hideTrigger"; "highlightExternalChange": "highlightExternalChange"; "hint": "hint"; "hintHtml": "hintHtml"; "htmlCls": "htmlCls"; "ignoreParentReadOnly": "ignoreParentReadOnly"; "inline": "inline"; "inlinePicker": "inlinePicker"; "inputAlign": "inputAlign"; "inputAttributes": "inputAttributes"; "inputType": "inputType"; "inputWidth": "inputWidth"; "items": "items"; "keyStrokeChangeDelay": "keyStrokeChangeDelay"; "keyStrokeFilterDelay": "keyStrokeFilterDelay"; "labelCls": "labelCls"; "labelPosition": "labelPosition"; "labels": "labels"; "labelWidth": "labelWidth"; "listCls": "listCls"; "listeners": "listeners"; "listItemTpl": "listItemTpl"; "localeClass": "localeClass"; "localizable": "localizable"; "localizableProperties": "localizableProperties"; "maskDefaults": "maskDefaults"; "masked": "masked"; "maxLength": "maxLength"; "minChars": "minChars"; "minLength": "minLength"; "monitorResize": "monitorResize"; "multiSelect": "multiSelect"; "multiValueSeparator": "multiValueSeparator"; "name": "name"; "overlayAnchor": "overlayAnchor"; "owner": "owner"; "picker": "picker"; "pickerAlignElement": "pickerAlignElement"; "pickerWidth": "pickerWidth"; "placeholder": "placeholder"; "positioned": "positioned"; "preventTooltipOnTouch": "preventTooltipOnTouch"; "primaryFilter": "primaryFilter"; "relayStoreEvents": "relayStoreEvents"; "required": "required"; "revertOnEscape": "revertOnEscape"; "ripple": "ripple"; "rootElement": "rootElement"; "scrollAction": "scrollAction"; "showAnimation": "showAnimation"; "showTooltipWhenDisabled": "showTooltipWhenDisabled"; "spellCheck": "spellCheck"; "tab": "tab"; "tabIndex": "tabIndex"; "tag": "tag"; "textAlign": "textAlign"; "title": "title"; "triggerAction": "triggerAction"; "ui": "ui"; "validateFilter": "validateFilter"; "validateOnInput": "validateOnInput"; "valueField": "valueField"; "weight": "weight"; "alignSelf": "alignSelf"; "appendTo": "appendTo"; "badge": "badge"; "cls": "cls"; "content": "content"; "dataset": "dataset"; "disabled": "disabled"; "editable": "editable"; "extraData": "extraData"; "filterOperator": "filterOperator"; "flex": "flex"; "height": "height"; "hidden": "hidden"; "html": "html"; "id": "id"; "insertBefore": "insertBefore"; "insertFirst": "insertFirst"; "label": "label"; "margin": "margin"; "maxHeight": "maxHeight"; "maxWidth": "maxWidth"; "minHeight": "minHeight"; "minWidth": "minWidth"; "readOnly": "readOnly"; "scrollable": "scrollable"; "store": "store"; "tooltip": "tooltip"; "triggers": "triggers"; "value": "value"; "width": "width"; "x": "x"; "y": "y"; "anchorSize": "anchorSize"; "input": "input"; "type": "type"; }, { "onAction": "onAction"; "onBeforeDestroy": "onBeforeDestroy"; "onBeforeHide": "onBeforeHide"; "onBeforeShow": "onBeforeShow"; "onCatchAll": "onCatchAll"; "onChange": "onChange"; "onClear": "onClear"; "onDestroy": "onDestroy"; "onFocusIn": "onFocusIn"; "onFocusOut": "onFocusOut"; "onHide": "onHide"; "onInput": "onInput"; "onPaint": "onPaint"; "onReadOnly": "onReadOnly"; "onRecompose": "onRecompose"; "onResize": "onResize"; "onSelect": "onSelect"; "onShow": "onShow"; "onTrigger": "onTrigger"; }, never, never>;
}
