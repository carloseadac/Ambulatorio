/**
 * Angular wrapper for Bryntum UndoRedo
 */
import { ElementRef, EventEmitter, SimpleChanges, OnDestroy, OnInit } from '@angular/core';
import { AlignSpec, Base, ContainerItemConfig, ContainerLayoutConfig, Layout, MaskConfig, Model, ProjectModel, ProjectModelConfig, Rectangle, SchedulerProjectModel, Scroller, ScrollerConfig, TabConfig, TooltipConfig, Widget } from '@bryntum/calendar';
import { UndoRedo } from '@bryntum/calendar';
import * as i0 from "@angular/core";
export declare class BryntumUndoRedoComponent implements OnInit, OnDestroy {
    static instanceClass: typeof UndoRedo;
    static instanceName: string;
    private static bryntumEvents;
    private static bryntumFeatureNames;
    private static bryntumConfigs;
    private static bryntumConfigsOnly;
    private static bryntumProps;
    private elementRef;
    instance: UndoRedo;
    private bryntumConfig;
    constructor(element: ElementRef);
    adopt: HTMLElement | string;
    align: AlignSpec | string;
    anchor: boolean;
    ariaDescription: string;
    ariaLabel: string;
    autoUpdateRecord: boolean;
    bubbleEvents: object;
    callOnFunctions: boolean;
    centered: boolean;
    color: string;
    config: object;
    constrainTo: HTMLElement | Widget | Rectangle;
    contentElementCls: string | object;
    defaultBindProperty: string;
    defaultFocus: Function;
    defaults: object;
    dock: 'top' | 'bottom' | 'left' | 'right' | 'start' | 'end' | 'header' | 'pre-header' | object;
    draggable: boolean | object;
    floating: boolean;
    hideAnimation: boolean | object;
    hideWhenEmpty: boolean;
    htmlCls: string | object;
    ignoreParentReadOnly: boolean;
    itemCls: string;
    lazyItems: Record<string, Partial<ContainerItemConfig>> | Partial<ContainerItemConfig>[] | Widget[];
    listeners: object;
    localeClass: typeof Base;
    localizable: boolean;
    localizableProperties: string[];
    maskDefaults: Partial<MaskConfig>;
    masked: boolean | string | Partial<MaskConfig>;
    monitorResize: boolean;
    namedItems: Record<string, Partial<ContainerItemConfig>>;
    owner: Widget;
    positioned: boolean;
    preventTooltipOnTouch: boolean;
    relayStoreEvents: boolean;
    ripple: boolean | object;
    rootElement: ShadowRoot;
    scheduler: Widget | string;
    scrollAction: 'hide' | 'realign' | null;
    showAnimation: boolean | object;
    showTooltipWhenDisabled: boolean;
    showZeroActionBadge: boolean;
    tab: boolean | Partial<TabConfig>;
    tag: string;
    text: boolean;
    textAlign: 'left' | 'center' | 'right' | 'start' | 'end';
    textContent: boolean;
    title: string;
    ui: string | object;
    weight: number;
    alignSelf: string;
    appendTo: HTMLElement | string;
    cls: string | object;
    content: string;
    dataset: object;
    disabled: boolean;
    extraData: string | number | boolean | object;
    flex: number | string;
    height: number | string;
    hidden: boolean;
    html: string | Function;
    id: string;
    insertBefore: HTMLElement | string;
    insertFirst: HTMLElement | string;
    items: Widget[] | Partial<ContainerItemConfig>[] | Record<string, Partial<ContainerItemConfig>> | Record<string, Partial<ContainerItemConfig> | boolean | null>;
    layout: Layout | string | Partial<ContainerLayoutConfig>;
    layoutStyle: object;
    margin: number | string;
    maxHeight: string | number;
    maxWidth: string | number;
    minHeight: string | number;
    minWidth: string | number;
    project: ProjectModel | SchedulerProjectModel | Partial<ProjectModelConfig>;
    readOnly: boolean;
    record: Model;
    scrollable: Scroller | boolean | Partial<ScrollerConfig>;
    strictRecordMapping: boolean;
    tooltip: string | Partial<TooltipConfig>;
    width: number | string;
    x: number;
    y: number;
    anchorSize: number[];
    isSettingValues: boolean;
    isValid: boolean;
    type: string;
    values: Record<string, object>;
    onBeforeDestroy: EventEmitter<object>;
    onBeforeHide: EventEmitter<object>;
    onBeforeSetRecord: EventEmitter<object>;
    onBeforeShow: EventEmitter<object>;
    onCatchAll: EventEmitter<object>;
    onDestroy: EventEmitter<object>;
    onFocusIn: EventEmitter<object>;
    onFocusOut: EventEmitter<object>;
    onHide: EventEmitter<object>;
    onPaint: EventEmitter<object>;
    onReadOnly: EventEmitter<object>;
    onRecompose: EventEmitter<object>;
    onResize: EventEmitter<object>;
    onShow: EventEmitter<object>;
    /**
     * Create and append the underlying widget
     */
    ngOnInit(): void;
    /**
     * Watch for changes
     * @param changes
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Destroy the component
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BryntumUndoRedoComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BryntumUndoRedoComponent, "bryntum-undo-redo", never, { "adopt": "adopt"; "align": "align"; "anchor": "anchor"; "ariaDescription": "ariaDescription"; "ariaLabel": "ariaLabel"; "autoUpdateRecord": "autoUpdateRecord"; "bubbleEvents": "bubbleEvents"; "callOnFunctions": "callOnFunctions"; "centered": "centered"; "color": "color"; "config": "config"; "constrainTo": "constrainTo"; "contentElementCls": "contentElementCls"; "defaultBindProperty": "defaultBindProperty"; "defaultFocus": "defaultFocus"; "defaults": "defaults"; "dock": "dock"; "draggable": "draggable"; "floating": "floating"; "hideAnimation": "hideAnimation"; "hideWhenEmpty": "hideWhenEmpty"; "htmlCls": "htmlCls"; "ignoreParentReadOnly": "ignoreParentReadOnly"; "itemCls": "itemCls"; "lazyItems": "lazyItems"; "listeners": "listeners"; "localeClass": "localeClass"; "localizable": "localizable"; "localizableProperties": "localizableProperties"; "maskDefaults": "maskDefaults"; "masked": "masked"; "monitorResize": "monitorResize"; "namedItems": "namedItems"; "owner": "owner"; "positioned": "positioned"; "preventTooltipOnTouch": "preventTooltipOnTouch"; "relayStoreEvents": "relayStoreEvents"; "ripple": "ripple"; "rootElement": "rootElement"; "scheduler": "scheduler"; "scrollAction": "scrollAction"; "showAnimation": "showAnimation"; "showTooltipWhenDisabled": "showTooltipWhenDisabled"; "showZeroActionBadge": "showZeroActionBadge"; "tab": "tab"; "tag": "tag"; "text": "text"; "textAlign": "textAlign"; "textContent": "textContent"; "title": "title"; "ui": "ui"; "weight": "weight"; "alignSelf": "alignSelf"; "appendTo": "appendTo"; "cls": "cls"; "content": "content"; "dataset": "dataset"; "disabled": "disabled"; "extraData": "extraData"; "flex": "flex"; "height": "height"; "hidden": "hidden"; "html": "html"; "id": "id"; "insertBefore": "insertBefore"; "insertFirst": "insertFirst"; "items": "items"; "layout": "layout"; "layoutStyle": "layoutStyle"; "margin": "margin"; "maxHeight": "maxHeight"; "maxWidth": "maxWidth"; "minHeight": "minHeight"; "minWidth": "minWidth"; "project": "project"; "readOnly": "readOnly"; "record": "record"; "scrollable": "scrollable"; "strictRecordMapping": "strictRecordMapping"; "tooltip": "tooltip"; "width": "width"; "x": "x"; "y": "y"; "anchorSize": "anchorSize"; "isSettingValues": "isSettingValues"; "isValid": "isValid"; "type": "type"; "values": "values"; }, { "onBeforeDestroy": "onBeforeDestroy"; "onBeforeHide": "onBeforeHide"; "onBeforeSetRecord": "onBeforeSetRecord"; "onBeforeShow": "onBeforeShow"; "onCatchAll": "onCatchAll"; "onDestroy": "onDestroy"; "onFocusIn": "onFocusIn"; "onFocusOut": "onFocusOut"; "onHide": "onHide"; "onPaint": "onPaint"; "onReadOnly": "onReadOnly"; "onRecompose": "onRecompose"; "onResize": "onResize"; "onShow": "onShow"; }, never, never>;
}
