/**
 * Angular wrapper for Bryntum Calendar
 */
import { ElementRef, EventEmitter, SimpleChanges, OnDestroy, OnInit } from '@angular/core';
import { AlignSpec, AssignmentModel, AssignmentModelConfig, AssignmentStore, AssignmentStoreConfig, Base, ButtonConfig, CalendarDrag, CalendarDragConfig, ContainerItemConfig, ContainerLayoutConfig, CrudManagerConfig, EventEdit, EventEditConfig, EventMenu, EventMenuConfig, EventModel, EventModelConfig, EventStore, EventStoreConfig, EventTooltip, EventTooltipConfig, ExternalEventSource, ExternalEventSourceConfig, Layout, LoadOnDemand, LoadOnDemandConfig, Mask, MaskConfig, Model, PanelCollapserConfig, PanelCollapserOverlayConfig, PanelHeader, Print, PrintConfig, ProjectModel, ProjectModelConfig, Rectangle, ResourceModel, ResourceModelConfig, ResourceStore, ResourceStoreConfig, ResourceTimeRangeModel, ResourceTimeRangeModelConfig, ResourceTimeRangeStore, ResourceTimeRangeStoreConfig, ScheduleMenu, ScheduleMenuConfig, SchedulerCrudManager, SchedulerProjectModel, Scroller, ScrollerConfig, StateProvider, TabConfig, TimeRangeModel, TimeRangeModelConfig, TimeRangeStore, TimeRangeStoreConfig, TimeRanges, TimeRangesConfig, Tool, ToolConfig, ToolbarConfig, TooltipConfig, WeekExpander, WeekExpanderConfig, Widget, WidgetConfig } from '@bryntum/calendar';
import { Calendar } from '@bryntum/calendar';
import * as i0 from "@angular/core";
export declare class BryntumCalendarComponent implements OnInit, OnDestroy {
    static instanceClass: typeof Calendar;
    static instanceName: string;
    private static bryntumEvents;
    private static bryntumFeatureNames;
    private static bryntumConfigs;
    private static bryntumConfigsOnly;
    private static bryntumProps;
    private elementRef;
    instance: Calendar;
    private bryntumConfig;
    constructor(element: ElementRef);
    adopt: HTMLElement | string;
    align: AlignSpec | string;
    allowOverlap: boolean;
    anchor: boolean;
    ariaDescription: string;
    ariaLabel: string;
    assignmentStore: AssignmentStore | Partial<AssignmentStoreConfig>;
    autoCreate: object | string | boolean;
    autoUpdateRecord: boolean;
    bbar: (Partial<ContainerItemConfig> | string)[] | Partial<ToolbarConfig>;
    bodyCls: string | object;
    breakpoints: object;
    bubbleEvents: object;
    callOnFunctions: boolean;
    centered: boolean;
    collapsed: boolean;
    collapsible: boolean | Partial<PanelCollapserConfig> | Partial<PanelCollapserOverlayConfig>;
    config: object;
    constrainTo: HTMLElement | Widget | Rectangle;
    contentElementCls: string | object;
    contextMenuTriggerEvent: 'contextmenu' | 'click' | 'dblclick';
    crudManagerClass: SchedulerCrudManager;
    dateFormat: string;
    datePicker: object | boolean;
    defaultBindProperty: string;
    defaultFocus: Function;
    defaults: object;
    deselectOnClick: boolean;
    destroyStores: boolean;
    dock: 'top' | 'bottom' | 'left' | 'right' | 'start' | 'end' | 'header' | 'pre-header' | object;
    draggable: boolean | object;
    enableDeleteKey: boolean;
    enableRecurringEvents: boolean;
    enableUndoRedoKeys: boolean;
    eventSelectionDisabled: boolean;
    eventStore: EventStore | Partial<EventStoreConfig>;
    floating: boolean;
    footer: object | string;
    header: string | boolean | PanelHeader;
    hideAnimation: boolean | object;
    hideWhenEmpty: boolean;
    highlightDate: boolean | Function;
    highlightPredecessors: boolean;
    highlightSuccessors: boolean;
    htmlCls: string | object;
    ignoreParentReadOnly: boolean;
    includeWeekendsButton: boolean | Partial<ButtonConfig>;
    itemCls: string;
    lazyItems: Record<string, Partial<ContainerItemConfig>> | Partial<ContainerItemConfig>[] | Widget[];
    listeners: object;
    loadMask: string | Partial<MaskConfig> | null;
    loadMaskDefaults: Partial<MaskConfig> | Mask;
    loadMaskError: Partial<MaskConfig> | Mask | boolean;
    localeClass: typeof Base;
    localizable: boolean;
    localizableProperties: string[];
    maintainSelectionOnDatasetChange: boolean;
    maskDefaults: Partial<MaskConfig>;
    masked: boolean | string | Partial<MaskConfig>;
    monitorResize: boolean;
    multiEventSelect: boolean;
    namedItems: Record<string, Partial<ContainerItemConfig>>;
    navigatorPlacement: 'toolbar' | 'sidebar';
    nonWorkingDays: Record<number, boolean>;
    overlaySidebar: boolean;
    owner: Widget;
    positioned: boolean;
    preventTooltipOnTouch: boolean;
    relayStoreEvents: boolean;
    resourceImagePath: string;
    resourceStore: ResourceStore | Partial<ResourceStoreConfig>;
    resourceTimeRangeStore: ResourceTimeRangeStore | Partial<ResourceTimeRangeStoreConfig>;
    responsive: object;
    responsiveRoot: boolean;
    responsiveState: string;
    responsiveTarget: string | Widget;
    ripple: boolean | object;
    rootElement: ShadowRoot;
    scrollAction: 'hide' | 'realign' | null;
    showAnimation: boolean | object;
    showRecurringUI: boolean;
    showTooltipWhenDisabled: boolean;
    sidebar: object | boolean;
    stateful: boolean | object | string[];
    statefulEvents: object | string[];
    stateId: string;
    stateProvider: StateProvider;
    strips: Record<string, Partial<ContainerItemConfig>>;
    syncMask: string | Partial<MaskConfig> | null;
    tab: boolean | Partial<TabConfig>;
    tag: string;
    tbar: Partial<ToolbarConfig>;
    textAlign: 'left' | 'center' | 'right' | 'start' | 'end';
    textContent: boolean;
    timeRangeStore: TimeRangeStore | Partial<TimeRangeStoreConfig>;
    timeZone: string | number;
    trapFocus: boolean;
    triggerSelectionChangeOnRemove: boolean;
    ui: string | object;
    weekStartDay: number;
    weight: number;
    alignSelf: string;
    appendTo: HTMLElement | string;
    assignments: AssignmentModel[] | Partial<AssignmentModelConfig>[];
    cls: string | object;
    content: string;
    crudManager: SchedulerCrudManager | Partial<CrudManagerConfig>;
    dataset: object;
    date: Date;
    defaultCalendar: ResourceModel | string;
    disabled: boolean;
    events: EventModel[] | Partial<EventModelConfig>[];
    extraData: string | number | boolean | object;
    features: object;
    flex: number | string;
    height: number | string;
    hidden: boolean;
    hideNonWorkingDays: boolean;
    html: string | Function;
    id: string;
    insertBefore: HTMLElement | string;
    insertFirst: HTMLElement | string;
    isEventSelectable: Function;
    items: Widget[] | Partial<ContainerItemConfig>[] | Record<string, Partial<ContainerItemConfig>> | object | Partial<WidgetConfig>;
    layout: Layout | string | Partial<ContainerLayoutConfig>;
    layoutStyle: object;
    margin: number | string;
    maxDate: Date | string;
    maxHeight: string | number;
    maxWidth: string | number;
    minDate: Date | string;
    minHeight: string | number;
    minWidth: string | number;
    mode: string;
    modeDefaults: object;
    modes: Record<string, Widget> | object;
    project: ProjectModel | SchedulerProjectModel | Partial<ProjectModelConfig>;
    readOnly: boolean;
    record: Model;
    resources: ResourceModel[] | Partial<ResourceModelConfig>[];
    resourceTimeRanges: ResourceTimeRangeModel[] | Partial<ResourceTimeRangeModelConfig>[];
    scrollable: Scroller | boolean | Partial<ScrollerConfig>;
    strictRecordMapping: boolean;
    timeRanges: TimeRangeModel[] | Partial<TimeRangeModelConfig>[];
    title: string;
    tools: Record<string, Tool | Partial<ToolConfig>> | Record<string, Tool> | Record<string, Partial<ToolConfig>>;
    tooltip: string | Partial<TooltipConfig>;
    width: number | string;
    x: number;
    y: number;
    activeSubView: Widget;
    activeView: Widget;
    anchorSize: number[];
    isEngineReady: boolean;
    isSettingValues: boolean;
    isValid: boolean;
    selectedAssignments: AssignmentModel[];
    selectedEvents: EventModel[];
    state: object;
    type: string;
    values: Record<string, object>;
    views: Widget[];
    onActiveItemChange: EventEmitter<object>;
    onAfterEventEdit: EventEmitter<object>;
    onAfterEventSave: EventEmitter<object>;
    onAssignmentSelectionChange: EventEmitter<object>;
    onBeforeActiveItemChange: EventEmitter<object>;
    onBeforeAssignmentDelete: EventEmitter<object>;
    onBeforeAssignmentSelectionChange: EventEmitter<object>;
    onBeforeAutoCreate: EventEmitter<object>;
    onBeforeDestroy: EventEmitter<object>;
    onBeforeDragCreateEnd: EventEmitter<object>;
    onBeforeDragMoveEnd: EventEmitter<object>;
    onBeforeDragResizeEnd: EventEmitter<object>;
    onBeforeEventDelete: EventEmitter<object>;
    onBeforeEventEdit: EventEmitter<object>;
    onBeforeEventEditShow: EventEmitter<object>;
    onBeforeEventSave: EventEmitter<object>;
    onBeforeEventSelectionChange: EventEmitter<object>;
    onBeforeHide: EventEmitter<object>;
    onBeforePrint: EventEmitter<object>;
    onBeforeResponsiveStateChange: EventEmitter<object>;
    onBeforeSetRecord: EventEmitter<object>;
    onBeforeShow: EventEmitter<object>;
    onCatchAll: EventEmitter<object>;
    onCellOverflowClick: EventEmitter<object>;
    onContextMenuItem: EventEmitter<object>;
    onContextMenuToggleItem: EventEmitter<object>;
    onDataChange: EventEmitter<object>;
    onDateChange: EventEmitter<object>;
    onDateRangeChange: EventEmitter<object>;
    onDateRangeRequested: EventEmitter<object>;
    onDayNumberClick: EventEmitter<object>;
    onDestroy: EventEmitter<object>;
    onDragCreateEnd: EventEmitter<object>;
    onDragMoveEnd: EventEmitter<object>;
    onDragResizeEnd: EventEmitter<object>;
    onEmptyCellClick: EventEmitter<object>;
    onEventAutoCreated: EventEmitter<object>;
    onEventClick: EventEmitter<object>;
    onEventContextMenu: EventEmitter<object>;
    onEventDblClick: EventEmitter<object>;
    onEventEditBeforeSetRecord: EventEmitter<object>;
    onEventMenuBeforeShow: EventEmitter<object>;
    onEventMenuItem: EventEmitter<object>;
    onEventMenuShow: EventEmitter<object>;
    onEventMouseDown: EventEmitter<object>;
    onEventMouseOut: EventEmitter<object>;
    onEventMouseOver: EventEmitter<object>;
    onEventMouseUp: EventEmitter<object>;
    onEventPropagate: EventEmitter<object>;
    onEventSelectionChange: EventEmitter<object>;
    onFocusIn: EventEmitter<object>;
    onFocusOut: EventEmitter<object>;
    onHide: EventEmitter<object>;
    onLoadOnDemandFail: EventEmitter<object>;
    onMonthNameClick: EventEmitter<object>;
    onNavigate: EventEmitter<object>;
    onPaint: EventEmitter<object>;
    onReadOnly: EventEmitter<object>;
    onRecompose: EventEmitter<object>;
    onRefresh: EventEmitter<object>;
    onResize: EventEmitter<object>;
    onResponsiveHeightChange: EventEmitter<object>;
    onResponsiveStateChange: EventEmitter<object>;
    onResponsiveWidthChange: EventEmitter<object>;
    onScheduleClick: EventEmitter<object>;
    onScheduleContextMenu: EventEmitter<object>;
    onScheduleDblClick: EventEmitter<object>;
    onScheduleMenuBeforeShow: EventEmitter<object>;
    onScheduleMenuItem: EventEmitter<object>;
    onScheduleMenuShow: EventEmitter<object>;
    onScheduleMouseDown: EventEmitter<object>;
    onScheduleMouseOut: EventEmitter<object>;
    onScheduleMouseOver: EventEmitter<object>;
    onScheduleMouseUp: EventEmitter<object>;
    onSelectionChange: EventEmitter<object>;
    onShow: EventEmitter<object>;
    onTimeRangeHeaderClick: EventEmitter<object>;
    onTimeRangeHeaderContextMenu: EventEmitter<object>;
    onTimeRangeHeaderDblClick: EventEmitter<object>;
    onToolClick: EventEmitter<object>;
    onViewPaint: EventEmitter<object>;
    onWeekNumberClick: EventEmitter<object>;
    dragFeature: object | boolean | string | CalendarDrag | Partial<CalendarDragConfig>;
    eventEditFeature: object | boolean | string | EventEdit | Partial<EventEditConfig>;
    eventMenuFeature: object | boolean | string | EventMenu | Partial<EventMenuConfig>;
    eventTooltipFeature: object | boolean | string | EventTooltip | Partial<EventTooltipConfig>;
    externalEventSourceFeature: object | boolean | string | ExternalEventSource | Partial<ExternalEventSourceConfig>;
    loadOnDemandFeature: object | boolean | string | LoadOnDemand | Partial<LoadOnDemandConfig>;
    printFeature: object | boolean | string | Print | Partial<PrintConfig>;
    scheduleMenuFeature: object | boolean | string | ScheduleMenu | Partial<ScheduleMenuConfig>;
    timeRangesFeature: object | boolean | string | TimeRanges | Partial<TimeRangesConfig>;
    weekExpanderFeature: object | boolean | string | WeekExpander | Partial<WeekExpanderConfig>;
    /**
     * Create and append the underlying widget
     */
    ngOnInit(): void;
    /**
     * Watch for changes
     * @param changes
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Destroy the component
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BryntumCalendarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BryntumCalendarComponent, "bryntum-calendar", never, { "adopt": "adopt"; "align": "align"; "allowOverlap": "allowOverlap"; "anchor": "anchor"; "ariaDescription": "ariaDescription"; "ariaLabel": "ariaLabel"; "assignmentStore": "assignmentStore"; "autoCreate": "autoCreate"; "autoUpdateRecord": "autoUpdateRecord"; "bbar": "bbar"; "bodyCls": "bodyCls"; "breakpoints": "breakpoints"; "bubbleEvents": "bubbleEvents"; "callOnFunctions": "callOnFunctions"; "centered": "centered"; "collapsed": "collapsed"; "collapsible": "collapsible"; "config": "config"; "constrainTo": "constrainTo"; "contentElementCls": "contentElementCls"; "contextMenuTriggerEvent": "contextMenuTriggerEvent"; "crudManagerClass": "crudManagerClass"; "dateFormat": "dateFormat"; "datePicker": "datePicker"; "defaultBindProperty": "defaultBindProperty"; "defaultFocus": "defaultFocus"; "defaults": "defaults"; "deselectOnClick": "deselectOnClick"; "destroyStores": "destroyStores"; "dock": "dock"; "draggable": "draggable"; "enableDeleteKey": "enableDeleteKey"; "enableRecurringEvents": "enableRecurringEvents"; "enableUndoRedoKeys": "enableUndoRedoKeys"; "eventSelectionDisabled": "eventSelectionDisabled"; "eventStore": "eventStore"; "floating": "floating"; "footer": "footer"; "header": "header"; "hideAnimation": "hideAnimation"; "hideWhenEmpty": "hideWhenEmpty"; "highlightDate": "highlightDate"; "highlightPredecessors": "highlightPredecessors"; "highlightSuccessors": "highlightSuccessors"; "htmlCls": "htmlCls"; "ignoreParentReadOnly": "ignoreParentReadOnly"; "includeWeekendsButton": "includeWeekendsButton"; "itemCls": "itemCls"; "lazyItems": "lazyItems"; "listeners": "listeners"; "loadMask": "loadMask"; "loadMaskDefaults": "loadMaskDefaults"; "loadMaskError": "loadMaskError"; "localeClass": "localeClass"; "localizable": "localizable"; "localizableProperties": "localizableProperties"; "maintainSelectionOnDatasetChange": "maintainSelectionOnDatasetChange"; "maskDefaults": "maskDefaults"; "masked": "masked"; "monitorResize": "monitorResize"; "multiEventSelect": "multiEventSelect"; "namedItems": "namedItems"; "navigatorPlacement": "navigatorPlacement"; "nonWorkingDays": "nonWorkingDays"; "overlaySidebar": "overlaySidebar"; "owner": "owner"; "positioned": "positioned"; "preventTooltipOnTouch": "preventTooltipOnTouch"; "relayStoreEvents": "relayStoreEvents"; "resourceImagePath": "resourceImagePath"; "resourceStore": "resourceStore"; "resourceTimeRangeStore": "resourceTimeRangeStore"; "responsive": "responsive"; "responsiveRoot": "responsiveRoot"; "responsiveState": "responsiveState"; "responsiveTarget": "responsiveTarget"; "ripple": "ripple"; "rootElement": "rootElement"; "scrollAction": "scrollAction"; "showAnimation": "showAnimation"; "showRecurringUI": "showRecurringUI"; "showTooltipWhenDisabled": "showTooltipWhenDisabled"; "sidebar": "sidebar"; "stateful": "stateful"; "statefulEvents": "statefulEvents"; "stateId": "stateId"; "stateProvider": "stateProvider"; "strips": "strips"; "syncMask": "syncMask"; "tab": "tab"; "tag": "tag"; "tbar": "tbar"; "textAlign": "textAlign"; "textContent": "textContent"; "timeRangeStore": "timeRangeStore"; "timeZone": "timeZone"; "trapFocus": "trapFocus"; "triggerSelectionChangeOnRemove": "triggerSelectionChangeOnRemove"; "ui": "ui"; "weekStartDay": "weekStartDay"; "weight": "weight"; "alignSelf": "alignSelf"; "appendTo": "appendTo"; "assignments": "assignments"; "cls": "cls"; "content": "content"; "crudManager": "crudManager"; "dataset": "dataset"; "date": "date"; "defaultCalendar": "defaultCalendar"; "disabled": "disabled"; "events": "events"; "extraData": "extraData"; "features": "features"; "flex": "flex"; "height": "height"; "hidden": "hidden"; "hideNonWorkingDays": "hideNonWorkingDays"; "html": "html"; "id": "id"; "insertBefore": "insertBefore"; "insertFirst": "insertFirst"; "isEventSelectable": "isEventSelectable"; "items": "items"; "layout": "layout"; "layoutStyle": "layoutStyle"; "margin": "margin"; "maxDate": "maxDate"; "maxHeight": "maxHeight"; "maxWidth": "maxWidth"; "minDate": "minDate"; "minHeight": "minHeight"; "minWidth": "minWidth"; "mode": "mode"; "modeDefaults": "modeDefaults"; "modes": "modes"; "project": "project"; "readOnly": "readOnly"; "record": "record"; "resources": "resources"; "resourceTimeRanges": "resourceTimeRanges"; "scrollable": "scrollable"; "strictRecordMapping": "strictRecordMapping"; "timeRanges": "timeRanges"; "title": "title"; "tools": "tools"; "tooltip": "tooltip"; "width": "width"; "x": "x"; "y": "y"; "activeSubView": "activeSubView"; "activeView": "activeView"; "anchorSize": "anchorSize"; "isEngineReady": "isEngineReady"; "isSettingValues": "isSettingValues"; "isValid": "isValid"; "selectedAssignments": "selectedAssignments"; "selectedEvents": "selectedEvents"; "state": "state"; "type": "type"; "values": "values"; "views": "views"; "dragFeature": "dragFeature"; "eventEditFeature": "eventEditFeature"; "eventMenuFeature": "eventMenuFeature"; "eventTooltipFeature": "eventTooltipFeature"; "externalEventSourceFeature": "externalEventSourceFeature"; "loadOnDemandFeature": "loadOnDemandFeature"; "printFeature": "printFeature"; "scheduleMenuFeature": "scheduleMenuFeature"; "timeRangesFeature": "timeRangesFeature"; "weekExpanderFeature": "weekExpanderFeature"; }, { "onActiveItemChange": "onActiveItemChange"; "onAfterEventEdit": "onAfterEventEdit"; "onAfterEventSave": "onAfterEventSave"; "onAssignmentSelectionChange": "onAssignmentSelectionChange"; "onBeforeActiveItemChange": "onBeforeActiveItemChange"; "onBeforeAssignmentDelete": "onBeforeAssignmentDelete"; "onBeforeAssignmentSelectionChange": "onBeforeAssignmentSelectionChange"; "onBeforeAutoCreate": "onBeforeAutoCreate"; "onBeforeDestroy": "onBeforeDestroy"; "onBeforeDragCreateEnd": "onBeforeDragCreateEnd"; "onBeforeDragMoveEnd": "onBeforeDragMoveEnd"; "onBeforeDragResizeEnd": "onBeforeDragResizeEnd"; "onBeforeEventDelete": "onBeforeEventDelete"; "onBeforeEventEdit": "onBeforeEventEdit"; "onBeforeEventEditShow": "onBeforeEventEditShow"; "onBeforeEventSave": "onBeforeEventSave"; "onBeforeEventSelectionChange": "onBeforeEventSelectionChange"; "onBeforeHide": "onBeforeHide"; "onBeforePrint": "onBeforePrint"; "onBeforeResponsiveStateChange": "onBeforeResponsiveStateChange"; "onBeforeSetRecord": "onBeforeSetRecord"; "onBeforeShow": "onBeforeShow"; "onCatchAll": "onCatchAll"; "onCellOverflowClick": "onCellOverflowClick"; "onContextMenuItem": "onContextMenuItem"; "onContextMenuToggleItem": "onContextMenuToggleItem"; "onDataChange": "onDataChange"; "onDateChange": "onDateChange"; "onDateRangeChange": "onDateRangeChange"; "onDateRangeRequested": "onDateRangeRequested"; "onDayNumberClick": "onDayNumberClick"; "onDestroy": "onDestroy"; "onDragCreateEnd": "onDragCreateEnd"; "onDragMoveEnd": "onDragMoveEnd"; "onDragResizeEnd": "onDragResizeEnd"; "onEmptyCellClick": "onEmptyCellClick"; "onEventAutoCreated": "onEventAutoCreated"; "onEventClick": "onEventClick"; "onEventContextMenu": "onEventContextMenu"; "onEventDblClick": "onEventDblClick"; "onEventEditBeforeSetRecord": "onEventEditBeforeSetRecord"; "onEventMenuBeforeShow": "onEventMenuBeforeShow"; "onEventMenuItem": "onEventMenuItem"; "onEventMenuShow": "onEventMenuShow"; "onEventMouseDown": "onEventMouseDown"; "onEventMouseOut": "onEventMouseOut"; "onEventMouseOver": "onEventMouseOver"; "onEventMouseUp": "onEventMouseUp"; "onEventPropagate": "onEventPropagate"; "onEventSelectionChange": "onEventSelectionChange"; "onFocusIn": "onFocusIn"; "onFocusOut": "onFocusOut"; "onHide": "onHide"; "onLoadOnDemandFail": "onLoadOnDemandFail"; "onMonthNameClick": "onMonthNameClick"; "onNavigate": "onNavigate"; "onPaint": "onPaint"; "onReadOnly": "onReadOnly"; "onRecompose": "onRecompose"; "onRefresh": "onRefresh"; "onResize": "onResize"; "onResponsiveHeightChange": "onResponsiveHeightChange"; "onResponsiveStateChange": "onResponsiveStateChange"; "onResponsiveWidthChange": "onResponsiveWidthChange"; "onScheduleClick": "onScheduleClick"; "onScheduleContextMenu": "onScheduleContextMenu"; "onScheduleDblClick": "onScheduleDblClick"; "onScheduleMenuBeforeShow": "onScheduleMenuBeforeShow"; "onScheduleMenuItem": "onScheduleMenuItem"; "onScheduleMenuShow": "onScheduleMenuShow"; "onScheduleMouseDown": "onScheduleMouseDown"; "onScheduleMouseOut": "onScheduleMouseOut"; "onScheduleMouseOver": "onScheduleMouseOver"; "onScheduleMouseUp": "onScheduleMouseUp"; "onSelectionChange": "onSelectionChange"; "onShow": "onShow"; "onTimeRangeHeaderClick": "onTimeRangeHeaderClick"; "onTimeRangeHeaderContextMenu": "onTimeRangeHeaderContextMenu"; "onTimeRangeHeaderDblClick": "onTimeRangeHeaderDblClick"; "onToolClick": "onToolClick"; "onViewPaint": "onViewPaint"; "onWeekNumberClick": "onWeekNumberClick"; }, never, never>;
}
