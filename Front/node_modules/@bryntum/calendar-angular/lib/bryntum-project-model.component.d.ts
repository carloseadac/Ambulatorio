/**
 * Angular wrapper for Bryntum ProjectModel
 */
import { ElementRef, EventEmitter, SimpleChanges, OnDestroy, OnInit } from '@angular/core';
import { AssignmentModel, AssignmentModelConfig, AssignmentStore, AssignmentStoreConfig, DependencyModel, DependencyModelConfig, DependencyStore, DependencyStoreConfig, EventModel, EventModelConfig, EventStore, EventStoreConfig, Model, ModelConfig, RelationConfig, ResourceModel, ResourceModelConfig, ResourceStore, ResourceStoreConfig, ResourceTimeRangeModel, ResourceTimeRangeModelConfig, ResourceTimeRangeStore, ResourceTimeRangeStoreConfig, StateTrackingManager, StateTrackingManagerConfig, Store, StoreConfig, TimeRangeModel, TimeSpan, TimeSpanConfig } from '@bryntum/calendar';
import { ProjectModel } from '@bryntum/calendar';
import * as i0 from "@angular/core";
export declare class BryntumProjectModelComponent implements OnInit, OnDestroy {
    static instanceClass: typeof ProjectModel;
    static instanceName: string;
    private static bryntumEvents;
    private static bryntumFeatureNames;
    private static bryntumConfigs;
    private static bryntumConfigsOnly;
    private static bryntumProps;
    private elementRef;
    instance: ProjectModel;
    private bryntumConfig;
    constructor(element: ElementRef);
    assignmentModelClass: typeof AssignmentModel;
    assignmentsData: AssignmentModel[] | Partial<AssignmentModelConfig>[];
    assignmentStoreClass: typeof AssignmentStore;
    dependenciesData: DependencyModel[] | Partial<DependencyModelConfig>[];
    dependencyModelClass: typeof DependencyModel;
    dependencyStoreClass: typeof DependencyStore;
    eventModelClass: typeof EventModel;
    eventsData: EventModel[] | Partial<EventModelConfig>[];
    eventStoreClass: typeof EventStore;
    expanded: boolean;
    orderedParentIndex: number;
    parentId: string | number | null;
    parentIndex: number;
    resourceModelClass: typeof ResourceModel;
    resourcesData: ResourceModel[] | Partial<ResourceModelConfig>[];
    resourceStoreClass: typeof ResourceStore;
    resourceTimeRangesData: ResourceTimeRangeModel[];
    resourceTimeRangeStoreClass: typeof ResourceTimeRangeStore;
    silenceInitialCommit: boolean;
    timeRangeModelClass: typeof TimeRangeModel;
    timeRangesData: TimeSpan[];
    timeRangeStoreClass: typeof Store;
    assignments: AssignmentModel[] | Partial<AssignmentModelConfig>[];
    assignmentStore: AssignmentStore | Partial<AssignmentStoreConfig>;
    children: boolean | object[] | Model[] | Partial<ModelConfig>[];
    dependencies: DependencyModel[] | Partial<DependencyModelConfig>[];
    dependencyStore: DependencyStore | Partial<DependencyStoreConfig>;
    events: EventModel[] | Partial<EventModelConfig>[];
    eventStore: EventStore | Partial<EventStoreConfig>;
    id: string | number;
    json: string;
    readOnly: boolean;
    resources: ResourceModel[] | Partial<ResourceModelConfig>[];
    resourceStore: ResourceStore | Partial<ResourceStoreConfig>;
    resourceTimeRanges: ResourceTimeRangeModel[] | Partial<ResourceTimeRangeModelConfig>[];
    resourceTimeRangeStore: ResourceTimeRangeStore | Partial<ResourceTimeRangeStoreConfig>;
    stm: StateTrackingManager | Partial<StateTrackingManagerConfig>;
    timeRanges: TimeSpan[] | Partial<TimeSpanConfig>[];
    timeRangeStore: Store | Partial<StoreConfig>;
    timeZone: string | number;
    allChildren: Model[];
    autoExposeFields: boolean;
    childrenField: string;
    convertEmptyParentToLeaf: boolean | object;
    defaults: object;
    descendantCount: number;
    hasGeneratedId: boolean;
    idField: string;
    inlineData: object;
    internalId: number;
    isCommitting: boolean;
    isCreating: boolean;
    isValid: boolean;
    previousSiblingsTotalCount: number;
    relations: Record<string, RelationConfig>;
    visibleDescendantCount: number;
    onChange: EventEmitter<object>;
    onDataReady: EventEmitter<object>;
    /**
     * Create and append the underlying widget
     */
    ngOnInit(): void;
    /**
     * Watch for changes
     * @param changes
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Destroy the component
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BryntumProjectModelComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BryntumProjectModelComponent, "bryntum-project-model", never, { "assignmentModelClass": "assignmentModelClass"; "assignmentsData": "assignmentsData"; "assignmentStoreClass": "assignmentStoreClass"; "dependenciesData": "dependenciesData"; "dependencyModelClass": "dependencyModelClass"; "dependencyStoreClass": "dependencyStoreClass"; "eventModelClass": "eventModelClass"; "eventsData": "eventsData"; "eventStoreClass": "eventStoreClass"; "expanded": "expanded"; "orderedParentIndex": "orderedParentIndex"; "parentId": "parentId"; "parentIndex": "parentIndex"; "resourceModelClass": "resourceModelClass"; "resourcesData": "resourcesData"; "resourceStoreClass": "resourceStoreClass"; "resourceTimeRangesData": "resourceTimeRangesData"; "resourceTimeRangeStoreClass": "resourceTimeRangeStoreClass"; "silenceInitialCommit": "silenceInitialCommit"; "timeRangeModelClass": "timeRangeModelClass"; "timeRangesData": "timeRangesData"; "timeRangeStoreClass": "timeRangeStoreClass"; "assignments": "assignments"; "assignmentStore": "assignmentStore"; "children": "children"; "dependencies": "dependencies"; "dependencyStore": "dependencyStore"; "events": "events"; "eventStore": "eventStore"; "id": "id"; "json": "json"; "readOnly": "readOnly"; "resources": "resources"; "resourceStore": "resourceStore"; "resourceTimeRanges": "resourceTimeRanges"; "resourceTimeRangeStore": "resourceTimeRangeStore"; "stm": "stm"; "timeRanges": "timeRanges"; "timeRangeStore": "timeRangeStore"; "timeZone": "timeZone"; "allChildren": "allChildren"; "autoExposeFields": "autoExposeFields"; "childrenField": "childrenField"; "convertEmptyParentToLeaf": "convertEmptyParentToLeaf"; "defaults": "defaults"; "descendantCount": "descendantCount"; "hasGeneratedId": "hasGeneratedId"; "idField": "idField"; "inlineData": "inlineData"; "internalId": "internalId"; "isCommitting": "isCommitting"; "isCreating": "isCreating"; "isValid": "isValid"; "previousSiblingsTotalCount": "previousSiblingsTotalCount"; "relations": "relations"; "visibleDescendantCount": "visibleDescendantCount"; }, { "onChange": "onChange"; "onDataReady": "onDataReady"; }, never, never>;
}
