(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@bryntum/calendar')) :
    typeof define === 'function' && define.amd ? define('@bryntum/calendar-angular', ['exports', '@angular/core', '@bryntum/calendar'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.bryntum = global.bryntum || {}, global.bryntum["calendar-angular"] = {}), global.ng.core, global["@bryntum/calendar"]));
})(this, (function (exports, i0, calendar) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /**
     * Angular wrapper for Bryntum Fullscreen button
     */
    var BryntumFullscreenButtonComponent = /** @class */ (function () {
        function BryntumFullscreenButtonComponent(element) {
            this.elementRef = element;
        }
        /**
         * Initializes component
         */
        BryntumFullscreenButtonComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (!calendar.Fullscreen.enabled) {
                return;
            }
            this.button = new calendar.Button({
                appendTo: this.elementRef.nativeElement,
                icon: 'b-icon b-icon-fullscreen',
                tooltip: 'Fullscreen',
                toggleable: true,
                onToggle: function (_a) {
                    var pressed = _a.pressed;
                    pressed ? calendar.Fullscreen.request(document.documentElement) : calendar.Fullscreen.exit();
                }
            });
            calendar.Fullscreen.onFullscreenChange(function () {
                _this.button['pressed'] = calendar.Fullscreen.isFullscreen;
            });
        };
        /**
         * Destroys component
         */
        BryntumFullscreenButtonComponent.prototype.ngOnDestroy = function () {
            if (this.button) {
                this.button.destroy();
            }
        };
        return BryntumFullscreenButtonComponent;
    }());
    BryntumFullscreenButtonComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumFullscreenButtonComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumFullscreenButtonComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumFullscreenButtonComponent, selector: "bryntum-fullscreen-button", ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumFullscreenButtonComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-fullscreen-button',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; } });

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) { if (f !== void 0 && typeof f !== "function")
            throw new TypeError("Function expected"); return f; }
        var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
        var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
        var _, done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
            var context = {};
            for (var p in contextIn)
                context[p] = p === "access" ? {} : contextIn[p];
            for (var p in contextIn.access)
                context.access[p] = contextIn.access[p];
            context.addInitializer = function (f) { if (done)
                throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
            var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
            if (kind === "accessor") {
                if (result === void 0)
                    continue;
                if (result === null || typeof result !== "object")
                    throw new TypeError("Object expected");
                if (_ = accept(result.get))
                    descriptor.get = _;
                if (_ = accept(result.set))
                    descriptor.set = _;
                if (_ = accept(result.init))
                    initializers.push(_);
            }
            else if (_ = accept(result)) {
                if (kind === "field")
                    initializers.push(_);
                else
                    descriptor[key] = _;
            }
        }
        if (target)
            Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
    }
    ;
    function __runInitializers(thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
            value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
    }
    ;
    function __propKey(x) {
        return typeof x === "symbol" ? x : "".concat(x);
    }
    ;
    function __setFunctionName(f, name, prefix) {
        if (typeof name === "symbol")
            name = name.description ? "[".concat(name.description, "]") : "";
        return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
    }
    ;
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function () { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }
    function __classPrivateFieldIn(state, receiver) {
        if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function"))
            throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
    }

    var WrapperHelper = /** @class */ (function () {
        function WrapperHelper() {
        }
        /**
         * Development warning. Showed when environment is set to 'development'.
         */
        WrapperHelper.devWarning = function (clsName, msg) {
            // @ts-ignore
            if (window.bryntum && window.bryntum.isTestEnv || i0.isDevMode()) {
                console.warn("Bryntum" + clsName + "Component development warning!\n" + msg + "\n" +
                    'Please check Angular integration guide: https://bryntum.com/products/calendar/docs/guide/Calendar/integration/angular/guide');
            }
        };
        /**
         * Development warning for container parameter.
         */
        WrapperHelper.devWarningContainer = function (clsName, containerParam) {
            WrapperHelper.devWarning(clsName, "Using \"" + containerParam + "\" parameter for configuration is not recommended.\n" +
                'Widget is placed automatically inside it\'s container element' +
                ("Solution: remove \"" + containerParam + "\" parameter from configuration."));
        };
        /**
         * Development warning for config parameter.
         */
        WrapperHelper.devWarningConfigProp = function (clsName, prop) {
            WrapperHelper.devWarning(clsName, "Using \"" + prop + "\" parameter for configuration is not recommended.\n" +
                ("Solution: Use separate parameter for each \"" + prop + "\" value to enable reactive updates of the API instance"));
        };
        /**
         * Development warning for config property.
         */
        WrapperHelper.devWarningUpdateProp = function (clsName, prop) {
            WrapperHelper.devWarning(clsName, "\"" + prop + "\" is a static config option for component constructor only. No runtime changes are supported!");
        };
        /**
         * Applies property value to Bryntum config or instance.
         * @param {Object} configOrInstance target object
         * @param {string} prop property name
         * @param {any} value value
         * @param {Boolean} isConfig config setting mode
         */
        WrapperHelper.applyPropValue = function (configOrInstance, prop, value, isConfig) {
            if (isConfig === void 0) { isConfig = true; }
            if (prop === 'project') {
                // Allow use ProjectModel component as project
                if (value && typeof value === 'object') {
                    configOrInstance[prop] = value.instance || value;
                }
            }
            else if (prop === 'features' && typeof value === 'object') {
                Object.keys(value).forEach(function (key) { return WrapperHelper.applyPropValue(configOrInstance, key + "Feature", value[key], isConfig); });
            }
            else if (prop === 'config' && typeof value === 'object') {
                Object.keys(value).forEach(function (key) { return WrapperHelper.applyPropValue(configOrInstance, key, value[key], isConfig); });
            }
            else if (prop === 'columns' && !isConfig) {
                configOrInstance['columns'].data = value;
            }
            else if (prop.endsWith('Feature')) {
                var features = configOrInstance['features'], featureName = prop.replace('Feature', '');
                if (isConfig) {
                    features[featureName] = value;
                }
                else {
                    var feature = features[featureName];
                    if (feature) {
                        feature.setConfig(value);
                    }
                }
            }
            else {
                configOrInstance[prop] = value;
            }
        };
        return WrapperHelper;
    }());

    var BryntumButtonComponent = /** @class */ (function () {
        function BryntumButtonComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onBeforeShowMenu = new i0.EventEmitter();
            this.onBeforeToggle = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onClick = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onToggle = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumButtonComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumButtonComponent.instanceClass, instanceName = BryntumButtonComponent.instanceName, bryntumConfigs = BryntumButtonComponent.bryntumConfigs, bryntumEvents = BryntumButtonComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumButtonComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumButtonComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumButtonComponent.bryntumConfigsOnly, bryntumProps = BryntumButtonComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumButtonComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumButtonComponent;
    }());
    BryntumButtonComponent.instanceClass = calendar.Button;
    BryntumButtonComponent.instanceName = 'Button';
    BryntumButtonComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onBeforeShowMenu',
        'onBeforeToggle',
        'onCatchAll',
        'onClick',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onToggle'
    ];
    BryntumButtonComponent.bryntumFeatureNames = [];
    BryntumButtonComponent.bryntumConfigs = BryntumButtonComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'color',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'href',
        'html',
        'htmlCls',
        'icon',
        'iconAlign',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'menu',
        'menuIcon',
        'minHeight',
        'minWidth',
        'monitorResize',
        'owner',
        'positioned',
        'pressed',
        'pressedIcon',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'tab',
        'tag',
        'target',
        'text',
        'textAlign',
        'title',
        'toggleable',
        'toggleGroup',
        'tooltip',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumButtonComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'htmlCls',
        'ignoreParentReadOnly',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'tab',
        'tag',
        'textAlign',
        'title',
        'ui',
        'weight'
    ];
    BryntumButtonComponent.bryntumProps = BryntumButtonComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'color',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'href',
        'html',
        'icon',
        'iconAlign',
        'id',
        'insertBefore',
        'insertFirst',
        'margin',
        'maxHeight',
        'maxWidth',
        'menu',
        'menuIcon',
        'minHeight',
        'minWidth',
        'pressed',
        'pressedIcon',
        'readOnly',
        'scrollable',
        'target',
        'text',
        'toggleable',
        'toggleGroup',
        'tooltip',
        'type',
        'width',
        'x',
        'y'
    ]);
    BryntumButtonComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumButtonComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumButtonComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumButtonComponent, selector: "bryntum-button", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", tab: "tab", tag: "tag", textAlign: "textAlign", title: "title", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", color: "color", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", href: "href", html: "html", icon: "icon", iconAlign: "iconAlign", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuIcon: "menuIcon", minHeight: "minHeight", minWidth: "minWidth", pressed: "pressed", pressedIcon: "pressedIcon", readOnly: "readOnly", scrollable: "scrollable", target: "target", text: "text", toggleable: "toggleable", toggleGroup: "toggleGroup", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onBeforeShowMenu: "onBeforeShowMenu", onBeforeToggle: "onBeforeToggle", onCatchAll: "onCatchAll", onClick: "onClick", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onToggle: "onToggle" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumButtonComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-button',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], href: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], icon: [{
                    type: i0.Input
                }], iconAlign: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], menu: [{
                    type: i0.Input
                }], menuIcon: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], pressed: [{
                    type: i0.Input
                }], pressedIcon: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], target: [{
                    type: i0.Input
                }], text: [{
                    type: i0.Input
                }], toggleable: [{
                    type: i0.Input
                }], toggleGroup: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onBeforeShowMenu: [{
                    type: i0.Output
                }], onBeforeToggle: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onClick: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onToggle: [{
                    type: i0.Output
                }] } });

    /**
     * Angular wrapper for Bryntum Demo Header
     */
    var BryntumDemoHeaderComponent = /** @class */ (function () {
        function BryntumDemoHeaderComponent(element) {
            this.title = document.title.split(' - ')[1] || document.title;
            this.link = '';
            this.elementRef = element;
            var match = /(.*?\/)(frameworks\/.*?)\/dist/.exec(document.location.href);
            this.link = match ? match[1] + "#example-" + match[2].replace(/\//gm, '-') : '#';
        }
        return BryntumDemoHeaderComponent;
    }());
    BryntumDemoHeaderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumDemoHeaderComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumDemoHeaderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumDemoHeaderComponent, selector: "bryntum-demo-header", ngImport: i0__namespace, template: "\n        <header class=\"demo-header\">\n            <div id=\"title-container\">\n                <a id=\"title\" href=\"{{ link }}\">\n                    <h1>{{ title }}</h1>\n                </a>\n            </div>\n            <ng-content></ng-content>\n            <div id=\"tools\">\n                <bryntum-button\n                    text=\"Download Trial\"\n                    href=\"https://bryntum.com/download/?product=calendar\"\n                    cls=\"b-green b-raised\"\n                ></bryntum-button>\n                <bryntum-fullscreen-button></bryntum-fullscreen-button>\n            </div>\n        </header>\n", isInline: true, components: [{ type: BryntumButtonComponent, selector: "bryntum-button", inputs: ["adopt", "align", "anchor", "ariaDescription", "ariaLabel", "bubbleEvents", "callOnFunctions", "centered", "config", "constrainTo", "contentElementCls", "defaultBindProperty", "dock", "draggable", "floating", "hideAnimation", "htmlCls", "ignoreParentReadOnly", "listeners", "localeClass", "localizable", "localizableProperties", "maskDefaults", "masked", "monitorResize", "owner", "positioned", "preventTooltipOnTouch", "relayStoreEvents", "ripple", "rootElement", "scrollAction", "showAnimation", "showTooltipWhenDisabled", "tab", "tag", "textAlign", "title", "ui", "weight", "alignSelf", "appendTo", "badge", "cls", "color", "content", "dataset", "disabled", "extraData", "flex", "height", "hidden", "href", "html", "icon", "iconAlign", "id", "insertBefore", "insertFirst", "margin", "maxHeight", "maxWidth", "menu", "menuIcon", "minHeight", "minWidth", "pressed", "pressedIcon", "readOnly", "scrollable", "target", "text", "toggleable", "toggleGroup", "tooltip", "width", "x", "y", "anchorSize", "type"], outputs: ["onAction", "onBeforeDestroy", "onBeforeHide", "onBeforeShow", "onBeforeShowMenu", "onBeforeToggle", "onCatchAll", "onClick", "onDestroy", "onFocusIn", "onFocusOut", "onHide", "onPaint", "onReadOnly", "onRecompose", "onResize", "onShow", "onToggle"] }, { type: BryntumFullscreenButtonComponent, selector: "bryntum-fullscreen-button" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumDemoHeaderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-demo-header',
                        template: "\n        <header class=\"demo-header\">\n            <div id=\"title-container\">\n                <a id=\"title\" href=\"{{ link }}\">\n                    <h1>{{ title }}</h1>\n                </a>\n            </div>\n            <ng-content></ng-content>\n            <div id=\"tools\">\n                <bryntum-button\n                    text=\"Download Trial\"\n                    href=\"https://bryntum.com/download/?product=calendar\"\n                    cls=\"b-green b-raised\"\n                ></bryntum-button>\n                <bryntum-fullscreen-button></bryntum-fullscreen-button>\n            </div>\n        </header>\n"
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; } });

    var BryntumButtonGroupComponent = /** @class */ (function () {
        function BryntumButtonGroupComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onClick = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onToggle = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumButtonGroupComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumButtonGroupComponent.instanceClass, instanceName = BryntumButtonGroupComponent.instanceName, bryntumConfigs = BryntumButtonGroupComponent.bryntumConfigs, bryntumEvents = BryntumButtonGroupComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumButtonGroupComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumButtonGroupComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumButtonGroupComponent.bryntumConfigsOnly, bryntumProps = BryntumButtonGroupComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumButtonGroupComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumButtonGroupComponent;
    }());
    BryntumButtonGroupComponent.instanceClass = calendar.ButtonGroup;
    BryntumButtonGroupComponent.instanceName = 'ButtonGroup';
    BryntumButtonGroupComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onClick',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onToggle'
    ];
    BryntumButtonGroupComponent.bryntumFeatureNames = [];
    BryntumButtonGroupComponent.bryntumConfigs = BryntumButtonGroupComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'color',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'strictRecordMapping',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'toggleGroup',
        'tooltip',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumButtonGroupComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'color',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'toggleGroup',
        'ui',
        'weight'
    ];
    BryntumButtonGroupComponent.bryntumProps = BryntumButtonGroupComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'strictRecordMapping',
        'tooltip',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumButtonGroupComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumButtonGroupComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumButtonGroupComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumButtonGroupComponent, selector: "bryntum-button-group", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", color: "color", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", namedItems: "namedItems", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", tab: "tab", tag: "tag", textAlign: "textAlign", textContent: "textContent", title: "title", toggleGroup: "toggleGroup", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", type: "type", values: "values" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onClick: "onClick", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onToggle: "onToggle" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumButtonGroupComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-button-group',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], toggleGroup: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onClick: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onToggle: [{
                    type: i0.Output
                }] } });

    var BryntumCalendarComponent = /** @class */ (function () {
        function BryntumCalendarComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onActiveItemChange = new i0.EventEmitter();
            this.onAfterEventEdit = new i0.EventEmitter();
            this.onAfterEventSave = new i0.EventEmitter();
            this.onAssignmentSelectionChange = new i0.EventEmitter();
            this.onBeforeActiveItemChange = new i0.EventEmitter();
            this.onBeforeAssignmentDelete = new i0.EventEmitter();
            this.onBeforeAssignmentSelectionChange = new i0.EventEmitter();
            this.onBeforeAutoCreate = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeDragCreateEnd = new i0.EventEmitter();
            this.onBeforeDragMoveEnd = new i0.EventEmitter();
            this.onBeforeDragResizeEnd = new i0.EventEmitter();
            this.onBeforeEventDelete = new i0.EventEmitter();
            this.onBeforeEventEdit = new i0.EventEmitter();
            this.onBeforeEventEditShow = new i0.EventEmitter();
            this.onBeforeEventSave = new i0.EventEmitter();
            this.onBeforeEventSelectionChange = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforePrint = new i0.EventEmitter();
            this.onBeforeResponsiveStateChange = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onCellOverflowClick = new i0.EventEmitter();
            this.onContextMenuItem = new i0.EventEmitter();
            this.onContextMenuToggleItem = new i0.EventEmitter();
            this.onDataChange = new i0.EventEmitter();
            this.onDateChange = new i0.EventEmitter();
            this.onDateRangeChange = new i0.EventEmitter();
            this.onDateRangeRequested = new i0.EventEmitter();
            this.onDayNumberClick = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onDragCreateEnd = new i0.EventEmitter();
            this.onDragMoveEnd = new i0.EventEmitter();
            this.onDragResizeEnd = new i0.EventEmitter();
            this.onEmptyCellClick = new i0.EventEmitter();
            this.onEventAutoCreated = new i0.EventEmitter();
            this.onEventClick = new i0.EventEmitter();
            this.onEventContextMenu = new i0.EventEmitter();
            this.onEventDblClick = new i0.EventEmitter();
            this.onEventEditBeforeSetRecord = new i0.EventEmitter();
            this.onEventMenuBeforeShow = new i0.EventEmitter();
            this.onEventMenuItem = new i0.EventEmitter();
            this.onEventMenuShow = new i0.EventEmitter();
            this.onEventMouseDown = new i0.EventEmitter();
            this.onEventMouseOut = new i0.EventEmitter();
            this.onEventMouseOver = new i0.EventEmitter();
            this.onEventMouseUp = new i0.EventEmitter();
            this.onEventPropagate = new i0.EventEmitter();
            this.onEventSelectionChange = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onLoadOnDemandFail = new i0.EventEmitter();
            this.onMonthNameClick = new i0.EventEmitter();
            this.onNavigate = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onRefresh = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onResponsiveHeightChange = new i0.EventEmitter();
            this.onResponsiveStateChange = new i0.EventEmitter();
            this.onResponsiveWidthChange = new i0.EventEmitter();
            this.onScheduleClick = new i0.EventEmitter();
            this.onScheduleContextMenu = new i0.EventEmitter();
            this.onScheduleDblClick = new i0.EventEmitter();
            this.onScheduleMenuBeforeShow = new i0.EventEmitter();
            this.onScheduleMenuItem = new i0.EventEmitter();
            this.onScheduleMenuShow = new i0.EventEmitter();
            this.onScheduleMouseDown = new i0.EventEmitter();
            this.onScheduleMouseOut = new i0.EventEmitter();
            this.onScheduleMouseOver = new i0.EventEmitter();
            this.onScheduleMouseUp = new i0.EventEmitter();
            this.onSelectionChange = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTimeRangeHeaderClick = new i0.EventEmitter();
            this.onTimeRangeHeaderContextMenu = new i0.EventEmitter();
            this.onTimeRangeHeaderDblClick = new i0.EventEmitter();
            this.onToolClick = new i0.EventEmitter();
            this.onViewPaint = new i0.EventEmitter();
            this.onWeekNumberClick = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumCalendarComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumCalendarComponent.instanceClass, instanceName = BryntumCalendarComponent.instanceName, bryntumConfigs = BryntumCalendarComponent.bryntumConfigs, bryntumEvents = BryntumCalendarComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
            // Backwards compatibility for gridInstance, schedulerInstance etc.
            // @ts-ignore
            me[calendar.StringHelper.uncapitalize(instanceName) + 'Instance'] = me.instance;
            // 
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumCalendarComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumCalendarComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumCalendarComponent.bryntumConfigsOnly, bryntumProps = BryntumCalendarComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumCalendarComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumCalendarComponent;
    }());
    BryntumCalendarComponent.instanceClass = calendar.Calendar;
    BryntumCalendarComponent.instanceName = 'Calendar';
    BryntumCalendarComponent.bryntumEvents = [
        'onActiveItemChange',
        'onAfterEventEdit',
        'onAfterEventSave',
        'onAssignmentSelectionChange',
        'onBeforeActiveItemChange',
        'onBeforeAssignmentDelete',
        'onBeforeAssignmentSelectionChange',
        'onBeforeAutoCreate',
        'onBeforeDestroy',
        'onBeforeDragCreateEnd',
        'onBeforeDragMoveEnd',
        'onBeforeDragResizeEnd',
        'onBeforeEventDelete',
        'onBeforeEventEdit',
        'onBeforeEventEditShow',
        'onBeforeEventSave',
        'onBeforeEventSelectionChange',
        'onBeforeHide',
        'onBeforePrint',
        'onBeforeResponsiveStateChange',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onCellOverflowClick',
        'onContextMenuItem',
        'onContextMenuToggleItem',
        'onDataChange',
        'onDateChange',
        'onDateRangeChange',
        'onDateRangeRequested',
        'onDayNumberClick',
        'onDestroy',
        'onDragCreateEnd',
        'onDragMoveEnd',
        'onDragResizeEnd',
        'onEmptyCellClick',
        'onEventAutoCreated',
        'onEventClick',
        'onEventContextMenu',
        'onEventDblClick',
        'onEventEditBeforeSetRecord',
        'onEventMenuBeforeShow',
        'onEventMenuItem',
        'onEventMenuShow',
        'onEventMouseDown',
        'onEventMouseOut',
        'onEventMouseOver',
        'onEventMouseUp',
        'onEventPropagate',
        'onEventSelectionChange',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onLoadOnDemandFail',
        'onMonthNameClick',
        'onNavigate',
        'onPaint',
        'onRecompose',
        'onRefresh',
        'onResize',
        'onResponsiveHeightChange',
        'onResponsiveStateChange',
        'onResponsiveWidthChange',
        'onScheduleClick',
        'onScheduleContextMenu',
        'onScheduleDblClick',
        'onScheduleMenuBeforeShow',
        'onScheduleMenuItem',
        'onScheduleMenuShow',
        'onScheduleMouseDown',
        'onScheduleMouseOut',
        'onScheduleMouseOver',
        'onScheduleMouseUp',
        'onSelectionChange',
        'onShow',
        'onTimeRangeHeaderClick',
        'onTimeRangeHeaderContextMenu',
        'onTimeRangeHeaderDblClick',
        'onToolClick',
        'onViewPaint',
        'onWeekNumberClick'
    ];
    BryntumCalendarComponent.bryntumFeatureNames = [
        'dragFeature',
        'eventEditFeature',
        'eventMenuFeature',
        'eventTooltipFeature',
        'externalEventSourceFeature',
        'loadOnDemandFeature',
        'printFeature',
        'scheduleMenuFeature',
        'timeRangesFeature',
        'weekExpanderFeature'
    ];
    BryntumCalendarComponent.bryntumConfigs = BryntumCalendarComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'allowOverlap',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'assignments',
        'assignmentStore',
        'autoCreate',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'breakpoints',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'contextMenuTriggerEvent',
        'crudManager',
        'crudManagerClass',
        'dataset',
        'date',
        'dateFormat',
        'datePicker',
        'defaultBindProperty',
        'defaultCalendar',
        'defaultFocus',
        'defaults',
        'deselectOnClick',
        'destroyStores',
        'disabled',
        'dock',
        'draggable',
        'enableDeleteKey',
        'enableRecurringEvents',
        'enableUndoRedoKeys',
        'events',
        'eventSelectionDisabled',
        'eventStore',
        'extraData',
        'features',
        'flex',
        'floating',
        'footer',
        'header',
        'height',
        'hidden',
        'hideAnimation',
        'hideNonWorkingDays',
        'hideWhenEmpty',
        'highlightDate',
        'highlightPredecessors',
        'highlightSuccessors',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'includeWeekendsButton',
        'insertBefore',
        'insertFirst',
        'isEventSelectable',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'loadMask',
        'loadMaskDefaults',
        'loadMaskError',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maintainSelectionOnDatasetChange',
        'margin',
        'maskDefaults',
        'masked',
        'maxDate',
        'maxHeight',
        'maxWidth',
        'minDate',
        'minHeight',
        'minWidth',
        'mode',
        'modeDefaults',
        'modes',
        'monitorResize',
        'multiEventSelect',
        'namedItems',
        'navigatorPlacement',
        'nonWorkingDays',
        'overlaySidebar',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'project',
        'readOnly',
        'record',
        'relayStoreEvents',
        'resourceImagePath',
        'resources',
        'resourceStore',
        'resourceTimeRanges',
        'resourceTimeRangeStore',
        'responsive',
        'responsiveRoot',
        'responsiveState',
        'responsiveTarget',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showRecurringUI',
        'showTooltipWhenDisabled',
        'sidebar',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strictRecordMapping',
        'strips',
        'syncMask',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'timeRanges',
        'timeRangeStore',
        'timeZone',
        'title',
        'tools',
        'tooltip',
        'trapFocus',
        'triggerSelectionChangeOnRemove',
        'ui',
        'weekStartDay',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumCalendarComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'allowOverlap',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'assignmentStore',
        'autoCreate',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'breakpoints',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'contentElementCls',
        'contextMenuTriggerEvent',
        'crudManagerClass',
        'dateFormat',
        'datePicker',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'deselectOnClick',
        'destroyStores',
        'dock',
        'draggable',
        'enableDeleteKey',
        'enableRecurringEvents',
        'enableUndoRedoKeys',
        'eventSelectionDisabled',
        'eventStore',
        'floating',
        'footer',
        'header',
        'hideAnimation',
        'hideWhenEmpty',
        'highlightDate',
        'highlightPredecessors',
        'highlightSuccessors',
        'htmlCls',
        'ignoreParentReadOnly',
        'includeWeekendsButton',
        'itemCls',
        'lazyItems',
        'listeners',
        'loadMask',
        'loadMaskDefaults',
        'loadMaskError',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maintainSelectionOnDatasetChange',
        'maskDefaults',
        'masked',
        'monitorResize',
        'multiEventSelect',
        'namedItems',
        'navigatorPlacement',
        'nonWorkingDays',
        'overlaySidebar',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'resourceImagePath',
        'resourceStore',
        'resourceTimeRangeStore',
        'responsive',
        'responsiveRoot',
        'responsiveState',
        'responsiveTarget',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showRecurringUI',
        'showTooltipWhenDisabled',
        'sidebar',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strips',
        'syncMask',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'timeRangeStore',
        'timeZone',
        'trapFocus',
        'triggerSelectionChangeOnRemove',
        'ui',
        'weekStartDay',
        'weight'
    ];
    BryntumCalendarComponent.bryntumProps = BryntumCalendarComponent.bryntumFeatureNames.concat([
        'activeSubView',
        'activeView',
        'alignSelf',
        'anchorSize',
        'appendTo',
        'assignments',
        'cls',
        'content',
        'crudManager',
        'dataset',
        'date',
        'defaultCalendar',
        'disabled',
        'events',
        'extraData',
        'features',
        'flex',
        'height',
        'hidden',
        'hideNonWorkingDays',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isEngineReady',
        'isEventSelectable',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxDate',
        'maxHeight',
        'maxWidth',
        'minDate',
        'minHeight',
        'minWidth',
        'mode',
        'modeDefaults',
        'modes',
        'project',
        'readOnly',
        'record',
        'resources',
        'resourceTimeRanges',
        'scrollable',
        'selectedAssignments',
        'selectedEvents',
        'state',
        'strictRecordMapping',
        'timeRanges',
        'title',
        'tools',
        'tooltip',
        'type',
        'values',
        'views',
        'width',
        'x',
        'y'
    ]);
    BryntumCalendarComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumCalendarComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumCalendarComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumCalendarComponent, selector: "bryntum-calendar", inputs: { adopt: "adopt", align: "align", allowOverlap: "allowOverlap", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", assignmentStore: "assignmentStore", autoCreate: "autoCreate", autoUpdateRecord: "autoUpdateRecord", bbar: "bbar", bodyCls: "bodyCls", breakpoints: "breakpoints", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", collapsed: "collapsed", collapsible: "collapsible", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", contextMenuTriggerEvent: "contextMenuTriggerEvent", crudManagerClass: "crudManagerClass", dateFormat: "dateFormat", datePicker: "datePicker", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", deselectOnClick: "deselectOnClick", destroyStores: "destroyStores", dock: "dock", draggable: "draggable", enableDeleteKey: "enableDeleteKey", enableRecurringEvents: "enableRecurringEvents", enableUndoRedoKeys: "enableUndoRedoKeys", eventSelectionDisabled: "eventSelectionDisabled", eventStore: "eventStore", floating: "floating", footer: "footer", header: "header", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", highlightDate: "highlightDate", highlightPredecessors: "highlightPredecessors", highlightSuccessors: "highlightSuccessors", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", includeWeekendsButton: "includeWeekendsButton", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", loadMask: "loadMask", loadMaskDefaults: "loadMaskDefaults", loadMaskError: "loadMaskError", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maintainSelectionOnDatasetChange: "maintainSelectionOnDatasetChange", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", multiEventSelect: "multiEventSelect", namedItems: "namedItems", navigatorPlacement: "navigatorPlacement", nonWorkingDays: "nonWorkingDays", overlaySidebar: "overlaySidebar", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", resourceImagePath: "resourceImagePath", resourceStore: "resourceStore", resourceTimeRangeStore: "resourceTimeRangeStore", responsive: "responsive", responsiveRoot: "responsiveRoot", responsiveState: "responsiveState", responsiveTarget: "responsiveTarget", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showRecurringUI: "showRecurringUI", showTooltipWhenDisabled: "showTooltipWhenDisabled", sidebar: "sidebar", stateful: "stateful", statefulEvents: "statefulEvents", stateId: "stateId", stateProvider: "stateProvider", strips: "strips", syncMask: "syncMask", tab: "tab", tag: "tag", tbar: "tbar", textAlign: "textAlign", textContent: "textContent", timeRangeStore: "timeRangeStore", timeZone: "timeZone", trapFocus: "trapFocus", triggerSelectionChangeOnRemove: "triggerSelectionChangeOnRemove", ui: "ui", weekStartDay: "weekStartDay", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", assignments: "assignments", cls: "cls", content: "content", crudManager: "crudManager", dataset: "dataset", date: "date", defaultCalendar: "defaultCalendar", disabled: "disabled", events: "events", extraData: "extraData", features: "features", flex: "flex", height: "height", hidden: "hidden", hideNonWorkingDays: "hideNonWorkingDays", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", isEventSelectable: "isEventSelectable", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxDate: "maxDate", maxHeight: "maxHeight", maxWidth: "maxWidth", minDate: "minDate", minHeight: "minHeight", minWidth: "minWidth", mode: "mode", modeDefaults: "modeDefaults", modes: "modes", project: "project", readOnly: "readOnly", record: "record", resources: "resources", resourceTimeRanges: "resourceTimeRanges", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", timeRanges: "timeRanges", title: "title", tools: "tools", tooltip: "tooltip", width: "width", x: "x", y: "y", activeSubView: "activeSubView", activeView: "activeView", anchorSize: "anchorSize", isEngineReady: "isEngineReady", isSettingValues: "isSettingValues", isValid: "isValid", selectedAssignments: "selectedAssignments", selectedEvents: "selectedEvents", state: "state", type: "type", values: "values", views: "views", dragFeature: "dragFeature", eventEditFeature: "eventEditFeature", eventMenuFeature: "eventMenuFeature", eventTooltipFeature: "eventTooltipFeature", externalEventSourceFeature: "externalEventSourceFeature", loadOnDemandFeature: "loadOnDemandFeature", printFeature: "printFeature", scheduleMenuFeature: "scheduleMenuFeature", timeRangesFeature: "timeRangesFeature", weekExpanderFeature: "weekExpanderFeature" }, outputs: { onActiveItemChange: "onActiveItemChange", onAfterEventEdit: "onAfterEventEdit", onAfterEventSave: "onAfterEventSave", onAssignmentSelectionChange: "onAssignmentSelectionChange", onBeforeActiveItemChange: "onBeforeActiveItemChange", onBeforeAssignmentDelete: "onBeforeAssignmentDelete", onBeforeAssignmentSelectionChange: "onBeforeAssignmentSelectionChange", onBeforeAutoCreate: "onBeforeAutoCreate", onBeforeDestroy: "onBeforeDestroy", onBeforeDragCreateEnd: "onBeforeDragCreateEnd", onBeforeDragMoveEnd: "onBeforeDragMoveEnd", onBeforeDragResizeEnd: "onBeforeDragResizeEnd", onBeforeEventDelete: "onBeforeEventDelete", onBeforeEventEdit: "onBeforeEventEdit", onBeforeEventEditShow: "onBeforeEventEditShow", onBeforeEventSave: "onBeforeEventSave", onBeforeEventSelectionChange: "onBeforeEventSelectionChange", onBeforeHide: "onBeforeHide", onBeforePrint: "onBeforePrint", onBeforeResponsiveStateChange: "onBeforeResponsiveStateChange", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onCellOverflowClick: "onCellOverflowClick", onContextMenuItem: "onContextMenuItem", onContextMenuToggleItem: "onContextMenuToggleItem", onDataChange: "onDataChange", onDateChange: "onDateChange", onDateRangeChange: "onDateRangeChange", onDateRangeRequested: "onDateRangeRequested", onDayNumberClick: "onDayNumberClick", onDestroy: "onDestroy", onDragCreateEnd: "onDragCreateEnd", onDragMoveEnd: "onDragMoveEnd", onDragResizeEnd: "onDragResizeEnd", onEmptyCellClick: "onEmptyCellClick", onEventAutoCreated: "onEventAutoCreated", onEventClick: "onEventClick", onEventContextMenu: "onEventContextMenu", onEventDblClick: "onEventDblClick", onEventEditBeforeSetRecord: "onEventEditBeforeSetRecord", onEventMenuBeforeShow: "onEventMenuBeforeShow", onEventMenuItem: "onEventMenuItem", onEventMenuShow: "onEventMenuShow", onEventMouseDown: "onEventMouseDown", onEventMouseOut: "onEventMouseOut", onEventMouseOver: "onEventMouseOver", onEventMouseUp: "onEventMouseUp", onEventPropagate: "onEventPropagate", onEventSelectionChange: "onEventSelectionChange", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onLoadOnDemandFail: "onLoadOnDemandFail", onMonthNameClick: "onMonthNameClick", onNavigate: "onNavigate", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onRefresh: "onRefresh", onResize: "onResize", onResponsiveHeightChange: "onResponsiveHeightChange", onResponsiveStateChange: "onResponsiveStateChange", onResponsiveWidthChange: "onResponsiveWidthChange", onScheduleClick: "onScheduleClick", onScheduleContextMenu: "onScheduleContextMenu", onScheduleDblClick: "onScheduleDblClick", onScheduleMenuBeforeShow: "onScheduleMenuBeforeShow", onScheduleMenuItem: "onScheduleMenuItem", onScheduleMenuShow: "onScheduleMenuShow", onScheduleMouseDown: "onScheduleMouseDown", onScheduleMouseOut: "onScheduleMouseOut", onScheduleMouseOver: "onScheduleMouseOver", onScheduleMouseUp: "onScheduleMouseUp", onSelectionChange: "onSelectionChange", onShow: "onShow", onTimeRangeHeaderClick: "onTimeRangeHeaderClick", onTimeRangeHeaderContextMenu: "onTimeRangeHeaderContextMenu", onTimeRangeHeaderDblClick: "onTimeRangeHeaderDblClick", onToolClick: "onToolClick", onViewPaint: "onViewPaint", onWeekNumberClick: "onWeekNumberClick" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumCalendarComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-calendar',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], allowOverlap: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], assignmentStore: [{
                    type: i0.Input
                }], autoCreate: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bbar: [{
                    type: i0.Input
                }], bodyCls: [{
                    type: i0.Input
                }], breakpoints: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], collapsed: [{
                    type: i0.Input
                }], collapsible: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], contextMenuTriggerEvent: [{
                    type: i0.Input
                }], crudManagerClass: [{
                    type: i0.Input
                }], dateFormat: [{
                    type: i0.Input
                }], datePicker: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], deselectOnClick: [{
                    type: i0.Input
                }], destroyStores: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], enableDeleteKey: [{
                    type: i0.Input
                }], enableRecurringEvents: [{
                    type: i0.Input
                }], enableUndoRedoKeys: [{
                    type: i0.Input
                }], eventSelectionDisabled: [{
                    type: i0.Input
                }], eventStore: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], footer: [{
                    type: i0.Input
                }], header: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], highlightDate: [{
                    type: i0.Input
                }], highlightPredecessors: [{
                    type: i0.Input
                }], highlightSuccessors: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], includeWeekendsButton: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], loadMask: [{
                    type: i0.Input
                }], loadMaskDefaults: [{
                    type: i0.Input
                }], loadMaskError: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maintainSelectionOnDatasetChange: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], multiEventSelect: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], navigatorPlacement: [{
                    type: i0.Input
                }], nonWorkingDays: [{
                    type: i0.Input
                }], overlaySidebar: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], resourceImagePath: [{
                    type: i0.Input
                }], resourceStore: [{
                    type: i0.Input
                }], resourceTimeRangeStore: [{
                    type: i0.Input
                }], responsive: [{
                    type: i0.Input
                }], responsiveRoot: [{
                    type: i0.Input
                }], responsiveState: [{
                    type: i0.Input
                }], responsiveTarget: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showRecurringUI: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], sidebar: [{
                    type: i0.Input
                }], stateful: [{
                    type: i0.Input
                }], statefulEvents: [{
                    type: i0.Input
                }], stateId: [{
                    type: i0.Input
                }], stateProvider: [{
                    type: i0.Input
                }], strips: [{
                    type: i0.Input
                }], syncMask: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], tbar: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], timeRangeStore: [{
                    type: i0.Input
                }], timeZone: [{
                    type: i0.Input
                }], trapFocus: [{
                    type: i0.Input
                }], triggerSelectionChangeOnRemove: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weekStartDay: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], assignments: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], crudManager: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], date: [{
                    type: i0.Input
                }], defaultCalendar: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], events: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], features: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], hideNonWorkingDays: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], isEventSelectable: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxDate: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minDate: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], mode: [{
                    type: i0.Input
                }], modeDefaults: [{
                    type: i0.Input
                }], modes: [{
                    type: i0.Input
                }], project: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], resources: [{
                    type: i0.Input
                }], resourceTimeRanges: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], timeRanges: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], tools: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], activeSubView: [{
                    type: i0.Input
                }], activeView: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isEngineReady: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], selectedAssignments: [{
                    type: i0.Input
                }], selectedEvents: [{
                    type: i0.Input
                }], state: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], views: [{
                    type: i0.Input
                }], onActiveItemChange: [{
                    type: i0.Output
                }], onAfterEventEdit: [{
                    type: i0.Output
                }], onAfterEventSave: [{
                    type: i0.Output
                }], onAssignmentSelectionChange: [{
                    type: i0.Output
                }], onBeforeActiveItemChange: [{
                    type: i0.Output
                }], onBeforeAssignmentDelete: [{
                    type: i0.Output
                }], onBeforeAssignmentSelectionChange: [{
                    type: i0.Output
                }], onBeforeAutoCreate: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeDragCreateEnd: [{
                    type: i0.Output
                }], onBeforeDragMoveEnd: [{
                    type: i0.Output
                }], onBeforeDragResizeEnd: [{
                    type: i0.Output
                }], onBeforeEventDelete: [{
                    type: i0.Output
                }], onBeforeEventEdit: [{
                    type: i0.Output
                }], onBeforeEventEditShow: [{
                    type: i0.Output
                }], onBeforeEventSave: [{
                    type: i0.Output
                }], onBeforeEventSelectionChange: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforePrint: [{
                    type: i0.Output
                }], onBeforeResponsiveStateChange: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onCellOverflowClick: [{
                    type: i0.Output
                }], onContextMenuItem: [{
                    type: i0.Output
                }], onContextMenuToggleItem: [{
                    type: i0.Output
                }], onDataChange: [{
                    type: i0.Output
                }], onDateChange: [{
                    type: i0.Output
                }], onDateRangeChange: [{
                    type: i0.Output
                }], onDateRangeRequested: [{
                    type: i0.Output
                }], onDayNumberClick: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onDragCreateEnd: [{
                    type: i0.Output
                }], onDragMoveEnd: [{
                    type: i0.Output
                }], onDragResizeEnd: [{
                    type: i0.Output
                }], onEmptyCellClick: [{
                    type: i0.Output
                }], onEventAutoCreated: [{
                    type: i0.Output
                }], onEventClick: [{
                    type: i0.Output
                }], onEventContextMenu: [{
                    type: i0.Output
                }], onEventDblClick: [{
                    type: i0.Output
                }], onEventEditBeforeSetRecord: [{
                    type: i0.Output
                }], onEventMenuBeforeShow: [{
                    type: i0.Output
                }], onEventMenuItem: [{
                    type: i0.Output
                }], onEventMenuShow: [{
                    type: i0.Output
                }], onEventMouseDown: [{
                    type: i0.Output
                }], onEventMouseOut: [{
                    type: i0.Output
                }], onEventMouseOver: [{
                    type: i0.Output
                }], onEventMouseUp: [{
                    type: i0.Output
                }], onEventPropagate: [{
                    type: i0.Output
                }], onEventSelectionChange: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onLoadOnDemandFail: [{
                    type: i0.Output
                }], onMonthNameClick: [{
                    type: i0.Output
                }], onNavigate: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onRefresh: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onResponsiveHeightChange: [{
                    type: i0.Output
                }], onResponsiveStateChange: [{
                    type: i0.Output
                }], onResponsiveWidthChange: [{
                    type: i0.Output
                }], onScheduleClick: [{
                    type: i0.Output
                }], onScheduleContextMenu: [{
                    type: i0.Output
                }], onScheduleDblClick: [{
                    type: i0.Output
                }], onScheduleMenuBeforeShow: [{
                    type: i0.Output
                }], onScheduleMenuItem: [{
                    type: i0.Output
                }], onScheduleMenuShow: [{
                    type: i0.Output
                }], onScheduleMouseDown: [{
                    type: i0.Output
                }], onScheduleMouseOut: [{
                    type: i0.Output
                }], onScheduleMouseOver: [{
                    type: i0.Output
                }], onScheduleMouseUp: [{
                    type: i0.Output
                }], onSelectionChange: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTimeRangeHeaderClick: [{
                    type: i0.Output
                }], onTimeRangeHeaderContextMenu: [{
                    type: i0.Output
                }], onTimeRangeHeaderDblClick: [{
                    type: i0.Output
                }], onToolClick: [{
                    type: i0.Output
                }], onViewPaint: [{
                    type: i0.Output
                }], onWeekNumberClick: [{
                    type: i0.Output
                }], dragFeature: [{
                    type: i0.Input
                }], eventEditFeature: [{
                    type: i0.Input
                }], eventMenuFeature: [{
                    type: i0.Input
                }], eventTooltipFeature: [{
                    type: i0.Input
                }], externalEventSourceFeature: [{
                    type: i0.Input
                }], loadOnDemandFeature: [{
                    type: i0.Input
                }], printFeature: [{
                    type: i0.Input
                }], scheduleMenuFeature: [{
                    type: i0.Input
                }], timeRangesFeature: [{
                    type: i0.Input
                }], weekExpanderFeature: [{
                    type: i0.Input
                }] } });

    var BryntumCalendarDatePickerComponent = /** @class */ (function () {
        function BryntumCalendarDatePickerComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeRefresh = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDateChange = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onRefresh = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onSelectionChange = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onToolClick = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumCalendarDatePickerComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumCalendarDatePickerComponent.instanceClass, instanceName = BryntumCalendarDatePickerComponent.instanceName, bryntumConfigs = BryntumCalendarDatePickerComponent.bryntumConfigs, bryntumEvents = BryntumCalendarDatePickerComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumCalendarDatePickerComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumCalendarDatePickerComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumCalendarDatePickerComponent.bryntumConfigsOnly, bryntumProps = BryntumCalendarDatePickerComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumCalendarDatePickerComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumCalendarDatePickerComponent;
    }());
    BryntumCalendarDatePickerComponent.instanceClass = calendar.CalendarDatePicker;
    BryntumCalendarDatePickerComponent.instanceName = 'CalendarDatePicker';
    BryntumCalendarDatePickerComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeRefresh',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onDateChange',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onRefresh',
        'onResize',
        'onSelectionChange',
        'onShow',
        'onToolClick'
    ];
    BryntumCalendarDatePickerComponent.bryntumFeatureNames = [];
    BryntumCalendarDatePickerComponent.bryntumConfigs = BryntumCalendarDatePickerComponent.bryntumFeatureNames.concat([
        'activeDate',
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'animateTimeShift',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'cellRenderer',
        'centered',
        'cls',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'date',
        'dayNameFormat',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'disabledDates',
        'disableOtherMonthCells',
        'disableWeekends',
        'dock',
        'draggable',
        'editMonth',
        'eventCountTip',
        'eventFilter',
        'eventRenderer',
        'eventStore',
        'extraData',
        'flex',
        'floating',
        'focusDisabledDates',
        'footer',
        'header',
        'headerRenderer',
        'height',
        'hidden',
        'hideAnimation',
        'hideOtherMonthCells',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxDate',
        'maxDots',
        'maxHeight',
        'maxWidth',
        'minColumnWidth',
        'minDate',
        'minHeight',
        'minRowHeight',
        'minWidth',
        'monitorResize',
        'month',
        'multiSelect',
        'namedItems',
        'nonWorkingDays',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'selection',
        'showAnimation',
        'showEvents',
        'showTooltipWhenDisabled',
        'showWeekColumn',
        'showWeekNumber',
        'sixWeeks',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strictRecordMapping',
        'strips',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'tip',
        'title',
        'tools',
        'tooltip',
        'trapFocus',
        'ui',
        'weekRenderer',
        'weekStartDay',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumCalendarDatePickerComponent.bryntumConfigsOnly = [
        'activeDate',
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'cellRenderer',
        'centered',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'contentElementCls',
        'dayNameFormat',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabledDates',
        'disableOtherMonthCells',
        'disableWeekends',
        'dock',
        'draggable',
        'editMonth',
        'eventFilter',
        'eventRenderer',
        'eventStore',
        'floating',
        'focusDisabledDates',
        'footer',
        'header',
        'headerRenderer',
        'hideAnimation',
        'hideOtherMonthCells',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maxDate',
        'minColumnWidth',
        'minDate',
        'minRowHeight',
        'monitorResize',
        'month',
        'multiSelect',
        'namedItems',
        'nonWorkingDays',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'showWeekColumn',
        'showWeekNumber',
        'sixWeeks',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strips',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'tip',
        'trapFocus',
        'ui',
        'weekRenderer',
        'weekStartDay',
        'weight'
    ];
    BryntumCalendarDatePickerComponent.bryntumProps = BryntumCalendarDatePickerComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'animateTimeShift',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'date',
        'disabled',
        'eventCountTip',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxDots',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'selection',
        'showEvents',
        'state',
        'strictRecordMapping',
        'title',
        'tools',
        'tooltip',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumCalendarDatePickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumCalendarDatePickerComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumCalendarDatePickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumCalendarDatePickerComponent, selector: "bryntum-calendar-date-picker", inputs: { activeDate: "activeDate", adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bbar: "bbar", bodyCls: "bodyCls", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", cellRenderer: "cellRenderer", centered: "centered", collapsed: "collapsed", collapsible: "collapsible", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", dayNameFormat: "dayNameFormat", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", disabledDates: "disabledDates", disableOtherMonthCells: "disableOtherMonthCells", disableWeekends: "disableWeekends", dock: "dock", draggable: "draggable", editMonth: "editMonth", eventFilter: "eventFilter", eventRenderer: "eventRenderer", eventStore: "eventStore", floating: "floating", focusDisabledDates: "focusDisabledDates", footer: "footer", header: "header", headerRenderer: "headerRenderer", hideAnimation: "hideAnimation", hideOtherMonthCells: "hideOtherMonthCells", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxDate: "maxDate", minColumnWidth: "minColumnWidth", minDate: "minDate", minRowHeight: "minRowHeight", monitorResize: "monitorResize", month: "month", multiSelect: "multiSelect", namedItems: "namedItems", nonWorkingDays: "nonWorkingDays", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", showWeekColumn: "showWeekColumn", showWeekNumber: "showWeekNumber", sixWeeks: "sixWeeks", stateful: "stateful", statefulEvents: "statefulEvents", stateId: "stateId", stateProvider: "stateProvider", strips: "strips", tab: "tab", tag: "tag", tbar: "tbar", textAlign: "textAlign", textContent: "textContent", tip: "tip", trapFocus: "trapFocus", ui: "ui", weekRenderer: "weekRenderer", weekStartDay: "weekStartDay", weight: "weight", alignSelf: "alignSelf", animateTimeShift: "animateTimeShift", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", date: "date", disabled: "disabled", eventCountTip: "eventCountTip", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxDots: "maxDots", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", selection: "selection", showEvents: "showEvents", strictRecordMapping: "strictRecordMapping", title: "title", tools: "tools", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", state: "state", type: "type", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeRefresh: "onBeforeRefresh", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDateChange: "onDateChange", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onRefresh: "onRefresh", onResize: "onResize", onSelectionChange: "onSelectionChange", onShow: "onShow", onToolClick: "onToolClick" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumCalendarDatePickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-calendar-date-picker',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { activeDate: [{
                    type: i0.Input
                }], adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bbar: [{
                    type: i0.Input
                }], bodyCls: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], cellRenderer: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], collapsed: [{
                    type: i0.Input
                }], collapsible: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], dayNameFormat: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], disabledDates: [{
                    type: i0.Input
                }], disableOtherMonthCells: [{
                    type: i0.Input
                }], disableWeekends: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], editMonth: [{
                    type: i0.Input
                }], eventFilter: [{
                    type: i0.Input
                }], eventRenderer: [{
                    type: i0.Input
                }], eventStore: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], focusDisabledDates: [{
                    type: i0.Input
                }], footer: [{
                    type: i0.Input
                }], header: [{
                    type: i0.Input
                }], headerRenderer: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideOtherMonthCells: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maxDate: [{
                    type: i0.Input
                }], minColumnWidth: [{
                    type: i0.Input
                }], minDate: [{
                    type: i0.Input
                }], minRowHeight: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], month: [{
                    type: i0.Input
                }], multiSelect: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], nonWorkingDays: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], showWeekColumn: [{
                    type: i0.Input
                }], showWeekNumber: [{
                    type: i0.Input
                }], sixWeeks: [{
                    type: i0.Input
                }], stateful: [{
                    type: i0.Input
                }], statefulEvents: [{
                    type: i0.Input
                }], stateId: [{
                    type: i0.Input
                }], stateProvider: [{
                    type: i0.Input
                }], strips: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], tbar: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], tip: [{
                    type: i0.Input
                }], trapFocus: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weekRenderer: [{
                    type: i0.Input
                }], weekStartDay: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], animateTimeShift: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], date: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], eventCountTip: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxDots: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], selection: [{
                    type: i0.Input
                }], showEvents: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], tools: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], state: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeRefresh: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDateChange: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onRefresh: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onSelectionChange: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onToolClick: [{
                    type: i0.Output
                }] } });

    var BryntumCheckboxComponent = /** @class */ (function () {
        function BryntumCheckboxComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeChange = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onClick = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumCheckboxComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumCheckboxComponent.instanceClass, instanceName = BryntumCheckboxComponent.instanceName, bryntumConfigs = BryntumCheckboxComponent.bryntumConfigs, bryntumEvents = BryntumCheckboxComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumCheckboxComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumCheckboxComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumCheckboxComponent.bryntumConfigsOnly, bryntumProps = BryntumCheckboxComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumCheckboxComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumCheckboxComponent;
    }());
    BryntumCheckboxComponent.instanceClass = calendar.Checkbox;
    BryntumCheckboxComponent.instanceName = 'Checkbox';
    BryntumCheckboxComponent.bryntumEvents = [
        'onAction',
        'onBeforeChange',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onClick',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onTrigger'
    ];
    BryntumCheckboxComponent.bryntumFeatureNames = [];
    BryntumCheckboxComponent.bryntumConfigs = BryntumCheckboxComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoCollapse',
        'autoComplete',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'checked',
        'checkedValue',
        'clearable',
        'cls',
        'color',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'editable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'keyStrokeChangeDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'text',
        'textAlign',
        'title',
        'tooltip',
        'triggers',
        'ui',
        'uncheckedValue',
        'validateOnInput',
        'value',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumCheckboxComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoCollapse',
        'autoComplete',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'checkedValue',
        'clearable',
        'color',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'keyStrokeChangeDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'text',
        'textAlign',
        'title',
        'ui',
        'uncheckedValue',
        'validateOnInput',
        'weight'
    ];
    BryntumCheckboxComponent.bryntumProps = BryntumCheckboxComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'checked',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'name',
        'readOnly',
        'scrollable',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumCheckboxComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumCheckboxComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumCheckboxComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumCheckboxComponent, selector: "bryntum-checkbox", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoCollapse: "autoCollapse", autoComplete: "autoComplete", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", checkedValue: "checkedValue", clearable: "clearable", color: "color", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", keyStrokeChangeDelay: "keyStrokeChangeDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", owner: "owner", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tag: "tag", text: "text", textAlign: "textAlign", title: "title", ui: "ui", uncheckedValue: "uncheckedValue", validateOnInput: "validateOnInput", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", checked: "checked", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", name: "name", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeChange: "onBeforeChange", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onClick: "onClick", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumCheckboxComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-checkbox',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoCollapse: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], checkedValue: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], text: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], uncheckedValue: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], checked: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeChange: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onClick: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumChipViewComponent = /** @class */ (function () {
        function BryntumChipViewComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeItem = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onItem = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumChipViewComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumChipViewComponent.instanceClass, instanceName = BryntumChipViewComponent.instanceName, bryntumConfigs = BryntumChipViewComponent.bryntumConfigs, bryntumEvents = BryntumChipViewComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumChipViewComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumChipViewComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumChipViewComponent.bryntumConfigsOnly, bryntumProps = BryntumChipViewComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumChipViewComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumChipViewComponent;
    }());
    BryntumChipViewComponent.instanceClass = calendar.ChipView;
    BryntumChipViewComponent.instanceName = 'ChipView';
    BryntumChipViewComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeItem',
        'onBeforeShow',
        'onCatchAll',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onItem',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow'
    ];
    BryntumChipViewComponent.bryntumFeatureNames = [];
    BryntumChipViewComponent.bryntumConfigs = BryntumChipViewComponent.bryntumFeatureNames.concat([
        'activateOnMouseover',
        'adopt',
        'align',
        'alignSelf',
        'allowGroupSelect',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'closable',
        'closeHandler',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'displayField',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'getItemCls',
        'getItemStyle',
        'groupHeaderTpl',
        'height',
        'hidden',
        'hideAnimation',
        'html',
        'htmlCls',
        'iconTpl',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'items',
        'itemTpl',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'multiSelect',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'selectAllItem',
        'selected',
        'showAnimation',
        'showTooltipWhenDisabled',
        'store',
        'tab',
        'tag',
        'textAlign',
        'title',
        'toggleAllIfCtrlPressed',
        'tooltip',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumChipViewComponent.bryntumConfigsOnly = [
        'activateOnMouseover',
        'adopt',
        'align',
        'allowGroupSelect',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'closable',
        'closeHandler',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'displayField',
        'dock',
        'draggable',
        'floating',
        'getItemCls',
        'getItemStyle',
        'groupHeaderTpl',
        'hideAnimation',
        'htmlCls',
        'iconTpl',
        'ignoreParentReadOnly',
        'itemTpl',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'multiSelect',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'selectAllItem',
        'selected',
        'showAnimation',
        'showTooltipWhenDisabled',
        'store',
        'tab',
        'tag',
        'textAlign',
        'title',
        'toggleAllIfCtrlPressed',
        'ui',
        'weight'
    ];
    BryntumChipViewComponent.bryntumProps = BryntumChipViewComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'items',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'tooltip',
        'type',
        'width',
        'x',
        'y'
    ]);
    BryntumChipViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumChipViewComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumChipViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumChipViewComponent, selector: "bryntum-chip-view", inputs: { activateOnMouseover: "activateOnMouseover", adopt: "adopt", align: "align", allowGroupSelect: "allowGroupSelect", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", closable: "closable", closeHandler: "closeHandler", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", displayField: "displayField", dock: "dock", draggable: "draggable", floating: "floating", getItemCls: "getItemCls", getItemStyle: "getItemStyle", groupHeaderTpl: "groupHeaderTpl", hideAnimation: "hideAnimation", htmlCls: "htmlCls", iconTpl: "iconTpl", ignoreParentReadOnly: "ignoreParentReadOnly", itemTpl: "itemTpl", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", multiSelect: "multiSelect", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", selectAllItem: "selectAllItem", selected: "selected", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", store: "store", tab: "tab", tag: "tag", textAlign: "textAlign", title: "title", toggleAllIfCtrlPressed: "toggleAllIfCtrlPressed", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", type: "type" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeItem: "onBeforeItem", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onItem: "onItem", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumChipViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-chip-view',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { activateOnMouseover: [{
                    type: i0.Input
                }], adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], allowGroupSelect: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], closable: [{
                    type: i0.Input
                }], closeHandler: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], displayField: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], getItemCls: [{
                    type: i0.Input
                }], getItemStyle: [{
                    type: i0.Input
                }], groupHeaderTpl: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], iconTpl: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemTpl: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], multiSelect: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], selectAllItem: [{
                    type: i0.Input
                }], selected: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], toggleAllIfCtrlPressed: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeItem: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onItem: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }] } });

    var BryntumComboComponent = /** @class */ (function () {
        function BryntumComboComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onSelect = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumComboComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumComboComponent.instanceClass, instanceName = BryntumComboComponent.instanceName, bryntumConfigs = BryntumComboComponent.bryntumConfigs, bryntumEvents = BryntumComboComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumComboComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumComboComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumComboComponent.bryntumConfigsOnly, bryntumProps = BryntumComboComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumComboComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumComboComponent;
    }());
    BryntumComboComponent.instanceClass = calendar.Combo;
    BryntumComboComponent.instanceName = 'Combo';
    BryntumComboComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onSelect',
        'onShow',
        'onTrigger'
    ];
    BryntumComboComponent.bryntumFeatureNames = [];
    BryntumComboComponent.bryntumConfigs = BryntumComboComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoComplete',
        'autoExpand',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'caseSensitive',
        'centered',
        'chipView',
        'clearable',
        'clearTextOnPickerHide',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'createOnUnmatched',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'displayField',
        'displayValueRenderer',
        'dock',
        'draggable',
        'editable',
        'emptyText',
        'encodeFilterParams',
        'extraData',
        'filterOnEnter',
        'filterOperator',
        'filterParamName',
        'filterSelected',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'hidePickerOnSelect',
        'hideTrigger',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inlinePicker',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'items',
        'keyStrokeChangeDelay',
        'keyStrokeFilterDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listCls',
        'listeners',
        'listItemTpl',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxLength',
        'maxWidth',
        'minChars',
        'minHeight',
        'minLength',
        'minWidth',
        'monitorResize',
        'multiSelect',
        'multiValueSeparator',
        'name',
        'overlayAnchor',
        'owner',
        'picker',
        'pickerAlignElement',
        'pickerWidth',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'primaryFilter',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'store',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'triggerAction',
        'triggers',
        'ui',
        'validateFilter',
        'validateOnInput',
        'value',
        'valueField',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumComboComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoComplete',
        'autoExpand',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'caseSensitive',
        'centered',
        'chipView',
        'clearable',
        'clearTextOnPickerHide',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'createOnUnmatched',
        'defaultBindProperty',
        'displayField',
        'displayValueRenderer',
        'dock',
        'draggable',
        'emptyText',
        'encodeFilterParams',
        'filterOnEnter',
        'filterParamName',
        'filterSelected',
        'floating',
        'hideAnimation',
        'hidePickerOnSelect',
        'hideTrigger',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inlinePicker',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'items',
        'keyStrokeChangeDelay',
        'keyStrokeFilterDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listCls',
        'listeners',
        'listItemTpl',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maxLength',
        'minChars',
        'minLength',
        'monitorResize',
        'multiSelect',
        'multiValueSeparator',
        'name',
        'overlayAnchor',
        'owner',
        'picker',
        'pickerAlignElement',
        'pickerWidth',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'primaryFilter',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'triggerAction',
        'ui',
        'validateFilter',
        'validateOnInput',
        'valueField',
        'weight'
    ];
    BryntumComboComponent.bryntumProps = BryntumComboComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'filterOperator',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'store',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumComboComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumComboComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumComboComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumComboComponent, selector: "bryntum-combo", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoClose: "autoClose", autoComplete: "autoComplete", autoExpand: "autoExpand", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", caseSensitive: "caseSensitive", centered: "centered", chipView: "chipView", clearable: "clearable", clearTextOnPickerHide: "clearTextOnPickerHide", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", createOnUnmatched: "createOnUnmatched", defaultBindProperty: "defaultBindProperty", displayField: "displayField", displayValueRenderer: "displayValueRenderer", dock: "dock", draggable: "draggable", emptyText: "emptyText", encodeFilterParams: "encodeFilterParams", filterOnEnter: "filterOnEnter", filterParamName: "filterParamName", filterSelected: "filterSelected", floating: "floating", hideAnimation: "hideAnimation", hidePickerOnSelect: "hidePickerOnSelect", hideTrigger: "hideTrigger", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inlinePicker: "inlinePicker", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", items: "items", keyStrokeChangeDelay: "keyStrokeChangeDelay", keyStrokeFilterDelay: "keyStrokeFilterDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listCls: "listCls", listeners: "listeners", listItemTpl: "listItemTpl", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxLength: "maxLength", minChars: "minChars", minLength: "minLength", monitorResize: "monitorResize", multiSelect: "multiSelect", multiValueSeparator: "multiValueSeparator", name: "name", overlayAnchor: "overlayAnchor", owner: "owner", picker: "picker", pickerAlignElement: "pickerAlignElement", pickerWidth: "pickerWidth", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", primaryFilter: "primaryFilter", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tabIndex: "tabIndex", tag: "tag", textAlign: "textAlign", title: "title", triggerAction: "triggerAction", ui: "ui", validateFilter: "validateFilter", validateOnInput: "validateOnInput", valueField: "valueField", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", filterOperator: "filterOperator", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", store: "store", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onSelect: "onSelect", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumComboComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-combo',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoClose: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoExpand: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], caseSensitive: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], chipView: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], clearTextOnPickerHide: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], createOnUnmatched: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], displayField: [{
                    type: i0.Input
                }], displayValueRenderer: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], emptyText: [{
                    type: i0.Input
                }], encodeFilterParams: [{
                    type: i0.Input
                }], filterOnEnter: [{
                    type: i0.Input
                }], filterParamName: [{
                    type: i0.Input
                }], filterSelected: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hidePickerOnSelect: [{
                    type: i0.Input
                }], hideTrigger: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inlinePicker: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], keyStrokeFilterDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listCls: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], listItemTpl: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maxLength: [{
                    type: i0.Input
                }], minChars: [{
                    type: i0.Input
                }], minLength: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], multiSelect: [{
                    type: i0.Input
                }], multiValueSeparator: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], overlayAnchor: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], picker: [{
                    type: i0.Input
                }], pickerAlignElement: [{
                    type: i0.Input
                }], pickerWidth: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], primaryFilter: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], triggerAction: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], validateFilter: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], valueField: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], filterOperator: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onSelect: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumContainerComponent = /** @class */ (function () {
        function BryntumContainerComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumContainerComponent.instanceClass, instanceName = BryntumContainerComponent.instanceName, bryntumConfigs = BryntumContainerComponent.bryntumConfigs, bryntumEvents = BryntumContainerComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumContainerComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumContainerComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumContainerComponent.bryntumConfigsOnly, bryntumProps = BryntumContainerComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumContainerComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumContainerComponent;
    }());
    BryntumContainerComponent.instanceClass = calendar.Container;
    BryntumContainerComponent.instanceName = 'Container';
    BryntumContainerComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow'
    ];
    BryntumContainerComponent.bryntumFeatureNames = [];
    BryntumContainerComponent.bryntumConfigs = BryntumContainerComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'strictRecordMapping',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'tooltip',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumContainerComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'ui',
        'weight'
    ];
    BryntumContainerComponent.bryntumProps = BryntumContainerComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'strictRecordMapping',
        'tooltip',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumContainerComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumContainerComponent, selector: "bryntum-container", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", namedItems: "namedItems", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", tab: "tab", tag: "tag", textAlign: "textAlign", textContent: "textContent", title: "title", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", type: "type", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-container',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }] } });

    var BryntumDateFieldComponent = /** @class */ (function () {
        function BryntumDateFieldComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumDateFieldComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumDateFieldComponent.instanceClass, instanceName = BryntumDateFieldComponent.instanceName, bryntumConfigs = BryntumDateFieldComponent.bryntumConfigs, bryntumEvents = BryntumDateFieldComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumDateFieldComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumDateFieldComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumDateFieldComponent.bryntumConfigsOnly, bryntumProps = BryntumDateFieldComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumDateFieldComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumDateFieldComponent;
    }());
    BryntumDateFieldComponent.instanceClass = calendar.DateField;
    BryntumDateFieldComponent.instanceName = 'DateField';
    BryntumDateFieldComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onTrigger'
    ];
    BryntumDateFieldComponent.bryntumFeatureNames = [];
    BryntumDateFieldComponent.bryntumConfigs = BryntumDateFieldComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoComplete',
        'autoExpand',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'editable',
        'extraData',
        'flex',
        'floating',
        'format',
        'height',
        'hidden',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'keepTime',
        'keyStrokeChangeDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'max',
        'maxHeight',
        'maxLength',
        'maxWidth',
        'min',
        'minHeight',
        'minLength',
        'minWidth',
        'monitorResize',
        'name',
        'owner',
        'picker',
        'pickerAlignElement',
        'pickerFormat',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'step',
        'strictParsing',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'triggers',
        'ui',
        'validateOnInput',
        'value',
        'weekStartDay',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumDateFieldComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoComplete',
        'autoExpand',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'keepTime',
        'keyStrokeChangeDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maxLength',
        'minLength',
        'monitorResize',
        'name',
        'owner',
        'picker',
        'pickerAlignElement',
        'pickerFormat',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'strictParsing',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'ui',
        'validateOnInput',
        'weekStartDay',
        'weight'
    ];
    BryntumDateFieldComponent.bryntumProps = BryntumDateFieldComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'flex',
        'format',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'max',
        'maxHeight',
        'maxWidth',
        'min',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'step',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumDateFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumDateFieldComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumDateFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumDateFieldComponent, selector: "bryntum-date-field", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoClose: "autoClose", autoComplete: "autoComplete", autoExpand: "autoExpand", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", clearable: "clearable", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", keepTime: "keepTime", keyStrokeChangeDelay: "keyStrokeChangeDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxLength: "maxLength", minLength: "minLength", monitorResize: "monitorResize", name: "name", owner: "owner", picker: "picker", pickerAlignElement: "pickerAlignElement", pickerFormat: "pickerFormat", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", strictParsing: "strictParsing", tab: "tab", tabIndex: "tabIndex", tag: "tag", textAlign: "textAlign", title: "title", ui: "ui", validateOnInput: "validateOnInput", weekStartDay: "weekStartDay", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", flex: "flex", format: "format", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", max: "max", maxHeight: "maxHeight", maxWidth: "maxWidth", min: "min", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", step: "step", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumDateFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-date-field',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoClose: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoExpand: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], keepTime: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maxLength: [{
                    type: i0.Input
                }], minLength: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], picker: [{
                    type: i0.Input
                }], pickerAlignElement: [{
                    type: i0.Input
                }], pickerFormat: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], strictParsing: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], weekStartDay: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], format: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], max: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], min: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], step: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumDatePickerComponent = /** @class */ (function () {
        function BryntumDatePickerComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeRefresh = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDateChange = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onRefresh = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onSelectionChange = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onToolClick = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumDatePickerComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumDatePickerComponent.instanceClass, instanceName = BryntumDatePickerComponent.instanceName, bryntumConfigs = BryntumDatePickerComponent.bryntumConfigs, bryntumEvents = BryntumDatePickerComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumDatePickerComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumDatePickerComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumDatePickerComponent.bryntumConfigsOnly, bryntumProps = BryntumDatePickerComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumDatePickerComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumDatePickerComponent;
    }());
    BryntumDatePickerComponent.instanceClass = calendar.DatePicker;
    BryntumDatePickerComponent.instanceName = 'DatePicker';
    BryntumDatePickerComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeRefresh',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onDateChange',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onRefresh',
        'onResize',
        'onSelectionChange',
        'onShow',
        'onToolClick'
    ];
    BryntumDatePickerComponent.bryntumFeatureNames = [];
    BryntumDatePickerComponent.bryntumConfigs = BryntumDatePickerComponent.bryntumFeatureNames.concat([
        'activeDate',
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'animateTimeShift',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'cellRenderer',
        'centered',
        'cls',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'date',
        'dayNameFormat',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'disabledDates',
        'disableOtherMonthCells',
        'disableWeekends',
        'dock',
        'draggable',
        'editMonth',
        'extraData',
        'flex',
        'floating',
        'focusDisabledDates',
        'footer',
        'header',
        'headerRenderer',
        'height',
        'hidden',
        'hideAnimation',
        'hideOtherMonthCells',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxDate',
        'maxHeight',
        'maxWidth',
        'minColumnWidth',
        'minDate',
        'minHeight',
        'minRowHeight',
        'minWidth',
        'monitorResize',
        'month',
        'multiSelect',
        'namedItems',
        'nonWorkingDays',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'selection',
        'showAnimation',
        'showTooltipWhenDisabled',
        'showWeekColumn',
        'showWeekNumber',
        'sixWeeks',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strictRecordMapping',
        'strips',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'tip',
        'title',
        'tools',
        'tooltip',
        'trapFocus',
        'ui',
        'weekRenderer',
        'weekStartDay',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumDatePickerComponent.bryntumConfigsOnly = [
        'activeDate',
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'cellRenderer',
        'centered',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'contentElementCls',
        'dayNameFormat',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabledDates',
        'disableOtherMonthCells',
        'disableWeekends',
        'dock',
        'draggable',
        'editMonth',
        'floating',
        'focusDisabledDates',
        'footer',
        'header',
        'headerRenderer',
        'hideAnimation',
        'hideOtherMonthCells',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maxDate',
        'minColumnWidth',
        'minDate',
        'minRowHeight',
        'monitorResize',
        'month',
        'multiSelect',
        'namedItems',
        'nonWorkingDays',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'showWeekColumn',
        'showWeekNumber',
        'sixWeeks',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strips',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'tip',
        'trapFocus',
        'ui',
        'weekRenderer',
        'weekStartDay',
        'weight'
    ];
    BryntumDatePickerComponent.bryntumProps = BryntumDatePickerComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'animateTimeShift',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'date',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'selection',
        'state',
        'strictRecordMapping',
        'title',
        'tools',
        'tooltip',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumDatePickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumDatePickerComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumDatePickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumDatePickerComponent, selector: "bryntum-date-picker", inputs: { activeDate: "activeDate", adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bbar: "bbar", bodyCls: "bodyCls", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", cellRenderer: "cellRenderer", centered: "centered", collapsed: "collapsed", collapsible: "collapsible", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", dayNameFormat: "dayNameFormat", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", disabledDates: "disabledDates", disableOtherMonthCells: "disableOtherMonthCells", disableWeekends: "disableWeekends", dock: "dock", draggable: "draggable", editMonth: "editMonth", floating: "floating", focusDisabledDates: "focusDisabledDates", footer: "footer", header: "header", headerRenderer: "headerRenderer", hideAnimation: "hideAnimation", hideOtherMonthCells: "hideOtherMonthCells", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxDate: "maxDate", minColumnWidth: "minColumnWidth", minDate: "minDate", minRowHeight: "minRowHeight", monitorResize: "monitorResize", month: "month", multiSelect: "multiSelect", namedItems: "namedItems", nonWorkingDays: "nonWorkingDays", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", showWeekColumn: "showWeekColumn", showWeekNumber: "showWeekNumber", sixWeeks: "sixWeeks", stateful: "stateful", statefulEvents: "statefulEvents", stateId: "stateId", stateProvider: "stateProvider", strips: "strips", tab: "tab", tag: "tag", tbar: "tbar", textAlign: "textAlign", textContent: "textContent", tip: "tip", trapFocus: "trapFocus", ui: "ui", weekRenderer: "weekRenderer", weekStartDay: "weekStartDay", weight: "weight", alignSelf: "alignSelf", animateTimeShift: "animateTimeShift", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", date: "date", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", selection: "selection", strictRecordMapping: "strictRecordMapping", title: "title", tools: "tools", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", state: "state", type: "type", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeRefresh: "onBeforeRefresh", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDateChange: "onDateChange", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onRefresh: "onRefresh", onResize: "onResize", onSelectionChange: "onSelectionChange", onShow: "onShow", onToolClick: "onToolClick" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumDatePickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-date-picker',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { activeDate: [{
                    type: i0.Input
                }], adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bbar: [{
                    type: i0.Input
                }], bodyCls: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], cellRenderer: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], collapsed: [{
                    type: i0.Input
                }], collapsible: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], dayNameFormat: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], disabledDates: [{
                    type: i0.Input
                }], disableOtherMonthCells: [{
                    type: i0.Input
                }], disableWeekends: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], editMonth: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], focusDisabledDates: [{
                    type: i0.Input
                }], footer: [{
                    type: i0.Input
                }], header: [{
                    type: i0.Input
                }], headerRenderer: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideOtherMonthCells: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maxDate: [{
                    type: i0.Input
                }], minColumnWidth: [{
                    type: i0.Input
                }], minDate: [{
                    type: i0.Input
                }], minRowHeight: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], month: [{
                    type: i0.Input
                }], multiSelect: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], nonWorkingDays: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], showWeekColumn: [{
                    type: i0.Input
                }], showWeekNumber: [{
                    type: i0.Input
                }], sixWeeks: [{
                    type: i0.Input
                }], stateful: [{
                    type: i0.Input
                }], statefulEvents: [{
                    type: i0.Input
                }], stateId: [{
                    type: i0.Input
                }], stateProvider: [{
                    type: i0.Input
                }], strips: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], tbar: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], tip: [{
                    type: i0.Input
                }], trapFocus: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weekRenderer: [{
                    type: i0.Input
                }], weekStartDay: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], animateTimeShift: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], date: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], selection: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], tools: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], state: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeRefresh: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDateChange: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onRefresh: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onSelectionChange: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onToolClick: [{
                    type: i0.Output
                }] } });

    var BryntumDateTimeFieldComponent = /** @class */ (function () {
        function BryntumDateTimeFieldComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumDateTimeFieldComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumDateTimeFieldComponent.instanceClass, instanceName = BryntumDateTimeFieldComponent.instanceName, bryntumConfigs = BryntumDateTimeFieldComponent.bryntumConfigs, bryntumEvents = BryntumDateTimeFieldComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumDateTimeFieldComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumDateTimeFieldComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumDateTimeFieldComponent.bryntumConfigsOnly, bryntumProps = BryntumDateTimeFieldComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumDateTimeFieldComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumDateTimeFieldComponent;
    }());
    BryntumDateTimeFieldComponent.instanceClass = calendar.DateTimeField;
    BryntumDateTimeFieldComponent.instanceName = 'DateTimeField';
    BryntumDateTimeFieldComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onTrigger'
    ];
    BryntumDateTimeFieldComponent.bryntumFeatureNames = [];
    BryntumDateTimeFieldComponent.bryntumConfigs = BryntumDateTimeFieldComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'dataset',
        'dateField',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'editable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'keyStrokeChangeDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'textAlign',
        'timeField',
        'title',
        'tooltip',
        'triggers',
        'ui',
        'validateOnInput',
        'value',
        'weekStartDay',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumDateTimeFieldComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'dateField',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'keyStrokeChangeDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'textAlign',
        'timeField',
        'title',
        'ui',
        'validateOnInput',
        'weekStartDay',
        'weight'
    ];
    BryntumDateTimeFieldComponent.bryntumProps = BryntumDateTimeFieldComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumDateTimeFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumDateTimeFieldComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumDateTimeFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumDateTimeFieldComponent, selector: "bryntum-date-time-field", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoComplete: "autoComplete", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", clearable: "clearable", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", dateField: "dateField", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", keyStrokeChangeDelay: "keyStrokeChangeDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", name: "name", owner: "owner", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tag: "tag", textAlign: "textAlign", timeField: "timeField", title: "title", ui: "ui", validateOnInput: "validateOnInput", weekStartDay: "weekStartDay", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumDateTimeFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-date-time-field',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], dateField: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], timeField: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], weekStartDay: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumDisplayFieldComponent = /** @class */ (function () {
        function BryntumDisplayFieldComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumDisplayFieldComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumDisplayFieldComponent.instanceClass, instanceName = BryntumDisplayFieldComponent.instanceName, bryntumConfigs = BryntumDisplayFieldComponent.bryntumConfigs, bryntumEvents = BryntumDisplayFieldComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumDisplayFieldComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumDisplayFieldComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumDisplayFieldComponent.bryntumConfigsOnly, bryntumProps = BryntumDisplayFieldComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumDisplayFieldComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumDisplayFieldComponent;
    }());
    BryntumDisplayFieldComponent.instanceClass = calendar.DisplayField;
    BryntumDisplayFieldComponent.instanceName = 'DisplayField';
    BryntumDisplayFieldComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onTrigger'
    ];
    BryntumDisplayFieldComponent.bryntumFeatureNames = [];
    BryntumDisplayFieldComponent.bryntumConfigs = BryntumDisplayFieldComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'editable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'keyStrokeChangeDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'template',
        'textAlign',
        'title',
        'tooltip',
        'triggers',
        'ui',
        'validateOnInput',
        'value',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumDisplayFieldComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'keyStrokeChangeDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'template',
        'textAlign',
        'title',
        'ui',
        'validateOnInput',
        'weight'
    ];
    BryntumDisplayFieldComponent.bryntumProps = BryntumDisplayFieldComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumDisplayFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumDisplayFieldComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumDisplayFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumDisplayFieldComponent, selector: "bryntum-display-field", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoComplete: "autoComplete", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", clearable: "clearable", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", keyStrokeChangeDelay: "keyStrokeChangeDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", name: "name", owner: "owner", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tag: "tag", template: "template", textAlign: "textAlign", title: "title", ui: "ui", validateOnInput: "validateOnInput", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumDisplayFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-display-field',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], template: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumDurationFieldComponent = /** @class */ (function () {
        function BryntumDurationFieldComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumDurationFieldComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumDurationFieldComponent.instanceClass, instanceName = BryntumDurationFieldComponent.instanceName, bryntumConfigs = BryntumDurationFieldComponent.bryntumConfigs, bryntumEvents = BryntumDurationFieldComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumDurationFieldComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumDurationFieldComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumDurationFieldComponent.bryntumConfigsOnly, bryntumProps = BryntumDurationFieldComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumDurationFieldComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumDurationFieldComponent;
    }());
    BryntumDurationFieldComponent.instanceClass = calendar.DurationField;
    BryntumDurationFieldComponent.instanceName = 'DurationField';
    BryntumDurationFieldComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onTrigger'
    ];
    BryntumDurationFieldComponent.bryntumFeatureNames = [];
    BryntumDurationFieldComponent.bryntumConfigs = BryntumDurationFieldComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'allowedUnits',
        'allowNegative',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'dataset',
        'decimalPrecision',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'editable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'keyStrokeChangeDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'magnitude',
        'margin',
        'maskDefaults',
        'masked',
        'max',
        'maxHeight',
        'maxLength',
        'maxWidth',
        'min',
        'minHeight',
        'minLength',
        'minWidth',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'step',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'triggers',
        'ui',
        'unit',
        'useAbbreviation',
        'validateOnInput',
        'value',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumDurationFieldComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'allowNegative',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'decimalPrecision',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'keyStrokeChangeDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maxLength',
        'minLength',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'step',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'ui',
        'useAbbreviation',
        'validateOnInput',
        'weight'
    ];
    BryntumDurationFieldComponent.bryntumProps = BryntumDurationFieldComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'allowedUnits',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'magnitude',
        'margin',
        'max',
        'maxHeight',
        'maxWidth',
        'min',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'tooltip',
        'triggers',
        'type',
        'unit',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumDurationFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumDurationFieldComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumDurationFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumDurationFieldComponent, selector: "bryntum-duration-field", inputs: { adopt: "adopt", align: "align", allowNegative: "allowNegative", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoComplete: "autoComplete", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", clearable: "clearable", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", decimalPrecision: "decimalPrecision", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", keyStrokeChangeDelay: "keyStrokeChangeDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxLength: "maxLength", minLength: "minLength", monitorResize: "monitorResize", name: "name", owner: "owner", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", step: "step", tab: "tab", tabIndex: "tabIndex", tag: "tag", textAlign: "textAlign", title: "title", ui: "ui", useAbbreviation: "useAbbreviation", validateOnInput: "validateOnInput", weight: "weight", alignSelf: "alignSelf", allowedUnits: "allowedUnits", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", magnitude: "magnitude", margin: "margin", max: "max", maxHeight: "maxHeight", maxWidth: "maxWidth", min: "min", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", triggers: "triggers", unit: "unit", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumDurationFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-duration-field',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], allowNegative: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], decimalPrecision: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maxLength: [{
                    type: i0.Input
                }], minLength: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], step: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], useAbbreviation: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], allowedUnits: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], magnitude: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], max: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], min: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], unit: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumFieldFilterPickerComponent = /** @class */ (function () {
        function BryntumFieldFilterPickerComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumFieldFilterPickerComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumFieldFilterPickerComponent.instanceClass, instanceName = BryntumFieldFilterPickerComponent.instanceName, bryntumConfigs = BryntumFieldFilterPickerComponent.bryntumConfigs, bryntumEvents = BryntumFieldFilterPickerComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumFieldFilterPickerComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumFieldFilterPickerComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumFieldFilterPickerComponent.bryntumConfigsOnly, bryntumProps = BryntumFieldFilterPickerComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumFieldFilterPickerComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumFieldFilterPickerComponent;
    }());
    BryntumFieldFilterPickerComponent.instanceClass = calendar.FieldFilterPicker;
    BryntumFieldFilterPickerComponent.instanceName = 'FieldFilterPicker';
    BryntumFieldFilterPickerComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow'
    ];
    BryntumFieldFilterPickerComponent.bryntumFeatureNames = [];
    BryntumFieldFilterPickerComponent.bryntumConfigs = BryntumFieldFilterPickerComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'dateFormat',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'fields',
        'filter',
        'flex',
        'floating',
        'getValueFieldConfig',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'namedItems',
        'operators',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'propertyFieldConfig',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'store',
        'strictRecordMapping',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'tooltip',
        'ui',
        'valueFieldPlaceholders',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumFieldFilterPickerComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'dateFormat',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'fields',
        'filter',
        'floating',
        'getValueFieldConfig',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'namedItems',
        'operators',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'propertyFieldConfig',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'store',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'ui',
        'valueFieldPlaceholders',
        'weight'
    ];
    BryntumFieldFilterPickerComponent.bryntumProps = BryntumFieldFilterPickerComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'strictRecordMapping',
        'tooltip',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumFieldFilterPickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumFieldFilterPickerComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumFieldFilterPickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumFieldFilterPickerComponent, selector: "bryntum-field-filter-picker", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", dateFormat: "dateFormat", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", fields: "fields", filter: "filter", floating: "floating", getValueFieldConfig: "getValueFieldConfig", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", namedItems: "namedItems", operators: "operators", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", propertyFieldConfig: "propertyFieldConfig", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", store: "store", tab: "tab", tag: "tag", textAlign: "textAlign", textContent: "textContent", title: "title", ui: "ui", valueFieldPlaceholders: "valueFieldPlaceholders", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", type: "type", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumFieldFilterPickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-field-filter-picker',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], dateFormat: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], fields: [{
                    type: i0.Input
                }], filter: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], getValueFieldConfig: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], operators: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], propertyFieldConfig: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], valueFieldPlaceholders: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }] } });

    var BryntumFieldFilterPickerGroupComponent = /** @class */ (function () {
        function BryntumFieldFilterPickerGroupComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumFieldFilterPickerGroupComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumFieldFilterPickerGroupComponent.instanceClass, instanceName = BryntumFieldFilterPickerGroupComponent.instanceName, bryntumConfigs = BryntumFieldFilterPickerGroupComponent.bryntumConfigs, bryntumEvents = BryntumFieldFilterPickerGroupComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumFieldFilterPickerGroupComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumFieldFilterPickerGroupComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumFieldFilterPickerGroupComponent.bryntumConfigsOnly, bryntumProps = BryntumFieldFilterPickerGroupComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumFieldFilterPickerGroupComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumFieldFilterPickerGroupComponent;
    }());
    BryntumFieldFilterPickerGroupComponent.instanceClass = calendar.FieldFilterPickerGroup;
    BryntumFieldFilterPickerGroupComponent.instanceName = 'FieldFilterPickerGroup';
    BryntumFieldFilterPickerGroupComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow'
    ];
    BryntumFieldFilterPickerGroupComponent.bryntumFeatureNames = [];
    BryntumFieldFilterPickerGroupComponent.bryntumConfigs = BryntumFieldFilterPickerGroupComponent.bryntumFeatureNames.concat([
        'addFilterButtonText',
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'canDeleteFilter',
        'canManageFilter',
        'centered',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'dateFormat',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'fields',
        'filters',
        'flex',
        'floating',
        'getFieldFilterPickerConfig',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'limitToProperty',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'namedItems',
        'operators',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAddFilterButton',
        'showAnimation',
        'showTooltipWhenDisabled',
        'store',
        'strictRecordMapping',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'tooltip',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumFieldFilterPickerGroupComponent.bryntumConfigsOnly = [
        'addFilterButtonText',
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'canDeleteFilter',
        'canManageFilter',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'dateFormat',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'fields',
        'filters',
        'floating',
        'getFieldFilterPickerConfig',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'limitToProperty',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'namedItems',
        'operators',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAddFilterButton',
        'showAnimation',
        'showTooltipWhenDisabled',
        'store',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'ui',
        'weight'
    ];
    BryntumFieldFilterPickerGroupComponent.bryntumProps = BryntumFieldFilterPickerGroupComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'strictRecordMapping',
        'tooltip',
        'type',
        'value',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumFieldFilterPickerGroupComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumFieldFilterPickerGroupComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumFieldFilterPickerGroupComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumFieldFilterPickerGroupComponent, selector: "bryntum-field-filter-picker-group", inputs: { addFilterButtonText: "addFilterButtonText", adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", canDeleteFilter: "canDeleteFilter", canManageFilter: "canManageFilter", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", dateFormat: "dateFormat", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", fields: "fields", filters: "filters", floating: "floating", getFieldFilterPickerConfig: "getFieldFilterPickerConfig", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", limitToProperty: "limitToProperty", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", namedItems: "namedItems", operators: "operators", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAddFilterButton: "showAddFilterButton", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", store: "store", tab: "tab", tag: "tag", textAlign: "textAlign", textContent: "textContent", title: "title", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", type: "type", value: "value", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumFieldFilterPickerGroupComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-field-filter-picker-group',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { addFilterButtonText: [{
                    type: i0.Input
                }], adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], canDeleteFilter: [{
                    type: i0.Input
                }], canManageFilter: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], dateFormat: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], fields: [{
                    type: i0.Input
                }], filters: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], getFieldFilterPickerConfig: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], limitToProperty: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], operators: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAddFilterButton: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }] } });

    var BryntumFileFieldComponent = /** @class */ (function () {
        function BryntumFileFieldComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumFileFieldComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumFileFieldComponent.instanceClass, instanceName = BryntumFileFieldComponent.instanceName, bryntumConfigs = BryntumFileFieldComponent.bryntumConfigs, bryntumEvents = BryntumFileFieldComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumFileFieldComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumFileFieldComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumFileFieldComponent.bryntumConfigsOnly, bryntumProps = BryntumFileFieldComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumFileFieldComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumFileFieldComponent;
    }());
    BryntumFileFieldComponent.instanceClass = calendar.FileField;
    BryntumFileFieldComponent.instanceName = 'FileField';
    BryntumFileFieldComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onTrigger'
    ];
    BryntumFileFieldComponent.bryntumFeatureNames = [];
    BryntumFileFieldComponent.bryntumConfigs = BryntumFileFieldComponent.bryntumFeatureNames.concat([
        'accept',
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'editable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'keyStrokeChangeDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'multiple',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'triggers',
        'ui',
        'validateOnInput',
        'value',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumFileFieldComponent.bryntumConfigsOnly = [
        'accept',
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'keyStrokeChangeDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'multiple',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'textAlign',
        'title',
        'ui',
        'validateOnInput',
        'weight'
    ];
    BryntumFileFieldComponent.bryntumProps = BryntumFileFieldComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumFileFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumFileFieldComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumFileFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumFileFieldComponent, selector: "bryntum-file-field", inputs: { accept: "accept", adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoComplete: "autoComplete", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", clearable: "clearable", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", keyStrokeChangeDelay: "keyStrokeChangeDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", multiple: "multiple", name: "name", owner: "owner", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tag: "tag", textAlign: "textAlign", title: "title", ui: "ui", validateOnInput: "validateOnInput", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumFileFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-file-field',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { accept: [{
                    type: i0.Input
                }], adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], multiple: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumFilePickerComponent = /** @class */ (function () {
        function BryntumFilePickerComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumFilePickerComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumFilePickerComponent.instanceClass, instanceName = BryntumFilePickerComponent.instanceName, bryntumConfigs = BryntumFilePickerComponent.bryntumConfigs, bryntumEvents = BryntumFilePickerComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumFilePickerComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumFilePickerComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumFilePickerComponent.bryntumConfigsOnly, bryntumProps = BryntumFilePickerComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumFilePickerComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumFilePickerComponent;
    }());
    BryntumFilePickerComponent.instanceClass = calendar.FilePicker;
    BryntumFilePickerComponent.instanceName = 'FilePicker';
    BryntumFilePickerComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow'
    ];
    BryntumFilePickerComponent.bryntumFeatureNames = [];
    BryntumFilePickerComponent.bryntumConfigs = BryntumFilePickerComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'buttonConfig',
        'callOnFunctions',
        'centered',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'fileFieldConfig',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'strictRecordMapping',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'tooltip',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumFilePickerComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'buttonConfig',
        'callOnFunctions',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'fileFieldConfig',
        'floating',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'ui',
        'weight'
    ];
    BryntumFilePickerComponent.bryntumProps = BryntumFilePickerComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'strictRecordMapping',
        'tooltip',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumFilePickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumFilePickerComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumFilePickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumFilePickerComponent, selector: "bryntum-file-picker", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bubbleEvents: "bubbleEvents", buttonConfig: "buttonConfig", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", fileFieldConfig: "fileFieldConfig", floating: "floating", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", namedItems: "namedItems", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", tab: "tab", tag: "tag", textAlign: "textAlign", textContent: "textContent", title: "title", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", type: "type", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumFilePickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-file-picker',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], buttonConfig: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], fileFieldConfig: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }] } });

    var BryntumFilterFieldComponent = /** @class */ (function () {
        function BryntumFilterFieldComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumFilterFieldComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumFilterFieldComponent.instanceClass, instanceName = BryntumFilterFieldComponent.instanceName, bryntumConfigs = BryntumFilterFieldComponent.bryntumConfigs, bryntumEvents = BryntumFilterFieldComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumFilterFieldComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumFilterFieldComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumFilterFieldComponent.bryntumConfigsOnly, bryntumProps = BryntumFilterFieldComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumFilterFieldComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumFilterFieldComponent;
    }());
    BryntumFilterFieldComponent.instanceClass = calendar.FilterField;
    BryntumFilterFieldComponent.instanceName = 'FilterField';
    BryntumFilterFieldComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onTrigger'
    ];
    BryntumFilterFieldComponent.bryntumFeatureNames = [];
    BryntumFilterFieldComponent.bryntumConfigs = BryntumFilterFieldComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'editable',
        'extraData',
        'field',
        'filterFunction',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'keyStrokeChangeDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxLength',
        'maxWidth',
        'minHeight',
        'minLength',
        'minWidth',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'store',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'triggers',
        'ui',
        'validateOnInput',
        'value',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumFilterFieldComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'defaultBindProperty',
        'dock',
        'draggable',
        'field',
        'filterFunction',
        'floating',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'keyStrokeChangeDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maxLength',
        'minLength',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'store',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'ui',
        'validateOnInput',
        'weight'
    ];
    BryntumFilterFieldComponent.bryntumProps = BryntumFilterFieldComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumFilterFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumFilterFieldComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumFilterFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumFilterFieldComponent, selector: "bryntum-filter-field", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoComplete: "autoComplete", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", clearable: "clearable", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", field: "field", filterFunction: "filterFunction", floating: "floating", hideAnimation: "hideAnimation", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", keyStrokeChangeDelay: "keyStrokeChangeDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxLength: "maxLength", minLength: "minLength", monitorResize: "monitorResize", name: "name", owner: "owner", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", store: "store", tab: "tab", tabIndex: "tabIndex", tag: "tag", textAlign: "textAlign", title: "title", ui: "ui", validateOnInput: "validateOnInput", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumFilterFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-filter-field',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], field: [{
                    type: i0.Input
                }], filterFunction: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maxLength: [{
                    type: i0.Input
                }], minLength: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumGridComponent = /** @class */ (function () {
        function BryntumGridComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeCancelCellEdit = new i0.EventEmitter();
            this.onBeforeCellDelete = new i0.EventEmitter();
            this.onBeforeCellEditStart = new i0.EventEmitter();
            this.onBeforeClose = new i0.EventEmitter();
            this.onBeforeColumnDragStart = new i0.EventEmitter();
            this.onBeforeColumnDropFinalize = new i0.EventEmitter();
            this.onBeforeCopy = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeFinishCellEdit = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforePaste = new i0.EventEmitter();
            this.onBeforePdfExport = new i0.EventEmitter();
            this.onBeforeRenderRow = new i0.EventEmitter();
            this.onBeforeRenderRows = new i0.EventEmitter();
            this.onBeforeSelectionChange = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onBeforeToggleGroup = new i0.EventEmitter();
            this.onBeforeToggleNode = new i0.EventEmitter();
            this.onCancelCellEdit = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onCellClick = new i0.EventEmitter();
            this.onCellContextMenu = new i0.EventEmitter();
            this.onCellDblClick = new i0.EventEmitter();
            this.onCellMenuBeforeShow = new i0.EventEmitter();
            this.onCellMenuItem = new i0.EventEmitter();
            this.onCellMenuShow = new i0.EventEmitter();
            this.onCellMenuToggleItem = new i0.EventEmitter();
            this.onCellMouseOut = new i0.EventEmitter();
            this.onCellMouseOver = new i0.EventEmitter();
            this.onCollapseNode = new i0.EventEmitter();
            this.onColumnDrag = new i0.EventEmitter();
            this.onColumnDragStart = new i0.EventEmitter();
            this.onColumnDrop = new i0.EventEmitter();
            this.onContextMenuItem = new i0.EventEmitter();
            this.onContextMenuToggleItem = new i0.EventEmitter();
            this.onCopy = new i0.EventEmitter();
            this.onDataChange = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onDragSelecting = new i0.EventEmitter();
            this.onExpandNode = new i0.EventEmitter();
            this.onFinishCellEdit = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onGridRowAbort = new i0.EventEmitter();
            this.onGridRowBeforeDragStart = new i0.EventEmitter();
            this.onGridRowBeforeDropFinalize = new i0.EventEmitter();
            this.onGridRowDrag = new i0.EventEmitter();
            this.onGridRowDragStart = new i0.EventEmitter();
            this.onGridRowDrop = new i0.EventEmitter();
            this.onHeaderMenuBeforeShow = new i0.EventEmitter();
            this.onHeaderMenuItem = new i0.EventEmitter();
            this.onHeaderMenuShow = new i0.EventEmitter();
            this.onHeaderMenuToggleItem = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onMouseOut = new i0.EventEmitter();
            this.onMouseOver = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onPaste = new i0.EventEmitter();
            this.onPdfExport = new i0.EventEmitter();
            this.onPointerOver = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onRenderRow = new i0.EventEmitter();
            this.onRenderRows = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onResponsive = new i0.EventEmitter();
            this.onScroll = new i0.EventEmitter();
            this.onSelectionChange = new i0.EventEmitter();
            this.onSelectionModeChange = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onStartCellEdit = new i0.EventEmitter();
            this.onSubGridCollapse = new i0.EventEmitter();
            this.onSubGridExpand = new i0.EventEmitter();
            this.onToggleGroup = new i0.EventEmitter();
            this.onToggleNode = new i0.EventEmitter();
            this.onToolClick = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumGridComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumGridComponent.instanceClass, instanceName = BryntumGridComponent.instanceName, bryntumConfigs = BryntumGridComponent.bryntumConfigs, bryntumEvents = BryntumGridComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
            // Backwards compatibility for gridInstance, schedulerInstance etc.
            // @ts-ignore
            me[calendar.StringHelper.uncapitalize(instanceName) + 'Instance'] = me.instance;
            // 
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumGridComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumGridComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumGridComponent.bryntumConfigsOnly, bryntumProps = BryntumGridComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumGridComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumGridComponent;
    }());
    BryntumGridComponent.instanceClass = calendar.Grid;
    BryntumGridComponent.instanceName = 'Grid';
    BryntumGridComponent.bryntumEvents = [
        'onBeforeCancelCellEdit',
        'onBeforeCellDelete',
        'onBeforeCellEditStart',
        'onBeforeClose',
        'onBeforeColumnDragStart',
        'onBeforeColumnDropFinalize',
        'onBeforeCopy',
        'onBeforeDestroy',
        'onBeforeFinishCellEdit',
        'onBeforeHide',
        'onBeforePaste',
        'onBeforePdfExport',
        'onBeforeRenderRow',
        'onBeforeRenderRows',
        'onBeforeSelectionChange',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onBeforeToggleGroup',
        'onBeforeToggleNode',
        'onCancelCellEdit',
        'onCatchAll',
        'onCellClick',
        'onCellContextMenu',
        'onCellDblClick',
        'onCellMenuBeforeShow',
        'onCellMenuItem',
        'onCellMenuShow',
        'onCellMenuToggleItem',
        'onCellMouseOut',
        'onCellMouseOver',
        'onCollapseNode',
        'onColumnDrag',
        'onColumnDragStart',
        'onColumnDrop',
        'onContextMenuItem',
        'onContextMenuToggleItem',
        'onCopy',
        'onDataChange',
        'onDestroy',
        'onDragSelecting',
        'onExpandNode',
        'onFinishCellEdit',
        'onFocusIn',
        'onFocusOut',
        'onGridRowAbort',
        'onGridRowBeforeDragStart',
        'onGridRowBeforeDropFinalize',
        'onGridRowDrag',
        'onGridRowDragStart',
        'onGridRowDrop',
        'onHeaderMenuBeforeShow',
        'onHeaderMenuItem',
        'onHeaderMenuShow',
        'onHeaderMenuToggleItem',
        'onHide',
        'onMouseOut',
        'onMouseOver',
        'onPaint',
        'onPaste',
        'onPdfExport',
        'onPointerOver',
        'onRecompose',
        'onRenderRow',
        'onRenderRows',
        'onResize',
        'onResponsive',
        'onScroll',
        'onSelectionChange',
        'onSelectionModeChange',
        'onShow',
        'onStartCellEdit',
        'onSubGridCollapse',
        'onSubGridExpand',
        'onToggleGroup',
        'onToggleNode',
        'onToolClick'
    ];
    BryntumGridComponent.bryntumFeatureNames = [
        'cellCopyPasteFeature',
        'cellEditFeature',
        'cellMenuFeature',
        'cellTooltipFeature',
        'columnAutoWidthFeature',
        'columnDragToolbarFeature',
        'columnPickerFeature',
        'columnRenameFeature',
        'columnReorderFeature',
        'columnResizeFeature',
        'excelExporterFeature',
        'fillHandleFeature',
        'filterFeature',
        'filterBarFeature',
        'groupFeature',
        'groupSummaryFeature',
        'headerMenuFeature',
        'mergeCellsFeature',
        'multipageFeature',
        'multipageverticalFeature',
        'pdfExportFeature',
        'quickFindFeature',
        'regionResizeFeature',
        'rowCopyPasteFeature',
        'rowExpanderFeature',
        'rowReorderFeature',
        'searchFeature',
        'singlepageFeature',
        'sortFeature',
        'stickyCellsFeature',
        'stripeFeature',
        'summaryFeature',
        'treeFeature',
        'treeGroupFeature'
    ];
    BryntumGridComponent.bryntumConfigs = BryntumGridComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'allowOver',
        'anchor',
        'anchorToTarget',
        'animateRemovingRows',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoHeight',
        'autoShow',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'closable',
        'closeAction',
        'cls',
        'collapsed',
        'collapsible',
        'columnLines',
        'columns',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'contextMenuTriggerEvent',
        'data',
        'dataset',
        'defaultBindProperty',
        'defaultFocus',
        'defaultRegion',
        'defaults',
        'destroyStore',
        'disabled',
        'disableGridRowModelWarning',
        'dismissDelay',
        'dock',
        'draggable',
        'emptyText',
        'enableSticky',
        'enableTextSelection',
        'enableUndoRedoKeys',
        'extraData',
        'features',
        'fillLastColumn',
        'fixedRowHeight',
        'flex',
        'floating',
        'focusOnToFront',
        'footer',
        'forElement',
        'forSelector',
        'fullRowRefresh',
        'getHtml',
        'getRowHeight',
        'header',
        'height',
        'hidden',
        'hideAnimation',
        'hideDelay',
        'hideHeaders',
        'hideOnDelegateChange',
        'hideWhenEmpty',
        'hoverDelay',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'keyMap',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'loadingMsg',
        'loadMask',
        'loadMaskDefaults',
        'loadMaskError',
        'localeClass',
        'localizable',
        'localizableProperties',
        'longPressTime',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maximizable',
        'maximized',
        'maxWidth',
        'minHeight',
        'minWidth',
        'modal',
        'monitorResize',
        'mouseOffsetX',
        'mouseOffsetY',
        'namedItems',
        'owner',
        'plugins',
        'positioned',
        'preserveFocusOnDatasetChange',
        'preserveScrollOnDatasetChange',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'resizeToFitIncludesHeader',
        'responsiveLevels',
        'ripple',
        'rootElement',
        'rowHeight',
        'scrollable',
        'scrollAction',
        'scrollerClass',
        'scrollManager',
        'selectionMode',
        'showAnimation',
        'showDirty',
        'showOnClick',
        'showOnHover',
        'showTooltipWhenDisabled',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'store',
        'strictRecordMapping',
        'strips',
        'subGridConfigs',
        'syncMask',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'title',
        'tools',
        'tooltip',
        'trackMouse',
        'transitionDuration',
        'trapFocus',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumGridComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'allowOver',
        'anchor',
        'anchorToTarget',
        'animateRemovingRows',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoHeight',
        'autoShow',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'closable',
        'closeAction',
        'collapsed',
        'collapsible',
        'columns',
        'config',
        'constrainTo',
        'contentElementCls',
        'contextMenuTriggerEvent',
        'defaultBindProperty',
        'defaultFocus',
        'defaultRegion',
        'defaults',
        'destroyStore',
        'disableGridRowModelWarning',
        'dismissDelay',
        'dock',
        'draggable',
        'enableSticky',
        'enableTextSelection',
        'features',
        'fillLastColumn',
        'fixedRowHeight',
        'floating',
        'focusOnToFront',
        'footer',
        'forElement',
        'forSelector',
        'fullRowRefresh',
        'getHtml',
        'getRowHeight',
        'header',
        'hideAnimation',
        'hideDelay',
        'hideHeaders',
        'hideOnDelegateChange',
        'hideWhenEmpty',
        'hoverDelay',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'keyMap',
        'lazyItems',
        'listeners',
        'loadingMsg',
        'loadMask',
        'loadMaskDefaults',
        'loadMaskError',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maximizable',
        'maximized',
        'modal',
        'monitorResize',
        'mouseOffsetX',
        'mouseOffsetY',
        'namedItems',
        'owner',
        'plugins',
        'positioned',
        'preserveFocusOnDatasetChange',
        'preserveScrollOnDatasetChange',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'resizeToFitIncludesHeader',
        'responsiveLevels',
        'ripple',
        'rootElement',
        'scrollAction',
        'scrollerClass',
        'scrollManager',
        'selectionMode',
        'showAnimation',
        'showDirty',
        'showOnClick',
        'showOnHover',
        'showTooltipWhenDisabled',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strips',
        'subGridConfigs',
        'syncMask',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'trackMouse',
        'trapFocus',
        'ui',
        'weight'
    ];
    BryntumGridComponent.bryntumProps = BryntumGridComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'columnLines',
        'content',
        'data',
        'dataset',
        'disabled',
        'emptyText',
        'enableUndoRedoKeys',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'longPressTime',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'rowHeight',
        'scrollable',
        'selectedCell',
        'selectedCells',
        'selectedRecord',
        'selectedRecords',
        'selectedRows',
        'state',
        'store',
        'strictRecordMapping',
        'title',
        'tools',
        'tooltip',
        'transitionDuration',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumGridComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumGridComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumGridComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumGridComponent, selector: "bryntum-grid", inputs: { adopt: "adopt", align: "align", allowOver: "allowOver", anchor: "anchor", anchorToTarget: "anchorToTarget", animateRemovingRows: "animateRemovingRows", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoClose: "autoClose", autoHeight: "autoHeight", autoShow: "autoShow", autoUpdateRecord: "autoUpdateRecord", bbar: "bbar", bodyCls: "bodyCls", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", closable: "closable", closeAction: "closeAction", collapsed: "collapsed", collapsible: "collapsible", columns: "columns", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", contextMenuTriggerEvent: "contextMenuTriggerEvent", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaultRegion: "defaultRegion", defaults: "defaults", destroyStore: "destroyStore", disableGridRowModelWarning: "disableGridRowModelWarning", dismissDelay: "dismissDelay", dock: "dock", draggable: "draggable", enableSticky: "enableSticky", enableTextSelection: "enableTextSelection", features: "features", fillLastColumn: "fillLastColumn", fixedRowHeight: "fixedRowHeight", floating: "floating", focusOnToFront: "focusOnToFront", footer: "footer", forElement: "forElement", forSelector: "forSelector", fullRowRefresh: "fullRowRefresh", getHtml: "getHtml", getRowHeight: "getRowHeight", header: "header", hideAnimation: "hideAnimation", hideDelay: "hideDelay", hideHeaders: "hideHeaders", hideOnDelegateChange: "hideOnDelegateChange", hideWhenEmpty: "hideWhenEmpty", hoverDelay: "hoverDelay", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", keyMap: "keyMap", lazyItems: "lazyItems", listeners: "listeners", loadingMsg: "loadingMsg", loadMask: "loadMask", loadMaskDefaults: "loadMaskDefaults", loadMaskError: "loadMaskError", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maximizable: "maximizable", maximized: "maximized", modal: "modal", monitorResize: "monitorResize", mouseOffsetX: "mouseOffsetX", mouseOffsetY: "mouseOffsetY", namedItems: "namedItems", owner: "owner", plugins: "plugins", positioned: "positioned", preserveFocusOnDatasetChange: "preserveFocusOnDatasetChange", preserveScrollOnDatasetChange: "preserveScrollOnDatasetChange", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", resizeToFitIncludesHeader: "resizeToFitIncludesHeader", responsiveLevels: "responsiveLevels", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", scrollerClass: "scrollerClass", scrollManager: "scrollManager", selectionMode: "selectionMode", showAnimation: "showAnimation", showDirty: "showDirty", showOnClick: "showOnClick", showOnHover: "showOnHover", showTooltipWhenDisabled: "showTooltipWhenDisabled", stateful: "stateful", statefulEvents: "statefulEvents", stateId: "stateId", stateProvider: "stateProvider", strips: "strips", subGridConfigs: "subGridConfigs", syncMask: "syncMask", tab: "tab", tag: "tag", tbar: "tbar", textAlign: "textAlign", textContent: "textContent", trackMouse: "trackMouse", trapFocus: "trapFocus", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", columnLines: "columnLines", content: "content", data: "data", dataset: "dataset", disabled: "disabled", emptyText: "emptyText", enableUndoRedoKeys: "enableUndoRedoKeys", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", longPressTime: "longPressTime", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", rowHeight: "rowHeight", scrollable: "scrollable", store: "store", strictRecordMapping: "strictRecordMapping", title: "title", tools: "tools", tooltip: "tooltip", transitionDuration: "transitionDuration", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", selectedCell: "selectedCell", selectedCells: "selectedCells", selectedRecord: "selectedRecord", selectedRecords: "selectedRecords", selectedRows: "selectedRows", state: "state", type: "type", values: "values", cellCopyPasteFeature: "cellCopyPasteFeature", cellEditFeature: "cellEditFeature", cellMenuFeature: "cellMenuFeature", cellTooltipFeature: "cellTooltipFeature", columnAutoWidthFeature: "columnAutoWidthFeature", columnDragToolbarFeature: "columnDragToolbarFeature", columnPickerFeature: "columnPickerFeature", columnRenameFeature: "columnRenameFeature", columnReorderFeature: "columnReorderFeature", columnResizeFeature: "columnResizeFeature", excelExporterFeature: "excelExporterFeature", fillHandleFeature: "fillHandleFeature", filterFeature: "filterFeature", filterBarFeature: "filterBarFeature", groupFeature: "groupFeature", groupSummaryFeature: "groupSummaryFeature", headerMenuFeature: "headerMenuFeature", mergeCellsFeature: "mergeCellsFeature", multipageFeature: "multipageFeature", multipageverticalFeature: "multipageverticalFeature", pdfExportFeature: "pdfExportFeature", quickFindFeature: "quickFindFeature", regionResizeFeature: "regionResizeFeature", rowCopyPasteFeature: "rowCopyPasteFeature", rowExpanderFeature: "rowExpanderFeature", rowReorderFeature: "rowReorderFeature", searchFeature: "searchFeature", singlepageFeature: "singlepageFeature", sortFeature: "sortFeature", stickyCellsFeature: "stickyCellsFeature", stripeFeature: "stripeFeature", summaryFeature: "summaryFeature", treeFeature: "treeFeature", treeGroupFeature: "treeGroupFeature" }, outputs: { onBeforeCancelCellEdit: "onBeforeCancelCellEdit", onBeforeCellDelete: "onBeforeCellDelete", onBeforeCellEditStart: "onBeforeCellEditStart", onBeforeClose: "onBeforeClose", onBeforeColumnDragStart: "onBeforeColumnDragStart", onBeforeColumnDropFinalize: "onBeforeColumnDropFinalize", onBeforeCopy: "onBeforeCopy", onBeforeDestroy: "onBeforeDestroy", onBeforeFinishCellEdit: "onBeforeFinishCellEdit", onBeforeHide: "onBeforeHide", onBeforePaste: "onBeforePaste", onBeforePdfExport: "onBeforePdfExport", onBeforeRenderRow: "onBeforeRenderRow", onBeforeRenderRows: "onBeforeRenderRows", onBeforeSelectionChange: "onBeforeSelectionChange", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onBeforeToggleGroup: "onBeforeToggleGroup", onBeforeToggleNode: "onBeforeToggleNode", onCancelCellEdit: "onCancelCellEdit", onCatchAll: "onCatchAll", onCellClick: "onCellClick", onCellContextMenu: "onCellContextMenu", onCellDblClick: "onCellDblClick", onCellMenuBeforeShow: "onCellMenuBeforeShow", onCellMenuItem: "onCellMenuItem", onCellMenuShow: "onCellMenuShow", onCellMenuToggleItem: "onCellMenuToggleItem", onCellMouseOut: "onCellMouseOut", onCellMouseOver: "onCellMouseOver", onCollapseNode: "onCollapseNode", onColumnDrag: "onColumnDrag", onColumnDragStart: "onColumnDragStart", onColumnDrop: "onColumnDrop", onContextMenuItem: "onContextMenuItem", onContextMenuToggleItem: "onContextMenuToggleItem", onCopy: "onCopy", onDataChange: "onDataChange", onDestroy: "onDestroy", onDragSelecting: "onDragSelecting", onExpandNode: "onExpandNode", onFinishCellEdit: "onFinishCellEdit", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onGridRowAbort: "onGridRowAbort", onGridRowBeforeDragStart: "onGridRowBeforeDragStart", onGridRowBeforeDropFinalize: "onGridRowBeforeDropFinalize", onGridRowDrag: "onGridRowDrag", onGridRowDragStart: "onGridRowDragStart", onGridRowDrop: "onGridRowDrop", onHeaderMenuBeforeShow: "onHeaderMenuBeforeShow", onHeaderMenuItem: "onHeaderMenuItem", onHeaderMenuShow: "onHeaderMenuShow", onHeaderMenuToggleItem: "onHeaderMenuToggleItem", onHide: "onHide", onMouseOut: "onMouseOut", onMouseOver: "onMouseOver", onPaint: "onPaint", onPaste: "onPaste", onPdfExport: "onPdfExport", onPointerOver: "onPointerOver", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onRenderRow: "onRenderRow", onRenderRows: "onRenderRows", onResize: "onResize", onResponsive: "onResponsive", onScroll: "onScroll", onSelectionChange: "onSelectionChange", onSelectionModeChange: "onSelectionModeChange", onShow: "onShow", onStartCellEdit: "onStartCellEdit", onSubGridCollapse: "onSubGridCollapse", onSubGridExpand: "onSubGridExpand", onToggleGroup: "onToggleGroup", onToggleNode: "onToggleNode", onToolClick: "onToolClick" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumGridComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-grid',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], allowOver: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], anchorToTarget: [{
                    type: i0.Input
                }], animateRemovingRows: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoClose: [{
                    type: i0.Input
                }], autoHeight: [{
                    type: i0.Input
                }], autoShow: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bbar: [{
                    type: i0.Input
                }], bodyCls: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], closable: [{
                    type: i0.Input
                }], closeAction: [{
                    type: i0.Input
                }], collapsed: [{
                    type: i0.Input
                }], collapsible: [{
                    type: i0.Input
                }], columns: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], contextMenuTriggerEvent: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaultRegion: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], destroyStore: [{
                    type: i0.Input
                }], disableGridRowModelWarning: [{
                    type: i0.Input
                }], dismissDelay: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], enableSticky: [{
                    type: i0.Input
                }], enableTextSelection: [{
                    type: i0.Input
                }], features: [{
                    type: i0.Input
                }], fillLastColumn: [{
                    type: i0.Input
                }], fixedRowHeight: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], focusOnToFront: [{
                    type: i0.Input
                }], footer: [{
                    type: i0.Input
                }], forElement: [{
                    type: i0.Input
                }], forSelector: [{
                    type: i0.Input
                }], fullRowRefresh: [{
                    type: i0.Input
                }], getHtml: [{
                    type: i0.Input
                }], getRowHeight: [{
                    type: i0.Input
                }], header: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideDelay: [{
                    type: i0.Input
                }], hideHeaders: [{
                    type: i0.Input
                }], hideOnDelegateChange: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], hoverDelay: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], keyMap: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], loadingMsg: [{
                    type: i0.Input
                }], loadMask: [{
                    type: i0.Input
                }], loadMaskDefaults: [{
                    type: i0.Input
                }], loadMaskError: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maximizable: [{
                    type: i0.Input
                }], maximized: [{
                    type: i0.Input
                }], modal: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], mouseOffsetX: [{
                    type: i0.Input
                }], mouseOffsetY: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], plugins: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preserveFocusOnDatasetChange: [{
                    type: i0.Input
                }], preserveScrollOnDatasetChange: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], resizeToFitIncludesHeader: [{
                    type: i0.Input
                }], responsiveLevels: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], scrollerClass: [{
                    type: i0.Input
                }], scrollManager: [{
                    type: i0.Input
                }], selectionMode: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showDirty: [{
                    type: i0.Input
                }], showOnClick: [{
                    type: i0.Input
                }], showOnHover: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], stateful: [{
                    type: i0.Input
                }], statefulEvents: [{
                    type: i0.Input
                }], stateId: [{
                    type: i0.Input
                }], stateProvider: [{
                    type: i0.Input
                }], strips: [{
                    type: i0.Input
                }], subGridConfigs: [{
                    type: i0.Input
                }], syncMask: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], tbar: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], trackMouse: [{
                    type: i0.Input
                }], trapFocus: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], columnLines: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], data: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], emptyText: [{
                    type: i0.Input
                }], enableUndoRedoKeys: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], longPressTime: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], rowHeight: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], tools: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], transitionDuration: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], selectedCell: [{
                    type: i0.Input
                }], selectedCells: [{
                    type: i0.Input
                }], selectedRecord: [{
                    type: i0.Input
                }], selectedRecords: [{
                    type: i0.Input
                }], selectedRows: [{
                    type: i0.Input
                }], state: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeCancelCellEdit: [{
                    type: i0.Output
                }], onBeforeCellDelete: [{
                    type: i0.Output
                }], onBeforeCellEditStart: [{
                    type: i0.Output
                }], onBeforeClose: [{
                    type: i0.Output
                }], onBeforeColumnDragStart: [{
                    type: i0.Output
                }], onBeforeColumnDropFinalize: [{
                    type: i0.Output
                }], onBeforeCopy: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeFinishCellEdit: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforePaste: [{
                    type: i0.Output
                }], onBeforePdfExport: [{
                    type: i0.Output
                }], onBeforeRenderRow: [{
                    type: i0.Output
                }], onBeforeRenderRows: [{
                    type: i0.Output
                }], onBeforeSelectionChange: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onBeforeToggleGroup: [{
                    type: i0.Output
                }], onBeforeToggleNode: [{
                    type: i0.Output
                }], onCancelCellEdit: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onCellClick: [{
                    type: i0.Output
                }], onCellContextMenu: [{
                    type: i0.Output
                }], onCellDblClick: [{
                    type: i0.Output
                }], onCellMenuBeforeShow: [{
                    type: i0.Output
                }], onCellMenuItem: [{
                    type: i0.Output
                }], onCellMenuShow: [{
                    type: i0.Output
                }], onCellMenuToggleItem: [{
                    type: i0.Output
                }], onCellMouseOut: [{
                    type: i0.Output
                }], onCellMouseOver: [{
                    type: i0.Output
                }], onCollapseNode: [{
                    type: i0.Output
                }], onColumnDrag: [{
                    type: i0.Output
                }], onColumnDragStart: [{
                    type: i0.Output
                }], onColumnDrop: [{
                    type: i0.Output
                }], onContextMenuItem: [{
                    type: i0.Output
                }], onContextMenuToggleItem: [{
                    type: i0.Output
                }], onCopy: [{
                    type: i0.Output
                }], onDataChange: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onDragSelecting: [{
                    type: i0.Output
                }], onExpandNode: [{
                    type: i0.Output
                }], onFinishCellEdit: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onGridRowAbort: [{
                    type: i0.Output
                }], onGridRowBeforeDragStart: [{
                    type: i0.Output
                }], onGridRowBeforeDropFinalize: [{
                    type: i0.Output
                }], onGridRowDrag: [{
                    type: i0.Output
                }], onGridRowDragStart: [{
                    type: i0.Output
                }], onGridRowDrop: [{
                    type: i0.Output
                }], onHeaderMenuBeforeShow: [{
                    type: i0.Output
                }], onHeaderMenuItem: [{
                    type: i0.Output
                }], onHeaderMenuShow: [{
                    type: i0.Output
                }], onHeaderMenuToggleItem: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onMouseOut: [{
                    type: i0.Output
                }], onMouseOver: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onPaste: [{
                    type: i0.Output
                }], onPdfExport: [{
                    type: i0.Output
                }], onPointerOver: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onRenderRow: [{
                    type: i0.Output
                }], onRenderRows: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onResponsive: [{
                    type: i0.Output
                }], onScroll: [{
                    type: i0.Output
                }], onSelectionChange: [{
                    type: i0.Output
                }], onSelectionModeChange: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onStartCellEdit: [{
                    type: i0.Output
                }], onSubGridCollapse: [{
                    type: i0.Output
                }], onSubGridExpand: [{
                    type: i0.Output
                }], onToggleGroup: [{
                    type: i0.Output
                }], onToggleNode: [{
                    type: i0.Output
                }], onToolClick: [{
                    type: i0.Output
                }], cellCopyPasteFeature: [{
                    type: i0.Input
                }], cellEditFeature: [{
                    type: i0.Input
                }], cellMenuFeature: [{
                    type: i0.Input
                }], cellTooltipFeature: [{
                    type: i0.Input
                }], columnAutoWidthFeature: [{
                    type: i0.Input
                }], columnDragToolbarFeature: [{
                    type: i0.Input
                }], columnPickerFeature: [{
                    type: i0.Input
                }], columnRenameFeature: [{
                    type: i0.Input
                }], columnReorderFeature: [{
                    type: i0.Input
                }], columnResizeFeature: [{
                    type: i0.Input
                }], excelExporterFeature: [{
                    type: i0.Input
                }], fillHandleFeature: [{
                    type: i0.Input
                }], filterFeature: [{
                    type: i0.Input
                }], filterBarFeature: [{
                    type: i0.Input
                }], groupFeature: [{
                    type: i0.Input
                }], groupSummaryFeature: [{
                    type: i0.Input
                }], headerMenuFeature: [{
                    type: i0.Input
                }], mergeCellsFeature: [{
                    type: i0.Input
                }], multipageFeature: [{
                    type: i0.Input
                }], multipageverticalFeature: [{
                    type: i0.Input
                }], pdfExportFeature: [{
                    type: i0.Input
                }], quickFindFeature: [{
                    type: i0.Input
                }], regionResizeFeature: [{
                    type: i0.Input
                }], rowCopyPasteFeature: [{
                    type: i0.Input
                }], rowExpanderFeature: [{
                    type: i0.Input
                }], rowReorderFeature: [{
                    type: i0.Input
                }], searchFeature: [{
                    type: i0.Input
                }], singlepageFeature: [{
                    type: i0.Input
                }], sortFeature: [{
                    type: i0.Input
                }], stickyCellsFeature: [{
                    type: i0.Input
                }], stripeFeature: [{
                    type: i0.Input
                }], summaryFeature: [{
                    type: i0.Input
                }], treeFeature: [{
                    type: i0.Input
                }], treeGroupFeature: [{
                    type: i0.Input
                }] } });

    var BryntumGridBaseComponent = /** @class */ (function () {
        function BryntumGridBaseComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeCancelCellEdit = new i0.EventEmitter();
            this.onBeforeCellDelete = new i0.EventEmitter();
            this.onBeforeCellEditStart = new i0.EventEmitter();
            this.onBeforeClose = new i0.EventEmitter();
            this.onBeforeColumnDragStart = new i0.EventEmitter();
            this.onBeforeColumnDropFinalize = new i0.EventEmitter();
            this.onBeforeCopy = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeFinishCellEdit = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforePaste = new i0.EventEmitter();
            this.onBeforePdfExport = new i0.EventEmitter();
            this.onBeforeRenderRow = new i0.EventEmitter();
            this.onBeforeRenderRows = new i0.EventEmitter();
            this.onBeforeSelectionChange = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onBeforeToggleGroup = new i0.EventEmitter();
            this.onBeforeToggleNode = new i0.EventEmitter();
            this.onCancelCellEdit = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onCellClick = new i0.EventEmitter();
            this.onCellContextMenu = new i0.EventEmitter();
            this.onCellDblClick = new i0.EventEmitter();
            this.onCellMenuBeforeShow = new i0.EventEmitter();
            this.onCellMenuItem = new i0.EventEmitter();
            this.onCellMenuShow = new i0.EventEmitter();
            this.onCellMenuToggleItem = new i0.EventEmitter();
            this.onCellMouseOut = new i0.EventEmitter();
            this.onCellMouseOver = new i0.EventEmitter();
            this.onCollapseNode = new i0.EventEmitter();
            this.onColumnDrag = new i0.EventEmitter();
            this.onColumnDragStart = new i0.EventEmitter();
            this.onColumnDrop = new i0.EventEmitter();
            this.onContextMenuItem = new i0.EventEmitter();
            this.onContextMenuToggleItem = new i0.EventEmitter();
            this.onCopy = new i0.EventEmitter();
            this.onDataChange = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onDragSelecting = new i0.EventEmitter();
            this.onExpandNode = new i0.EventEmitter();
            this.onFinishCellEdit = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onGridRowAbort = new i0.EventEmitter();
            this.onGridRowBeforeDragStart = new i0.EventEmitter();
            this.onGridRowBeforeDropFinalize = new i0.EventEmitter();
            this.onGridRowDrag = new i0.EventEmitter();
            this.onGridRowDragStart = new i0.EventEmitter();
            this.onGridRowDrop = new i0.EventEmitter();
            this.onHeaderMenuBeforeShow = new i0.EventEmitter();
            this.onHeaderMenuItem = new i0.EventEmitter();
            this.onHeaderMenuShow = new i0.EventEmitter();
            this.onHeaderMenuToggleItem = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onMouseOut = new i0.EventEmitter();
            this.onMouseOver = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onPaste = new i0.EventEmitter();
            this.onPdfExport = new i0.EventEmitter();
            this.onPointerOver = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onRenderRow = new i0.EventEmitter();
            this.onRenderRows = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onResponsive = new i0.EventEmitter();
            this.onScroll = new i0.EventEmitter();
            this.onSelectionChange = new i0.EventEmitter();
            this.onSelectionModeChange = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onStartCellEdit = new i0.EventEmitter();
            this.onSubGridCollapse = new i0.EventEmitter();
            this.onSubGridExpand = new i0.EventEmitter();
            this.onToggleGroup = new i0.EventEmitter();
            this.onToggleNode = new i0.EventEmitter();
            this.onToolClick = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumGridBaseComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumGridBaseComponent.instanceClass, instanceName = BryntumGridBaseComponent.instanceName, bryntumConfigs = BryntumGridBaseComponent.bryntumConfigs, bryntumEvents = BryntumGridBaseComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
            // Backwards compatibility for gridInstance, schedulerInstance etc.
            // @ts-ignore
            me[calendar.StringHelper.uncapitalize(instanceName) + 'Instance'] = me.instance;
            // 
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumGridBaseComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumGridBaseComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumGridBaseComponent.bryntumConfigsOnly, bryntumProps = BryntumGridBaseComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumGridBaseComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumGridBaseComponent;
    }());
    BryntumGridBaseComponent.instanceClass = calendar.GridBase;
    BryntumGridBaseComponent.instanceName = 'GridBase';
    BryntumGridBaseComponent.bryntumEvents = [
        'onBeforeCancelCellEdit',
        'onBeforeCellDelete',
        'onBeforeCellEditStart',
        'onBeforeClose',
        'onBeforeColumnDragStart',
        'onBeforeColumnDropFinalize',
        'onBeforeCopy',
        'onBeforeDestroy',
        'onBeforeFinishCellEdit',
        'onBeforeHide',
        'onBeforePaste',
        'onBeforePdfExport',
        'onBeforeRenderRow',
        'onBeforeRenderRows',
        'onBeforeSelectionChange',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onBeforeToggleGroup',
        'onBeforeToggleNode',
        'onCancelCellEdit',
        'onCatchAll',
        'onCellClick',
        'onCellContextMenu',
        'onCellDblClick',
        'onCellMenuBeforeShow',
        'onCellMenuItem',
        'onCellMenuShow',
        'onCellMenuToggleItem',
        'onCellMouseOut',
        'onCellMouseOver',
        'onCollapseNode',
        'onColumnDrag',
        'onColumnDragStart',
        'onColumnDrop',
        'onContextMenuItem',
        'onContextMenuToggleItem',
        'onCopy',
        'onDataChange',
        'onDestroy',
        'onDragSelecting',
        'onExpandNode',
        'onFinishCellEdit',
        'onFocusIn',
        'onFocusOut',
        'onGridRowAbort',
        'onGridRowBeforeDragStart',
        'onGridRowBeforeDropFinalize',
        'onGridRowDrag',
        'onGridRowDragStart',
        'onGridRowDrop',
        'onHeaderMenuBeforeShow',
        'onHeaderMenuItem',
        'onHeaderMenuShow',
        'onHeaderMenuToggleItem',
        'onHide',
        'onMouseOut',
        'onMouseOver',
        'onPaint',
        'onPaste',
        'onPdfExport',
        'onPointerOver',
        'onRecompose',
        'onRenderRow',
        'onRenderRows',
        'onResize',
        'onResponsive',
        'onScroll',
        'onSelectionChange',
        'onSelectionModeChange',
        'onShow',
        'onStartCellEdit',
        'onSubGridCollapse',
        'onSubGridExpand',
        'onToggleGroup',
        'onToggleNode',
        'onToolClick'
    ];
    BryntumGridBaseComponent.bryntumFeatureNames = [
        'cellCopyPasteFeature',
        'cellEditFeature',
        'cellMenuFeature',
        'cellTooltipFeature',
        'columnAutoWidthFeature',
        'columnDragToolbarFeature',
        'columnPickerFeature',
        'columnRenameFeature',
        'columnReorderFeature',
        'columnResizeFeature',
        'excelExporterFeature',
        'fillHandleFeature',
        'filterFeature',
        'filterBarFeature',
        'groupFeature',
        'groupSummaryFeature',
        'headerMenuFeature',
        'mergeCellsFeature',
        'multipageFeature',
        'multipageverticalFeature',
        'pdfExportFeature',
        'quickFindFeature',
        'regionResizeFeature',
        'rowCopyPasteFeature',
        'rowExpanderFeature',
        'rowReorderFeature',
        'searchFeature',
        'singlepageFeature',
        'sortFeature',
        'stickyCellsFeature',
        'stripeFeature',
        'summaryFeature',
        'treeFeature',
        'treeGroupFeature'
    ];
    BryntumGridBaseComponent.bryntumConfigs = BryntumGridBaseComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'allowOver',
        'anchor',
        'anchorToTarget',
        'animateRemovingRows',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoHeight',
        'autoShow',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'closable',
        'closeAction',
        'cls',
        'collapsed',
        'collapsible',
        'columnLines',
        'columns',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'contextMenuTriggerEvent',
        'data',
        'dataset',
        'defaultBindProperty',
        'defaultFocus',
        'defaultRegion',
        'defaults',
        'destroyStore',
        'disabled',
        'disableGridRowModelWarning',
        'dismissDelay',
        'dock',
        'draggable',
        'emptyText',
        'enableSticky',
        'enableTextSelection',
        'enableUndoRedoKeys',
        'extraData',
        'features',
        'fillLastColumn',
        'fixedRowHeight',
        'flex',
        'floating',
        'focusOnToFront',
        'footer',
        'forElement',
        'forSelector',
        'fullRowRefresh',
        'getHtml',
        'getRowHeight',
        'header',
        'height',
        'hidden',
        'hideAnimation',
        'hideDelay',
        'hideHeaders',
        'hideOnDelegateChange',
        'hideWhenEmpty',
        'hoverDelay',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'keyMap',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'loadingMsg',
        'loadMask',
        'loadMaskDefaults',
        'loadMaskError',
        'localeClass',
        'localizable',
        'localizableProperties',
        'longPressTime',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maximizable',
        'maximized',
        'maxWidth',
        'minHeight',
        'minWidth',
        'modal',
        'monitorResize',
        'mouseOffsetX',
        'mouseOffsetY',
        'namedItems',
        'owner',
        'plugins',
        'positioned',
        'preserveFocusOnDatasetChange',
        'preserveScrollOnDatasetChange',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'resizeToFitIncludesHeader',
        'responsiveLevels',
        'ripple',
        'rootElement',
        'rowHeight',
        'scrollable',
        'scrollAction',
        'scrollerClass',
        'scrollManager',
        'selectionMode',
        'showAnimation',
        'showDirty',
        'showOnClick',
        'showOnHover',
        'showTooltipWhenDisabled',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'store',
        'strictRecordMapping',
        'strips',
        'subGridConfigs',
        'syncMask',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'title',
        'tools',
        'tooltip',
        'trackMouse',
        'transitionDuration',
        'trapFocus',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumGridBaseComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'allowOver',
        'anchor',
        'anchorToTarget',
        'animateRemovingRows',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoHeight',
        'autoShow',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'closable',
        'closeAction',
        'collapsed',
        'collapsible',
        'columns',
        'config',
        'constrainTo',
        'contentElementCls',
        'contextMenuTriggerEvent',
        'defaultBindProperty',
        'defaultFocus',
        'defaultRegion',
        'defaults',
        'destroyStore',
        'disableGridRowModelWarning',
        'dismissDelay',
        'dock',
        'draggable',
        'enableSticky',
        'enableTextSelection',
        'features',
        'fillLastColumn',
        'fixedRowHeight',
        'floating',
        'focusOnToFront',
        'footer',
        'forElement',
        'forSelector',
        'fullRowRefresh',
        'getHtml',
        'getRowHeight',
        'header',
        'hideAnimation',
        'hideDelay',
        'hideHeaders',
        'hideOnDelegateChange',
        'hideWhenEmpty',
        'hoverDelay',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'keyMap',
        'lazyItems',
        'listeners',
        'loadingMsg',
        'loadMask',
        'loadMaskDefaults',
        'loadMaskError',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maximizable',
        'maximized',
        'modal',
        'monitorResize',
        'mouseOffsetX',
        'mouseOffsetY',
        'namedItems',
        'owner',
        'plugins',
        'positioned',
        'preserveFocusOnDatasetChange',
        'preserveScrollOnDatasetChange',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'resizeToFitIncludesHeader',
        'responsiveLevels',
        'ripple',
        'rootElement',
        'scrollAction',
        'scrollerClass',
        'scrollManager',
        'selectionMode',
        'showAnimation',
        'showDirty',
        'showOnClick',
        'showOnHover',
        'showTooltipWhenDisabled',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strips',
        'subGridConfigs',
        'syncMask',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'trackMouse',
        'trapFocus',
        'ui',
        'weight'
    ];
    BryntumGridBaseComponent.bryntumProps = BryntumGridBaseComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'columnLines',
        'content',
        'data',
        'dataset',
        'disabled',
        'emptyText',
        'enableUndoRedoKeys',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'longPressTime',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'rowHeight',
        'scrollable',
        'selectedCell',
        'selectedCells',
        'selectedRecord',
        'selectedRecords',
        'selectedRows',
        'state',
        'store',
        'strictRecordMapping',
        'title',
        'tools',
        'tooltip',
        'transitionDuration',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumGridBaseComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumGridBaseComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumGridBaseComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumGridBaseComponent, selector: "bryntum-grid-base", inputs: { adopt: "adopt", align: "align", allowOver: "allowOver", anchor: "anchor", anchorToTarget: "anchorToTarget", animateRemovingRows: "animateRemovingRows", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoClose: "autoClose", autoHeight: "autoHeight", autoShow: "autoShow", autoUpdateRecord: "autoUpdateRecord", bbar: "bbar", bodyCls: "bodyCls", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", closable: "closable", closeAction: "closeAction", collapsed: "collapsed", collapsible: "collapsible", columns: "columns", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", contextMenuTriggerEvent: "contextMenuTriggerEvent", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaultRegion: "defaultRegion", defaults: "defaults", destroyStore: "destroyStore", disableGridRowModelWarning: "disableGridRowModelWarning", dismissDelay: "dismissDelay", dock: "dock", draggable: "draggable", enableSticky: "enableSticky", enableTextSelection: "enableTextSelection", features: "features", fillLastColumn: "fillLastColumn", fixedRowHeight: "fixedRowHeight", floating: "floating", focusOnToFront: "focusOnToFront", footer: "footer", forElement: "forElement", forSelector: "forSelector", fullRowRefresh: "fullRowRefresh", getHtml: "getHtml", getRowHeight: "getRowHeight", header: "header", hideAnimation: "hideAnimation", hideDelay: "hideDelay", hideHeaders: "hideHeaders", hideOnDelegateChange: "hideOnDelegateChange", hideWhenEmpty: "hideWhenEmpty", hoverDelay: "hoverDelay", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", keyMap: "keyMap", lazyItems: "lazyItems", listeners: "listeners", loadingMsg: "loadingMsg", loadMask: "loadMask", loadMaskDefaults: "loadMaskDefaults", loadMaskError: "loadMaskError", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maximizable: "maximizable", maximized: "maximized", modal: "modal", monitorResize: "monitorResize", mouseOffsetX: "mouseOffsetX", mouseOffsetY: "mouseOffsetY", namedItems: "namedItems", owner: "owner", plugins: "plugins", positioned: "positioned", preserveFocusOnDatasetChange: "preserveFocusOnDatasetChange", preserveScrollOnDatasetChange: "preserveScrollOnDatasetChange", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", resizeToFitIncludesHeader: "resizeToFitIncludesHeader", responsiveLevels: "responsiveLevels", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", scrollerClass: "scrollerClass", scrollManager: "scrollManager", selectionMode: "selectionMode", showAnimation: "showAnimation", showDirty: "showDirty", showOnClick: "showOnClick", showOnHover: "showOnHover", showTooltipWhenDisabled: "showTooltipWhenDisabled", stateful: "stateful", statefulEvents: "statefulEvents", stateId: "stateId", stateProvider: "stateProvider", strips: "strips", subGridConfigs: "subGridConfigs", syncMask: "syncMask", tab: "tab", tag: "tag", tbar: "tbar", textAlign: "textAlign", textContent: "textContent", trackMouse: "trackMouse", trapFocus: "trapFocus", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", columnLines: "columnLines", content: "content", data: "data", dataset: "dataset", disabled: "disabled", emptyText: "emptyText", enableUndoRedoKeys: "enableUndoRedoKeys", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", longPressTime: "longPressTime", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", rowHeight: "rowHeight", scrollable: "scrollable", store: "store", strictRecordMapping: "strictRecordMapping", title: "title", tools: "tools", tooltip: "tooltip", transitionDuration: "transitionDuration", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", selectedCell: "selectedCell", selectedCells: "selectedCells", selectedRecord: "selectedRecord", selectedRecords: "selectedRecords", selectedRows: "selectedRows", state: "state", type: "type", values: "values", cellCopyPasteFeature: "cellCopyPasteFeature", cellEditFeature: "cellEditFeature", cellMenuFeature: "cellMenuFeature", cellTooltipFeature: "cellTooltipFeature", columnAutoWidthFeature: "columnAutoWidthFeature", columnDragToolbarFeature: "columnDragToolbarFeature", columnPickerFeature: "columnPickerFeature", columnRenameFeature: "columnRenameFeature", columnReorderFeature: "columnReorderFeature", columnResizeFeature: "columnResizeFeature", excelExporterFeature: "excelExporterFeature", fillHandleFeature: "fillHandleFeature", filterFeature: "filterFeature", filterBarFeature: "filterBarFeature", groupFeature: "groupFeature", groupSummaryFeature: "groupSummaryFeature", headerMenuFeature: "headerMenuFeature", mergeCellsFeature: "mergeCellsFeature", multipageFeature: "multipageFeature", multipageverticalFeature: "multipageverticalFeature", pdfExportFeature: "pdfExportFeature", quickFindFeature: "quickFindFeature", regionResizeFeature: "regionResizeFeature", rowCopyPasteFeature: "rowCopyPasteFeature", rowExpanderFeature: "rowExpanderFeature", rowReorderFeature: "rowReorderFeature", searchFeature: "searchFeature", singlepageFeature: "singlepageFeature", sortFeature: "sortFeature", stickyCellsFeature: "stickyCellsFeature", stripeFeature: "stripeFeature", summaryFeature: "summaryFeature", treeFeature: "treeFeature", treeGroupFeature: "treeGroupFeature" }, outputs: { onBeforeCancelCellEdit: "onBeforeCancelCellEdit", onBeforeCellDelete: "onBeforeCellDelete", onBeforeCellEditStart: "onBeforeCellEditStart", onBeforeClose: "onBeforeClose", onBeforeColumnDragStart: "onBeforeColumnDragStart", onBeforeColumnDropFinalize: "onBeforeColumnDropFinalize", onBeforeCopy: "onBeforeCopy", onBeforeDestroy: "onBeforeDestroy", onBeforeFinishCellEdit: "onBeforeFinishCellEdit", onBeforeHide: "onBeforeHide", onBeforePaste: "onBeforePaste", onBeforePdfExport: "onBeforePdfExport", onBeforeRenderRow: "onBeforeRenderRow", onBeforeRenderRows: "onBeforeRenderRows", onBeforeSelectionChange: "onBeforeSelectionChange", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onBeforeToggleGroup: "onBeforeToggleGroup", onBeforeToggleNode: "onBeforeToggleNode", onCancelCellEdit: "onCancelCellEdit", onCatchAll: "onCatchAll", onCellClick: "onCellClick", onCellContextMenu: "onCellContextMenu", onCellDblClick: "onCellDblClick", onCellMenuBeforeShow: "onCellMenuBeforeShow", onCellMenuItem: "onCellMenuItem", onCellMenuShow: "onCellMenuShow", onCellMenuToggleItem: "onCellMenuToggleItem", onCellMouseOut: "onCellMouseOut", onCellMouseOver: "onCellMouseOver", onCollapseNode: "onCollapseNode", onColumnDrag: "onColumnDrag", onColumnDragStart: "onColumnDragStart", onColumnDrop: "onColumnDrop", onContextMenuItem: "onContextMenuItem", onContextMenuToggleItem: "onContextMenuToggleItem", onCopy: "onCopy", onDataChange: "onDataChange", onDestroy: "onDestroy", onDragSelecting: "onDragSelecting", onExpandNode: "onExpandNode", onFinishCellEdit: "onFinishCellEdit", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onGridRowAbort: "onGridRowAbort", onGridRowBeforeDragStart: "onGridRowBeforeDragStart", onGridRowBeforeDropFinalize: "onGridRowBeforeDropFinalize", onGridRowDrag: "onGridRowDrag", onGridRowDragStart: "onGridRowDragStart", onGridRowDrop: "onGridRowDrop", onHeaderMenuBeforeShow: "onHeaderMenuBeforeShow", onHeaderMenuItem: "onHeaderMenuItem", onHeaderMenuShow: "onHeaderMenuShow", onHeaderMenuToggleItem: "onHeaderMenuToggleItem", onHide: "onHide", onMouseOut: "onMouseOut", onMouseOver: "onMouseOver", onPaint: "onPaint", onPaste: "onPaste", onPdfExport: "onPdfExport", onPointerOver: "onPointerOver", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onRenderRow: "onRenderRow", onRenderRows: "onRenderRows", onResize: "onResize", onResponsive: "onResponsive", onScroll: "onScroll", onSelectionChange: "onSelectionChange", onSelectionModeChange: "onSelectionModeChange", onShow: "onShow", onStartCellEdit: "onStartCellEdit", onSubGridCollapse: "onSubGridCollapse", onSubGridExpand: "onSubGridExpand", onToggleGroup: "onToggleGroup", onToggleNode: "onToggleNode", onToolClick: "onToolClick" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumGridBaseComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-grid-base',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], allowOver: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], anchorToTarget: [{
                    type: i0.Input
                }], animateRemovingRows: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoClose: [{
                    type: i0.Input
                }], autoHeight: [{
                    type: i0.Input
                }], autoShow: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bbar: [{
                    type: i0.Input
                }], bodyCls: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], closable: [{
                    type: i0.Input
                }], closeAction: [{
                    type: i0.Input
                }], collapsed: [{
                    type: i0.Input
                }], collapsible: [{
                    type: i0.Input
                }], columns: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], contextMenuTriggerEvent: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaultRegion: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], destroyStore: [{
                    type: i0.Input
                }], disableGridRowModelWarning: [{
                    type: i0.Input
                }], dismissDelay: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], enableSticky: [{
                    type: i0.Input
                }], enableTextSelection: [{
                    type: i0.Input
                }], features: [{
                    type: i0.Input
                }], fillLastColumn: [{
                    type: i0.Input
                }], fixedRowHeight: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], focusOnToFront: [{
                    type: i0.Input
                }], footer: [{
                    type: i0.Input
                }], forElement: [{
                    type: i0.Input
                }], forSelector: [{
                    type: i0.Input
                }], fullRowRefresh: [{
                    type: i0.Input
                }], getHtml: [{
                    type: i0.Input
                }], getRowHeight: [{
                    type: i0.Input
                }], header: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideDelay: [{
                    type: i0.Input
                }], hideHeaders: [{
                    type: i0.Input
                }], hideOnDelegateChange: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], hoverDelay: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], keyMap: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], loadingMsg: [{
                    type: i0.Input
                }], loadMask: [{
                    type: i0.Input
                }], loadMaskDefaults: [{
                    type: i0.Input
                }], loadMaskError: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maximizable: [{
                    type: i0.Input
                }], maximized: [{
                    type: i0.Input
                }], modal: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], mouseOffsetX: [{
                    type: i0.Input
                }], mouseOffsetY: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], plugins: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preserveFocusOnDatasetChange: [{
                    type: i0.Input
                }], preserveScrollOnDatasetChange: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], resizeToFitIncludesHeader: [{
                    type: i0.Input
                }], responsiveLevels: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], scrollerClass: [{
                    type: i0.Input
                }], scrollManager: [{
                    type: i0.Input
                }], selectionMode: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showDirty: [{
                    type: i0.Input
                }], showOnClick: [{
                    type: i0.Input
                }], showOnHover: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], stateful: [{
                    type: i0.Input
                }], statefulEvents: [{
                    type: i0.Input
                }], stateId: [{
                    type: i0.Input
                }], stateProvider: [{
                    type: i0.Input
                }], strips: [{
                    type: i0.Input
                }], subGridConfigs: [{
                    type: i0.Input
                }], syncMask: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], tbar: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], trackMouse: [{
                    type: i0.Input
                }], trapFocus: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], columnLines: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], data: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], emptyText: [{
                    type: i0.Input
                }], enableUndoRedoKeys: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], longPressTime: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], rowHeight: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], tools: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], transitionDuration: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], selectedCell: [{
                    type: i0.Input
                }], selectedCells: [{
                    type: i0.Input
                }], selectedRecord: [{
                    type: i0.Input
                }], selectedRecords: [{
                    type: i0.Input
                }], selectedRows: [{
                    type: i0.Input
                }], state: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeCancelCellEdit: [{
                    type: i0.Output
                }], onBeforeCellDelete: [{
                    type: i0.Output
                }], onBeforeCellEditStart: [{
                    type: i0.Output
                }], onBeforeClose: [{
                    type: i0.Output
                }], onBeforeColumnDragStart: [{
                    type: i0.Output
                }], onBeforeColumnDropFinalize: [{
                    type: i0.Output
                }], onBeforeCopy: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeFinishCellEdit: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforePaste: [{
                    type: i0.Output
                }], onBeforePdfExport: [{
                    type: i0.Output
                }], onBeforeRenderRow: [{
                    type: i0.Output
                }], onBeforeRenderRows: [{
                    type: i0.Output
                }], onBeforeSelectionChange: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onBeforeToggleGroup: [{
                    type: i0.Output
                }], onBeforeToggleNode: [{
                    type: i0.Output
                }], onCancelCellEdit: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onCellClick: [{
                    type: i0.Output
                }], onCellContextMenu: [{
                    type: i0.Output
                }], onCellDblClick: [{
                    type: i0.Output
                }], onCellMenuBeforeShow: [{
                    type: i0.Output
                }], onCellMenuItem: [{
                    type: i0.Output
                }], onCellMenuShow: [{
                    type: i0.Output
                }], onCellMenuToggleItem: [{
                    type: i0.Output
                }], onCellMouseOut: [{
                    type: i0.Output
                }], onCellMouseOver: [{
                    type: i0.Output
                }], onCollapseNode: [{
                    type: i0.Output
                }], onColumnDrag: [{
                    type: i0.Output
                }], onColumnDragStart: [{
                    type: i0.Output
                }], onColumnDrop: [{
                    type: i0.Output
                }], onContextMenuItem: [{
                    type: i0.Output
                }], onContextMenuToggleItem: [{
                    type: i0.Output
                }], onCopy: [{
                    type: i0.Output
                }], onDataChange: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onDragSelecting: [{
                    type: i0.Output
                }], onExpandNode: [{
                    type: i0.Output
                }], onFinishCellEdit: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onGridRowAbort: [{
                    type: i0.Output
                }], onGridRowBeforeDragStart: [{
                    type: i0.Output
                }], onGridRowBeforeDropFinalize: [{
                    type: i0.Output
                }], onGridRowDrag: [{
                    type: i0.Output
                }], onGridRowDragStart: [{
                    type: i0.Output
                }], onGridRowDrop: [{
                    type: i0.Output
                }], onHeaderMenuBeforeShow: [{
                    type: i0.Output
                }], onHeaderMenuItem: [{
                    type: i0.Output
                }], onHeaderMenuShow: [{
                    type: i0.Output
                }], onHeaderMenuToggleItem: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onMouseOut: [{
                    type: i0.Output
                }], onMouseOver: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onPaste: [{
                    type: i0.Output
                }], onPdfExport: [{
                    type: i0.Output
                }], onPointerOver: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onRenderRow: [{
                    type: i0.Output
                }], onRenderRows: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onResponsive: [{
                    type: i0.Output
                }], onScroll: [{
                    type: i0.Output
                }], onSelectionChange: [{
                    type: i0.Output
                }], onSelectionModeChange: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onStartCellEdit: [{
                    type: i0.Output
                }], onSubGridCollapse: [{
                    type: i0.Output
                }], onSubGridExpand: [{
                    type: i0.Output
                }], onToggleGroup: [{
                    type: i0.Output
                }], onToggleNode: [{
                    type: i0.Output
                }], onToolClick: [{
                    type: i0.Output
                }], cellCopyPasteFeature: [{
                    type: i0.Input
                }], cellEditFeature: [{
                    type: i0.Input
                }], cellMenuFeature: [{
                    type: i0.Input
                }], cellTooltipFeature: [{
                    type: i0.Input
                }], columnAutoWidthFeature: [{
                    type: i0.Input
                }], columnDragToolbarFeature: [{
                    type: i0.Input
                }], columnPickerFeature: [{
                    type: i0.Input
                }], columnRenameFeature: [{
                    type: i0.Input
                }], columnReorderFeature: [{
                    type: i0.Input
                }], columnResizeFeature: [{
                    type: i0.Input
                }], excelExporterFeature: [{
                    type: i0.Input
                }], fillHandleFeature: [{
                    type: i0.Input
                }], filterFeature: [{
                    type: i0.Input
                }], filterBarFeature: [{
                    type: i0.Input
                }], groupFeature: [{
                    type: i0.Input
                }], groupSummaryFeature: [{
                    type: i0.Input
                }], headerMenuFeature: [{
                    type: i0.Input
                }], mergeCellsFeature: [{
                    type: i0.Input
                }], multipageFeature: [{
                    type: i0.Input
                }], multipageverticalFeature: [{
                    type: i0.Input
                }], pdfExportFeature: [{
                    type: i0.Input
                }], quickFindFeature: [{
                    type: i0.Input
                }], regionResizeFeature: [{
                    type: i0.Input
                }], rowCopyPasteFeature: [{
                    type: i0.Input
                }], rowExpanderFeature: [{
                    type: i0.Input
                }], rowReorderFeature: [{
                    type: i0.Input
                }], searchFeature: [{
                    type: i0.Input
                }], singlepageFeature: [{
                    type: i0.Input
                }], sortFeature: [{
                    type: i0.Input
                }], stickyCellsFeature: [{
                    type: i0.Input
                }], stripeFeature: [{
                    type: i0.Input
                }], summaryFeature: [{
                    type: i0.Input
                }], treeFeature: [{
                    type: i0.Input
                }], treeGroupFeature: [{
                    type: i0.Input
                }] } });

    var BryntumGridFieldFilterPickerComponent = /** @class */ (function () {
        function BryntumGridFieldFilterPickerComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumGridFieldFilterPickerComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumGridFieldFilterPickerComponent.instanceClass, instanceName = BryntumGridFieldFilterPickerComponent.instanceName, bryntumConfigs = BryntumGridFieldFilterPickerComponent.bryntumConfigs, bryntumEvents = BryntumGridFieldFilterPickerComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumGridFieldFilterPickerComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumGridFieldFilterPickerComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumGridFieldFilterPickerComponent.bryntumConfigsOnly, bryntumProps = BryntumGridFieldFilterPickerComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumGridFieldFilterPickerComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumGridFieldFilterPickerComponent;
    }());
    BryntumGridFieldFilterPickerComponent.instanceClass = calendar.GridFieldFilterPicker;
    BryntumGridFieldFilterPickerComponent.instanceName = 'GridFieldFilterPicker';
    BryntumGridFieldFilterPickerComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow'
    ];
    BryntumGridFieldFilterPickerComponent.bryntumFeatureNames = [];
    BryntumGridFieldFilterPickerComponent.bryntumConfigs = BryntumGridFieldFilterPickerComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'allowedFieldNames',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'dateFormat',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'fields',
        'filter',
        'flex',
        'floating',
        'getValueFieldConfig',
        'grid',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'namedItems',
        'operators',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'propertyFieldConfig',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'store',
        'strictRecordMapping',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'tooltip',
        'ui',
        'valueFieldPlaceholders',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumGridFieldFilterPickerComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'allowedFieldNames',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'dateFormat',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'fields',
        'filter',
        'floating',
        'getValueFieldConfig',
        'grid',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'namedItems',
        'operators',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'propertyFieldConfig',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'store',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'ui',
        'valueFieldPlaceholders',
        'weight'
    ];
    BryntumGridFieldFilterPickerComponent.bryntumProps = BryntumGridFieldFilterPickerComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'strictRecordMapping',
        'tooltip',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumGridFieldFilterPickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumGridFieldFilterPickerComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumGridFieldFilterPickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumGridFieldFilterPickerComponent, selector: "bryntum-grid-field-filter-picker", inputs: { adopt: "adopt", align: "align", allowedFieldNames: "allowedFieldNames", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", dateFormat: "dateFormat", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", fields: "fields", filter: "filter", floating: "floating", getValueFieldConfig: "getValueFieldConfig", grid: "grid", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", namedItems: "namedItems", operators: "operators", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", propertyFieldConfig: "propertyFieldConfig", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", store: "store", tab: "tab", tag: "tag", textAlign: "textAlign", textContent: "textContent", title: "title", ui: "ui", valueFieldPlaceholders: "valueFieldPlaceholders", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", type: "type", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumGridFieldFilterPickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-grid-field-filter-picker',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], allowedFieldNames: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], dateFormat: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], fields: [{
                    type: i0.Input
                }], filter: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], getValueFieldConfig: [{
                    type: i0.Input
                }], grid: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], operators: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], propertyFieldConfig: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], valueFieldPlaceholders: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }] } });

    var BryntumGridFieldFilterPickerGroupComponent = /** @class */ (function () {
        function BryntumGridFieldFilterPickerGroupComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumGridFieldFilterPickerGroupComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumGridFieldFilterPickerGroupComponent.instanceClass, instanceName = BryntumGridFieldFilterPickerGroupComponent.instanceName, bryntumConfigs = BryntumGridFieldFilterPickerGroupComponent.bryntumConfigs, bryntumEvents = BryntumGridFieldFilterPickerGroupComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumGridFieldFilterPickerGroupComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumGridFieldFilterPickerGroupComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumGridFieldFilterPickerGroupComponent.bryntumConfigsOnly, bryntumProps = BryntumGridFieldFilterPickerGroupComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumGridFieldFilterPickerGroupComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumGridFieldFilterPickerGroupComponent;
    }());
    BryntumGridFieldFilterPickerGroupComponent.instanceClass = calendar.GridFieldFilterPickerGroup;
    BryntumGridFieldFilterPickerGroupComponent.instanceName = 'GridFieldFilterPickerGroup';
    BryntumGridFieldFilterPickerGroupComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow'
    ];
    BryntumGridFieldFilterPickerGroupComponent.bryntumFeatureNames = [];
    BryntumGridFieldFilterPickerGroupComponent.bryntumConfigs = BryntumGridFieldFilterPickerGroupComponent.bryntumFeatureNames.concat([
        'addFilterButtonText',
        'adopt',
        'align',
        'alignSelf',
        'allowedFieldNames',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'canDeleteFilter',
        'canManageFilter',
        'centered',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'dateFormat',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'fields',
        'filters',
        'flex',
        'floating',
        'getFieldFilterPickerConfig',
        'grid',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'limitToProperty',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'namedItems',
        'operators',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAddFilterButton',
        'showAnimation',
        'showTooltipWhenDisabled',
        'store',
        'strictRecordMapping',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'tooltip',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumGridFieldFilterPickerGroupComponent.bryntumConfigsOnly = [
        'addFilterButtonText',
        'adopt',
        'align',
        'allowedFieldNames',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'canDeleteFilter',
        'canManageFilter',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'dateFormat',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'fields',
        'filters',
        'floating',
        'getFieldFilterPickerConfig',
        'grid',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'limitToProperty',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'namedItems',
        'operators',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAddFilterButton',
        'showAnimation',
        'showTooltipWhenDisabled',
        'store',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'ui',
        'weight'
    ];
    BryntumGridFieldFilterPickerGroupComponent.bryntumProps = BryntumGridFieldFilterPickerGroupComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'strictRecordMapping',
        'tooltip',
        'type',
        'value',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumGridFieldFilterPickerGroupComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumGridFieldFilterPickerGroupComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumGridFieldFilterPickerGroupComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumGridFieldFilterPickerGroupComponent, selector: "bryntum-grid-field-filter-picker-group", inputs: { addFilterButtonText: "addFilterButtonText", adopt: "adopt", align: "align", allowedFieldNames: "allowedFieldNames", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", canDeleteFilter: "canDeleteFilter", canManageFilter: "canManageFilter", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", dateFormat: "dateFormat", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", fields: "fields", filters: "filters", floating: "floating", getFieldFilterPickerConfig: "getFieldFilterPickerConfig", grid: "grid", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", limitToProperty: "limitToProperty", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", namedItems: "namedItems", operators: "operators", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAddFilterButton: "showAddFilterButton", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", store: "store", tab: "tab", tag: "tag", textAlign: "textAlign", textContent: "textContent", title: "title", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", type: "type", value: "value", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumGridFieldFilterPickerGroupComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-grid-field-filter-picker-group',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { addFilterButtonText: [{
                    type: i0.Input
                }], adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], allowedFieldNames: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], canDeleteFilter: [{
                    type: i0.Input
                }], canManageFilter: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], dateFormat: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], fields: [{
                    type: i0.Input
                }], filters: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], getFieldFilterPickerConfig: [{
                    type: i0.Input
                }], grid: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], limitToProperty: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], operators: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAddFilterButton: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }] } });

    var BryntumListComponent = /** @class */ (function () {
        function BryntumListComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeItem = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onItem = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumListComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumListComponent.instanceClass, instanceName = BryntumListComponent.instanceName, bryntumConfigs = BryntumListComponent.bryntumConfigs, bryntumEvents = BryntumListComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumListComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumListComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumListComponent.bryntumConfigsOnly, bryntumProps = BryntumListComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumListComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumListComponent;
    }());
    BryntumListComponent.instanceClass = calendar.List;
    BryntumListComponent.instanceName = 'List';
    BryntumListComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeItem',
        'onBeforeShow',
        'onCatchAll',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onItem',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow'
    ];
    BryntumListComponent.bryntumFeatureNames = [];
    BryntumListComponent.bryntumConfigs = BryntumListComponent.bryntumFeatureNames.concat([
        'activateOnMouseover',
        'adopt',
        'align',
        'alignSelf',
        'allowGroupSelect',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'displayField',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'getItemCls',
        'getItemStyle',
        'groupHeaderTpl',
        'height',
        'hidden',
        'hideAnimation',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'items',
        'itemTpl',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'multiSelect',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'selectAllItem',
        'selected',
        'showAnimation',
        'showTooltipWhenDisabled',
        'store',
        'tab',
        'tag',
        'textAlign',
        'title',
        'toggleAllIfCtrlPressed',
        'tooltip',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumListComponent.bryntumConfigsOnly = [
        'activateOnMouseover',
        'adopt',
        'align',
        'allowGroupSelect',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'displayField',
        'dock',
        'draggable',
        'floating',
        'getItemCls',
        'getItemStyle',
        'groupHeaderTpl',
        'hideAnimation',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemTpl',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'multiSelect',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'selectAllItem',
        'selected',
        'showAnimation',
        'showTooltipWhenDisabled',
        'store',
        'tab',
        'tag',
        'textAlign',
        'title',
        'toggleAllIfCtrlPressed',
        'ui',
        'weight'
    ];
    BryntumListComponent.bryntumProps = BryntumListComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'items',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'tooltip',
        'type',
        'width',
        'x',
        'y'
    ]);
    BryntumListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumListComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumListComponent, selector: "bryntum-list", inputs: { activateOnMouseover: "activateOnMouseover", adopt: "adopt", align: "align", allowGroupSelect: "allowGroupSelect", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", displayField: "displayField", dock: "dock", draggable: "draggable", floating: "floating", getItemCls: "getItemCls", getItemStyle: "getItemStyle", groupHeaderTpl: "groupHeaderTpl", hideAnimation: "hideAnimation", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemTpl: "itemTpl", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", multiSelect: "multiSelect", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", selectAllItem: "selectAllItem", selected: "selected", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", store: "store", tab: "tab", tag: "tag", textAlign: "textAlign", title: "title", toggleAllIfCtrlPressed: "toggleAllIfCtrlPressed", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", type: "type" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeItem: "onBeforeItem", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onItem: "onItem", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-list',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { activateOnMouseover: [{
                    type: i0.Input
                }], adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], allowGroupSelect: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], displayField: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], getItemCls: [{
                    type: i0.Input
                }], getItemStyle: [{
                    type: i0.Input
                }], groupHeaderTpl: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemTpl: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], multiSelect: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], selectAllItem: [{
                    type: i0.Input
                }], selected: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], toggleAllIfCtrlPressed: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeItem: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onItem: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }] } });

    var BryntumMenuComponent = /** @class */ (function () {
        function BryntumMenuComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeClose = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onItem = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onToggle = new i0.EventEmitter();
            this.onToolClick = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumMenuComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumMenuComponent.instanceClass, instanceName = BryntumMenuComponent.instanceName, bryntumConfigs = BryntumMenuComponent.bryntumConfigs, bryntumEvents = BryntumMenuComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumMenuComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumMenuComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumMenuComponent.bryntumConfigsOnly, bryntumProps = BryntumMenuComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumMenuComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumMenuComponent;
    }());
    BryntumMenuComponent.instanceClass = calendar.Menu;
    BryntumMenuComponent.instanceName = 'Menu';
    BryntumMenuComponent.bryntumEvents = [
        'onBeforeClose',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onItem',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onToggle',
        'onToolClick'
    ];
    BryntumMenuComponent.bryntumFeatureNames = [];
    BryntumMenuComponent.bryntumConfigs = BryntumMenuComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoShow',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'closable',
        'closeAction',
        'cls',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'focusOnHover',
        'focusOnToFront',
        'footer',
        'forElement',
        'header',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maximizable',
        'maximized',
        'maxWidth',
        'minHeight',
        'minWidth',
        'modal',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showOnClick',
        'showTooltipWhenDisabled',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strictRecordMapping',
        'strips',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'title',
        'tools',
        'tooltip',
        'trapFocus',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumMenuComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoShow',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'closable',
        'closeAction',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'floating',
        'focusOnHover',
        'focusOnToFront',
        'footer',
        'forElement',
        'header',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maximizable',
        'modal',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showOnClick',
        'showTooltipWhenDisabled',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strips',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'trapFocus',
        'ui',
        'weight'
    ];
    BryntumMenuComponent.bryntumProps = BryntumMenuComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maximized',
        'maxWidth',
        'minHeight',
        'minWidth',
        'parentMenu',
        'readOnly',
        'record',
        'scrollable',
        'selectedElement',
        'state',
        'strictRecordMapping',
        'title',
        'tools',
        'tooltip',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumMenuComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumMenuComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumMenuComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumMenuComponent, selector: "bryntum-menu", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoClose: "autoClose", autoShow: "autoShow", autoUpdateRecord: "autoUpdateRecord", bbar: "bbar", bodyCls: "bodyCls", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", closable: "closable", closeAction: "closeAction", collapsed: "collapsed", collapsible: "collapsible", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", floating: "floating", focusOnHover: "focusOnHover", focusOnToFront: "focusOnToFront", footer: "footer", forElement: "forElement", header: "header", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maximizable: "maximizable", modal: "modal", monitorResize: "monitorResize", namedItems: "namedItems", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showOnClick: "showOnClick", showTooltipWhenDisabled: "showTooltipWhenDisabled", stateful: "stateful", statefulEvents: "statefulEvents", stateId: "stateId", stateProvider: "stateProvider", strips: "strips", tab: "tab", tag: "tag", tbar: "tbar", textAlign: "textAlign", textContent: "textContent", trapFocus: "trapFocus", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maximized: "maximized", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", title: "title", tools: "tools", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", parentMenu: "parentMenu", selectedElement: "selectedElement", state: "state", type: "type", values: "values" }, outputs: { onBeforeClose: "onBeforeClose", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onItem: "onItem", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onToggle: "onToggle", onToolClick: "onToolClick" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumMenuComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-menu',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoClose: [{
                    type: i0.Input
                }], autoShow: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bbar: [{
                    type: i0.Input
                }], bodyCls: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], closable: [{
                    type: i0.Input
                }], closeAction: [{
                    type: i0.Input
                }], collapsed: [{
                    type: i0.Input
                }], collapsible: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], focusOnHover: [{
                    type: i0.Input
                }], focusOnToFront: [{
                    type: i0.Input
                }], footer: [{
                    type: i0.Input
                }], forElement: [{
                    type: i0.Input
                }], header: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maximizable: [{
                    type: i0.Input
                }], modal: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showOnClick: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], stateful: [{
                    type: i0.Input
                }], statefulEvents: [{
                    type: i0.Input
                }], stateId: [{
                    type: i0.Input
                }], stateProvider: [{
                    type: i0.Input
                }], strips: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], tbar: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], trapFocus: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maximized: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], tools: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], parentMenu: [{
                    type: i0.Input
                }], selectedElement: [{
                    type: i0.Input
                }], state: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeClose: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onItem: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onToggle: [{
                    type: i0.Output
                }], onToolClick: [{
                    type: i0.Output
                }] } });

    var BryntumModeSelectorComponent = /** @class */ (function () {
        function BryntumModeSelectorComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumModeSelectorComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumModeSelectorComponent.instanceClass, instanceName = BryntumModeSelectorComponent.instanceName, bryntumConfigs = BryntumModeSelectorComponent.bryntumConfigs, bryntumEvents = BryntumModeSelectorComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumModeSelectorComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumModeSelectorComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumModeSelectorComponent.bryntumConfigsOnly, bryntumProps = BryntumModeSelectorComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumModeSelectorComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumModeSelectorComponent;
    }());
    BryntumModeSelectorComponent.instanceClass = calendar.ModeSelector;
    BryntumModeSelectorComponent.instanceName = 'ModeSelector';
    BryntumModeSelectorComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow'
    ];
    BryntumModeSelectorComponent.bryntumFeatureNames = [];
    BryntumModeSelectorComponent.bryntumConfigs = BryntumModeSelectorComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'button',
        'buttonBar',
        'callOnFunctions',
        'centered',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minifiable',
        'minified',
        'minWidth',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'strictRecordMapping',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'tooltip',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumModeSelectorComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'button',
        'buttonBar',
        'callOnFunctions',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'minifiable',
        'minified',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'ui',
        'weight'
    ];
    BryntumModeSelectorComponent.bryntumProps = BryntumModeSelectorComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'strictRecordMapping',
        'tooltip',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumModeSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumModeSelectorComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumModeSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumModeSelectorComponent, selector: "bryntum-mode-selector", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bubbleEvents: "bubbleEvents", button: "button", buttonBar: "buttonBar", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", minifiable: "minifiable", minified: "minified", monitorResize: "monitorResize", namedItems: "namedItems", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", tab: "tab", tag: "tag", textAlign: "textAlign", textContent: "textContent", title: "title", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", type: "type", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumModeSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-mode-selector',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], button: [{
                    type: i0.Input
                }], buttonBar: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], minifiable: [{
                    type: i0.Input
                }], minified: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }] } });

    var BryntumNumberFieldComponent = /** @class */ (function () {
        function BryntumNumberFieldComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumNumberFieldComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumNumberFieldComponent.instanceClass, instanceName = BryntumNumberFieldComponent.instanceName, bryntumConfigs = BryntumNumberFieldComponent.bryntumConfigs, bryntumEvents = BryntumNumberFieldComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumNumberFieldComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumNumberFieldComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumNumberFieldComponent.bryntumConfigsOnly, bryntumProps = BryntumNumberFieldComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumNumberFieldComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumNumberFieldComponent;
    }());
    BryntumNumberFieldComponent.instanceClass = calendar.NumberField;
    BryntumNumberFieldComponent.instanceName = 'NumberField';
    BryntumNumberFieldComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onTrigger'
    ];
    BryntumNumberFieldComponent.bryntumFeatureNames = [];
    BryntumNumberFieldComponent.bryntumConfigs = BryntumNumberFieldComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'changeOnSpin',
        'clearable',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'dataset',
        'decimalPrecision',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'editable',
        'extraData',
        'flex',
        'floating',
        'format',
        'height',
        'hidden',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'keyStrokeChangeDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'largeStep',
        'leadingZeroes',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'max',
        'maxHeight',
        'maxWidth',
        'min',
        'minHeight',
        'minWidth',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'step',
        'tab',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'triggers',
        'ui',
        'validateOnInput',
        'value',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumNumberFieldComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'changeOnSpin',
        'clearable',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'decimalPrecision',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'format',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'keyStrokeChangeDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'largeStep',
        'leadingZeroes',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'max',
        'min',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'textAlign',
        'title',
        'ui',
        'validateOnInput',
        'weight'
    ];
    BryntumNumberFieldComponent.bryntumProps = BryntumNumberFieldComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'step',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumNumberFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumNumberFieldComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumNumberFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumNumberFieldComponent, selector: "bryntum-number-field", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoComplete: "autoComplete", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", changeOnSpin: "changeOnSpin", clearable: "clearable", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", decimalPrecision: "decimalPrecision", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", format: "format", hideAnimation: "hideAnimation", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", keyStrokeChangeDelay: "keyStrokeChangeDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", largeStep: "largeStep", leadingZeroes: "leadingZeroes", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", max: "max", min: "min", monitorResize: "monitorResize", name: "name", owner: "owner", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tag: "tag", textAlign: "textAlign", title: "title", ui: "ui", validateOnInput: "validateOnInput", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", step: "step", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumNumberFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-number-field',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], changeOnSpin: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], decimalPrecision: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], format: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], largeStep: [{
                    type: i0.Input
                }], leadingZeroes: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], max: [{
                    type: i0.Input
                }], min: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], step: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumPagingToolbarComponent = /** @class */ (function () {
        function BryntumPagingToolbarComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumPagingToolbarComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumPagingToolbarComponent.instanceClass, instanceName = BryntumPagingToolbarComponent.instanceName, bryntumConfigs = BryntumPagingToolbarComponent.bryntumConfigs, bryntumEvents = BryntumPagingToolbarComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumPagingToolbarComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumPagingToolbarComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumPagingToolbarComponent.bryntumConfigsOnly, bryntumProps = BryntumPagingToolbarComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumPagingToolbarComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumPagingToolbarComponent;
    }());
    BryntumPagingToolbarComponent.instanceClass = calendar.PagingToolbar;
    BryntumPagingToolbarComponent.instanceName = 'PagingToolbar';
    BryntumPagingToolbarComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow'
    ];
    BryntumPagingToolbarComponent.bryntumFeatureNames = [];
    BryntumPagingToolbarComponent.bryntumConfigs = BryntumPagingToolbarComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'namedItems',
        'overflow',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'store',
        'strictRecordMapping',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'tools',
        'tooltip',
        'ui',
        'weight',
        'widgetCls',
        'width',
        'x',
        'y'
    ]);
    BryntumPagingToolbarComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'namedItems',
        'overflow',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'store',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'ui',
        'weight',
        'widgetCls'
    ];
    BryntumPagingToolbarComponent.bryntumProps = BryntumPagingToolbarComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'strictRecordMapping',
        'tools',
        'tooltip',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumPagingToolbarComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumPagingToolbarComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumPagingToolbarComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumPagingToolbarComponent, selector: "bryntum-paging-toolbar", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", namedItems: "namedItems", overflow: "overflow", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", store: "store", tab: "tab", tag: "tag", textAlign: "textAlign", textContent: "textContent", title: "title", ui: "ui", weight: "weight", widgetCls: "widgetCls", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", tools: "tools", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", type: "type", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumPagingToolbarComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-paging-toolbar',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], overflow: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], widgetCls: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], tools: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }] } });

    var BryntumPanelComponent = /** @class */ (function () {
        function BryntumPanelComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onToolClick = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumPanelComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumPanelComponent.instanceClass, instanceName = BryntumPanelComponent.instanceName, bryntumConfigs = BryntumPanelComponent.bryntumConfigs, bryntumEvents = BryntumPanelComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumPanelComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumPanelComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumPanelComponent.bryntumConfigsOnly, bryntumProps = BryntumPanelComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumPanelComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumPanelComponent;
    }());
    BryntumPanelComponent.instanceClass = calendar.Panel;
    BryntumPanelComponent.instanceName = 'Panel';
    BryntumPanelComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onToolClick'
    ];
    BryntumPanelComponent.bryntumFeatureNames = [];
    BryntumPanelComponent.bryntumConfigs = BryntumPanelComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'footer',
        'header',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strictRecordMapping',
        'strips',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'title',
        'tools',
        'tooltip',
        'trapFocus',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumPanelComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'floating',
        'footer',
        'header',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strips',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'trapFocus',
        'ui',
        'weight'
    ];
    BryntumPanelComponent.bryntumProps = BryntumPanelComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'state',
        'strictRecordMapping',
        'title',
        'tools',
        'tooltip',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumPanelComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumPanelComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumPanelComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumPanelComponent, selector: "bryntum-panel", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bbar: "bbar", bodyCls: "bodyCls", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", collapsed: "collapsed", collapsible: "collapsible", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", floating: "floating", footer: "footer", header: "header", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", namedItems: "namedItems", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", stateful: "stateful", statefulEvents: "statefulEvents", stateId: "stateId", stateProvider: "stateProvider", strips: "strips", tab: "tab", tag: "tag", tbar: "tbar", textAlign: "textAlign", textContent: "textContent", trapFocus: "trapFocus", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", title: "title", tools: "tools", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", state: "state", type: "type", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onToolClick: "onToolClick" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumPanelComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-panel',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bbar: [{
                    type: i0.Input
                }], bodyCls: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], collapsed: [{
                    type: i0.Input
                }], collapsible: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], footer: [{
                    type: i0.Input
                }], header: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], stateful: [{
                    type: i0.Input
                }], statefulEvents: [{
                    type: i0.Input
                }], stateId: [{
                    type: i0.Input
                }], stateProvider: [{
                    type: i0.Input
                }], strips: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], tbar: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], trapFocus: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], tools: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], state: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onToolClick: [{
                    type: i0.Output
                }] } });

    var BryntumPasswordFieldComponent = /** @class */ (function () {
        function BryntumPasswordFieldComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumPasswordFieldComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumPasswordFieldComponent.instanceClass, instanceName = BryntumPasswordFieldComponent.instanceName, bryntumConfigs = BryntumPasswordFieldComponent.bryntumConfigs, bryntumEvents = BryntumPasswordFieldComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumPasswordFieldComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumPasswordFieldComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumPasswordFieldComponent.bryntumConfigsOnly, bryntumProps = BryntumPasswordFieldComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumPasswordFieldComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumPasswordFieldComponent;
    }());
    BryntumPasswordFieldComponent.instanceClass = calendar.PasswordField;
    BryntumPasswordFieldComponent.instanceName = 'PasswordField';
    BryntumPasswordFieldComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onTrigger'
    ];
    BryntumPasswordFieldComponent.bryntumFeatureNames = [];
    BryntumPasswordFieldComponent.bryntumConfigs = BryntumPasswordFieldComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'editable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'keyStrokeChangeDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'triggers',
        'ui',
        'validateOnInput',
        'value',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumPasswordFieldComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'keyStrokeChangeDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'textAlign',
        'title',
        'ui',
        'validateOnInput',
        'weight'
    ];
    BryntumPasswordFieldComponent.bryntumProps = BryntumPasswordFieldComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumPasswordFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumPasswordFieldComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumPasswordFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumPasswordFieldComponent, selector: "bryntum-password-field", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoComplete: "autoComplete", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", clearable: "clearable", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", keyStrokeChangeDelay: "keyStrokeChangeDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", name: "name", owner: "owner", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tag: "tag", textAlign: "textAlign", title: "title", ui: "ui", validateOnInput: "validateOnInput", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumPasswordFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-password-field',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumProjectComboComponent = /** @class */ (function () {
        function BryntumProjectComboComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onSelect = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumProjectComboComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumProjectComboComponent.instanceClass, instanceName = BryntumProjectComboComponent.instanceName, bryntumConfigs = BryntumProjectComboComponent.bryntumConfigs, bryntumEvents = BryntumProjectComboComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumProjectComboComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumProjectComboComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumProjectComboComponent.bryntumConfigsOnly, bryntumProps = BryntumProjectComboComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumProjectComboComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumProjectComboComponent;
    }());
    BryntumProjectComboComponent.instanceClass = calendar.ProjectCombo;
    BryntumProjectComboComponent.instanceName = 'ProjectCombo';
    BryntumProjectComboComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onSelect',
        'onShow',
        'onTrigger'
    ];
    BryntumProjectComboComponent.bryntumFeatureNames = [];
    BryntumProjectComboComponent.bryntumConfigs = BryntumProjectComboComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoComplete',
        'autoExpand',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'caseSensitive',
        'centered',
        'chipView',
        'clearable',
        'clearTextOnPickerHide',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'createOnUnmatched',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'displayField',
        'displayValueRenderer',
        'dock',
        'draggable',
        'editable',
        'emptyText',
        'encodeFilterParams',
        'extraData',
        'filterOnEnter',
        'filterOperator',
        'filterParamName',
        'filterSelected',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'hidePickerOnSelect',
        'hideTrigger',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inlinePicker',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'items',
        'keyStrokeChangeDelay',
        'keyStrokeFilterDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listCls',
        'listeners',
        'listItemTpl',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxLength',
        'maxWidth',
        'minChars',
        'minHeight',
        'minLength',
        'minWidth',
        'monitorResize',
        'multiSelect',
        'multiValueSeparator',
        'name',
        'overlayAnchor',
        'owner',
        'picker',
        'pickerAlignElement',
        'pickerWidth',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'primaryFilter',
        'project',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'store',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'triggerAction',
        'triggers',
        'ui',
        'validateFilter',
        'validateOnInput',
        'value',
        'valueField',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumProjectComboComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoComplete',
        'autoExpand',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'caseSensitive',
        'centered',
        'chipView',
        'clearable',
        'clearTextOnPickerHide',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'createOnUnmatched',
        'defaultBindProperty',
        'displayField',
        'displayValueRenderer',
        'dock',
        'draggable',
        'emptyText',
        'encodeFilterParams',
        'filterOnEnter',
        'filterParamName',
        'filterSelected',
        'floating',
        'hideAnimation',
        'hidePickerOnSelect',
        'hideTrigger',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inlinePicker',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'items',
        'keyStrokeChangeDelay',
        'keyStrokeFilterDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listCls',
        'listeners',
        'listItemTpl',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maxLength',
        'minChars',
        'minLength',
        'monitorResize',
        'multiSelect',
        'multiValueSeparator',
        'name',
        'overlayAnchor',
        'owner',
        'picker',
        'pickerAlignElement',
        'pickerWidth',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'primaryFilter',
        'project',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'triggerAction',
        'ui',
        'validateFilter',
        'validateOnInput',
        'valueField',
        'weight'
    ];
    BryntumProjectComboComponent.bryntumProps = BryntumProjectComboComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'filterOperator',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'store',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumProjectComboComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumProjectComboComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumProjectComboComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumProjectComboComponent, selector: "bryntum-project-combo", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoClose: "autoClose", autoComplete: "autoComplete", autoExpand: "autoExpand", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", caseSensitive: "caseSensitive", centered: "centered", chipView: "chipView", clearable: "clearable", clearTextOnPickerHide: "clearTextOnPickerHide", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", createOnUnmatched: "createOnUnmatched", defaultBindProperty: "defaultBindProperty", displayField: "displayField", displayValueRenderer: "displayValueRenderer", dock: "dock", draggable: "draggable", emptyText: "emptyText", encodeFilterParams: "encodeFilterParams", filterOnEnter: "filterOnEnter", filterParamName: "filterParamName", filterSelected: "filterSelected", floating: "floating", hideAnimation: "hideAnimation", hidePickerOnSelect: "hidePickerOnSelect", hideTrigger: "hideTrigger", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inlinePicker: "inlinePicker", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", items: "items", keyStrokeChangeDelay: "keyStrokeChangeDelay", keyStrokeFilterDelay: "keyStrokeFilterDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listCls: "listCls", listeners: "listeners", listItemTpl: "listItemTpl", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxLength: "maxLength", minChars: "minChars", minLength: "minLength", monitorResize: "monitorResize", multiSelect: "multiSelect", multiValueSeparator: "multiValueSeparator", name: "name", overlayAnchor: "overlayAnchor", owner: "owner", picker: "picker", pickerAlignElement: "pickerAlignElement", pickerWidth: "pickerWidth", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", primaryFilter: "primaryFilter", project: "project", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tabIndex: "tabIndex", tag: "tag", textAlign: "textAlign", title: "title", triggerAction: "triggerAction", ui: "ui", validateFilter: "validateFilter", validateOnInput: "validateOnInput", valueField: "valueField", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", filterOperator: "filterOperator", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", store: "store", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onSelect: "onSelect", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumProjectComboComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-project-combo',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoClose: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoExpand: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], caseSensitive: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], chipView: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], clearTextOnPickerHide: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], createOnUnmatched: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], displayField: [{
                    type: i0.Input
                }], displayValueRenderer: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], emptyText: [{
                    type: i0.Input
                }], encodeFilterParams: [{
                    type: i0.Input
                }], filterOnEnter: [{
                    type: i0.Input
                }], filterParamName: [{
                    type: i0.Input
                }], filterSelected: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hidePickerOnSelect: [{
                    type: i0.Input
                }], hideTrigger: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inlinePicker: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], keyStrokeFilterDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listCls: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], listItemTpl: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maxLength: [{
                    type: i0.Input
                }], minChars: [{
                    type: i0.Input
                }], minLength: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], multiSelect: [{
                    type: i0.Input
                }], multiValueSeparator: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], overlayAnchor: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], picker: [{
                    type: i0.Input
                }], pickerAlignElement: [{
                    type: i0.Input
                }], pickerWidth: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], primaryFilter: [{
                    type: i0.Input
                }], project: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], triggerAction: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], validateFilter: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], valueField: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], filterOperator: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onSelect: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumProjectModelComponent = /** @class */ (function () {
        function BryntumProjectModelComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onChange = new i0.EventEmitter();
            this.onDataReady = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumProjectModelComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumProjectModelComponent.instanceClass, instanceName = BryntumProjectModelComponent.instanceName, bryntumConfigs = BryntumProjectModelComponent.bryntumConfigs, bryntumEvents = BryntumProjectModelComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumProjectModelComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumProjectModelComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumProjectModelComponent.bryntumConfigsOnly, bryntumProps = BryntumProjectModelComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumProjectModelComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumProjectModelComponent;
    }());
    BryntumProjectModelComponent.instanceClass = calendar.ProjectModel;
    BryntumProjectModelComponent.instanceName = 'ProjectModel';
    BryntumProjectModelComponent.bryntumEvents = [
        'onChange',
        'onDataReady'
    ];
    BryntumProjectModelComponent.bryntumFeatureNames = [];
    BryntumProjectModelComponent.bryntumConfigs = BryntumProjectModelComponent.bryntumFeatureNames.concat([
        'assignmentModelClass',
        'assignments',
        'assignmentsData',
        'assignmentStore',
        'assignmentStoreClass',
        'children',
        'dependencies',
        'dependenciesData',
        'dependencyModelClass',
        'dependencyStore',
        'dependencyStoreClass',
        'eventModelClass',
        'events',
        'eventsData',
        'eventStore',
        'eventStoreClass',
        'expanded',
        'id',
        'json',
        'orderedParentIndex',
        'parentId',
        'parentIndex',
        'readOnly',
        'resourceModelClass',
        'resources',
        'resourcesData',
        'resourceStore',
        'resourceStoreClass',
        'resourceTimeRanges',
        'resourceTimeRangesData',
        'resourceTimeRangeStore',
        'resourceTimeRangeStoreClass',
        'silenceInitialCommit',
        'stm',
        'timeRangeModelClass',
        'timeRanges',
        'timeRangesData',
        'timeRangeStore',
        'timeRangeStoreClass',
        'timeZone'
    ]);
    BryntumProjectModelComponent.bryntumConfigsOnly = [
        'assignmentModelClass',
        'assignmentsData',
        'assignmentStoreClass',
        'dependenciesData',
        'dependencyModelClass',
        'dependencyStoreClass',
        'eventModelClass',
        'eventsData',
        'eventStoreClass',
        'expanded',
        'orderedParentIndex',
        'parentId',
        'parentIndex',
        'resourceModelClass',
        'resourcesData',
        'resourceStoreClass',
        'resourceTimeRangesData',
        'resourceTimeRangeStoreClass',
        'silenceInitialCommit',
        'timeRangeModelClass',
        'timeRangesData',
        'timeRangeStoreClass'
    ];
    BryntumProjectModelComponent.bryntumProps = BryntumProjectModelComponent.bryntumFeatureNames.concat([
        'allChildren',
        'assignments',
        'assignmentStore',
        'autoExposeFields',
        'children',
        'childrenField',
        'convertEmptyParentToLeaf',
        'defaults',
        'dependencies',
        'dependencyStore',
        'descendantCount',
        'events',
        'eventStore',
        'hasGeneratedId',
        'id',
        'idField',
        'inlineData',
        'internalId',
        'isCommitting',
        'isCreating',
        'isValid',
        'json',
        'previousSiblingsTotalCount',
        'readOnly',
        'relations',
        'resources',
        'resourceStore',
        'resourceTimeRanges',
        'resourceTimeRangeStore',
        'stm',
        'timeRanges',
        'timeRangeStore',
        'timeZone',
        'visibleDescendantCount'
    ]);
    BryntumProjectModelComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumProjectModelComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumProjectModelComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumProjectModelComponent, selector: "bryntum-project-model", inputs: { assignmentModelClass: "assignmentModelClass", assignmentsData: "assignmentsData", assignmentStoreClass: "assignmentStoreClass", dependenciesData: "dependenciesData", dependencyModelClass: "dependencyModelClass", dependencyStoreClass: "dependencyStoreClass", eventModelClass: "eventModelClass", eventsData: "eventsData", eventStoreClass: "eventStoreClass", expanded: "expanded", orderedParentIndex: "orderedParentIndex", parentId: "parentId", parentIndex: "parentIndex", resourceModelClass: "resourceModelClass", resourcesData: "resourcesData", resourceStoreClass: "resourceStoreClass", resourceTimeRangesData: "resourceTimeRangesData", resourceTimeRangeStoreClass: "resourceTimeRangeStoreClass", silenceInitialCommit: "silenceInitialCommit", timeRangeModelClass: "timeRangeModelClass", timeRangesData: "timeRangesData", timeRangeStoreClass: "timeRangeStoreClass", assignments: "assignments", assignmentStore: "assignmentStore", children: "children", dependencies: "dependencies", dependencyStore: "dependencyStore", events: "events", eventStore: "eventStore", id: "id", json: "json", readOnly: "readOnly", resources: "resources", resourceStore: "resourceStore", resourceTimeRanges: "resourceTimeRanges", resourceTimeRangeStore: "resourceTimeRangeStore", stm: "stm", timeRanges: "timeRanges", timeRangeStore: "timeRangeStore", timeZone: "timeZone", allChildren: "allChildren", autoExposeFields: "autoExposeFields", childrenField: "childrenField", convertEmptyParentToLeaf: "convertEmptyParentToLeaf", defaults: "defaults", descendantCount: "descendantCount", hasGeneratedId: "hasGeneratedId", idField: "idField", inlineData: "inlineData", internalId: "internalId", isCommitting: "isCommitting", isCreating: "isCreating", isValid: "isValid", previousSiblingsTotalCount: "previousSiblingsTotalCount", relations: "relations", visibleDescendantCount: "visibleDescendantCount" }, outputs: { onChange: "onChange", onDataReady: "onDataReady" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumProjectModelComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-project-model',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { assignmentModelClass: [{
                    type: i0.Input
                }], assignmentsData: [{
                    type: i0.Input
                }], assignmentStoreClass: [{
                    type: i0.Input
                }], dependenciesData: [{
                    type: i0.Input
                }], dependencyModelClass: [{
                    type: i0.Input
                }], dependencyStoreClass: [{
                    type: i0.Input
                }], eventModelClass: [{
                    type: i0.Input
                }], eventsData: [{
                    type: i0.Input
                }], eventStoreClass: [{
                    type: i0.Input
                }], expanded: [{
                    type: i0.Input
                }], orderedParentIndex: [{
                    type: i0.Input
                }], parentId: [{
                    type: i0.Input
                }], parentIndex: [{
                    type: i0.Input
                }], resourceModelClass: [{
                    type: i0.Input
                }], resourcesData: [{
                    type: i0.Input
                }], resourceStoreClass: [{
                    type: i0.Input
                }], resourceTimeRangesData: [{
                    type: i0.Input
                }], resourceTimeRangeStoreClass: [{
                    type: i0.Input
                }], silenceInitialCommit: [{
                    type: i0.Input
                }], timeRangeModelClass: [{
                    type: i0.Input
                }], timeRangesData: [{
                    type: i0.Input
                }], timeRangeStoreClass: [{
                    type: i0.Input
                }], assignments: [{
                    type: i0.Input
                }], assignmentStore: [{
                    type: i0.Input
                }], children: [{
                    type: i0.Input
                }], dependencies: [{
                    type: i0.Input
                }], dependencyStore: [{
                    type: i0.Input
                }], events: [{
                    type: i0.Input
                }], eventStore: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], json: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], resources: [{
                    type: i0.Input
                }], resourceStore: [{
                    type: i0.Input
                }], resourceTimeRanges: [{
                    type: i0.Input
                }], resourceTimeRangeStore: [{
                    type: i0.Input
                }], stm: [{
                    type: i0.Input
                }], timeRanges: [{
                    type: i0.Input
                }], timeRangeStore: [{
                    type: i0.Input
                }], timeZone: [{
                    type: i0.Input
                }], allChildren: [{
                    type: i0.Input
                }], autoExposeFields: [{
                    type: i0.Input
                }], childrenField: [{
                    type: i0.Input
                }], convertEmptyParentToLeaf: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], descendantCount: [{
                    type: i0.Input
                }], hasGeneratedId: [{
                    type: i0.Input
                }], idField: [{
                    type: i0.Input
                }], inlineData: [{
                    type: i0.Input
                }], internalId: [{
                    type: i0.Input
                }], isCommitting: [{
                    type: i0.Input
                }], isCreating: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], previousSiblingsTotalCount: [{
                    type: i0.Input
                }], relations: [{
                    type: i0.Input
                }], visibleDescendantCount: [{
                    type: i0.Input
                }], onChange: [{
                    type: i0.Output
                }], onDataReady: [{
                    type: i0.Output
                }] } });

    var BryntumRadioComponent = /** @class */ (function () {
        function BryntumRadioComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeChange = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onClick = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumRadioComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumRadioComponent.instanceClass, instanceName = BryntumRadioComponent.instanceName, bryntumConfigs = BryntumRadioComponent.bryntumConfigs, bryntumEvents = BryntumRadioComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumRadioComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumRadioComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumRadioComponent.bryntumConfigsOnly, bryntumProps = BryntumRadioComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumRadioComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumRadioComponent;
    }());
    BryntumRadioComponent.instanceClass = calendar.Radio;
    BryntumRadioComponent.instanceName = 'Radio';
    BryntumRadioComponent.bryntumEvents = [
        'onAction',
        'onBeforeChange',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onClick',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onTrigger'
    ];
    BryntumRadioComponent.bryntumFeatureNames = [];
    BryntumRadioComponent.bryntumConfigs = BryntumRadioComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoCollapse',
        'autoComplete',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'checked',
        'checkedValue',
        'clearable',
        'cls',
        'color',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'editable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'keyStrokeChangeDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'text',
        'textAlign',
        'title',
        'tooltip',
        'triggers',
        'ui',
        'uncheckedValue',
        'validateOnInput',
        'value',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumRadioComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoCollapse',
        'autoComplete',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'checkedValue',
        'clearable',
        'color',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'keyStrokeChangeDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'text',
        'textAlign',
        'title',
        'ui',
        'uncheckedValue',
        'validateOnInput',
        'weight'
    ];
    BryntumRadioComponent.bryntumProps = BryntumRadioComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'checked',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'name',
        'readOnly',
        'scrollable',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumRadioComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumRadioComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumRadioComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumRadioComponent, selector: "bryntum-radio", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoCollapse: "autoCollapse", autoComplete: "autoComplete", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", checkedValue: "checkedValue", clearable: "clearable", color: "color", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", keyStrokeChangeDelay: "keyStrokeChangeDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", owner: "owner", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tag: "tag", text: "text", textAlign: "textAlign", title: "title", ui: "ui", uncheckedValue: "uncheckedValue", validateOnInput: "validateOnInput", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", checked: "checked", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", name: "name", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeChange: "onBeforeChange", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onClick: "onClick", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumRadioComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-radio',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoCollapse: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], checkedValue: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], text: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], uncheckedValue: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], checked: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeChange: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onClick: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumRadioGroupComponent = /** @class */ (function () {
        function BryntumRadioGroupComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onToolClick = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumRadioGroupComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumRadioGroupComponent.instanceClass, instanceName = BryntumRadioGroupComponent.instanceName, bryntumConfigs = BryntumRadioGroupComponent.bryntumConfigs, bryntumEvents = BryntumRadioGroupComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumRadioGroupComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumRadioGroupComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumRadioGroupComponent.bryntumConfigsOnly, bryntumProps = BryntumRadioGroupComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumRadioGroupComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumRadioGroupComponent;
    }());
    BryntumRadioGroupComponent.instanceClass = calendar.RadioGroup;
    BryntumRadioGroupComponent.instanceName = 'RadioGroup';
    BryntumRadioGroupComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onToolClick'
    ];
    BryntumRadioGroupComponent.bryntumFeatureNames = [];
    BryntumRadioGroupComponent.bryntumConfigs = BryntumRadioGroupComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'cls',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'footer',
        'header',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'label',
        'labelCls',
        'labelPosition',
        'labelWidth',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'name',
        'namedItems',
        'options',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strictRecordMapping',
        'strips',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'title',
        'tools',
        'tooltip',
        'trapFocus',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumRadioGroupComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'floating',
        'footer',
        'header',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'itemCls',
        'labelCls',
        'labelPosition',
        'labelWidth',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'name',
        'namedItems',
        'options',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strips',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'trapFocus',
        'ui',
        'weight'
    ];
    BryntumRadioGroupComponent.bryntumProps = BryntumRadioGroupComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'label',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'state',
        'strictRecordMapping',
        'title',
        'tools',
        'tooltip',
        'type',
        'value',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumRadioGroupComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumRadioGroupComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumRadioGroupComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumRadioGroupComponent, selector: "bryntum-radio-group", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bbar: "bbar", bodyCls: "bodyCls", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", clearable: "clearable", collapsed: "collapsed", collapsible: "collapsible", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", floating: "floating", footer: "footer", header: "header", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", itemCls: "itemCls", labelCls: "labelCls", labelPosition: "labelPosition", labelWidth: "labelWidth", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", name: "name", namedItems: "namedItems", options: "options", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", stateful: "stateful", statefulEvents: "statefulEvents", stateId: "stateId", stateProvider: "stateProvider", strips: "strips", tab: "tab", tag: "tag", tbar: "tbar", textAlign: "textAlign", textContent: "textContent", trapFocus: "trapFocus", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", label: "label", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", title: "title", tools: "tools", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", state: "state", type: "type", value: "value", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onToolClick: "onToolClick" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumRadioGroupComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-radio-group',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bbar: [{
                    type: i0.Input
                }], bodyCls: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], collapsed: [{
                    type: i0.Input
                }], collapsible: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], footer: [{
                    type: i0.Input
                }], header: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], options: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], stateful: [{
                    type: i0.Input
                }], statefulEvents: [{
                    type: i0.Input
                }], stateId: [{
                    type: i0.Input
                }], stateProvider: [{
                    type: i0.Input
                }], strips: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], tbar: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], trapFocus: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], tools: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], state: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onToolClick: [{
                    type: i0.Output
                }] } });

    var BryntumResourceComboComponent = /** @class */ (function () {
        function BryntumResourceComboComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onSelect = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumResourceComboComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumResourceComboComponent.instanceClass, instanceName = BryntumResourceComboComponent.instanceName, bryntumConfigs = BryntumResourceComboComponent.bryntumConfigs, bryntumEvents = BryntumResourceComboComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumResourceComboComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumResourceComboComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumResourceComboComponent.bryntumConfigsOnly, bryntumProps = BryntumResourceComboComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumResourceComboComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumResourceComboComponent;
    }());
    BryntumResourceComboComponent.instanceClass = calendar.ResourceCombo;
    BryntumResourceComboComponent.instanceName = 'ResourceCombo';
    BryntumResourceComboComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onSelect',
        'onShow',
        'onTrigger'
    ];
    BryntumResourceComboComponent.bryntumFeatureNames = [];
    BryntumResourceComboComponent.bryntumConfigs = BryntumResourceComboComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoComplete',
        'autoExpand',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'caseSensitive',
        'centered',
        'chipView',
        'clearable',
        'clearTextOnPickerHide',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'createOnUnmatched',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'displayField',
        'displayValueRenderer',
        'dock',
        'draggable',
        'editable',
        'emptyText',
        'encodeFilterParams',
        'extraData',
        'filterOnEnter',
        'filterOperator',
        'filterParamName',
        'filterSelected',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'hidePickerOnSelect',
        'hideTrigger',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inlinePicker',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'items',
        'keyStrokeChangeDelay',
        'keyStrokeFilterDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listCls',
        'listeners',
        'listItemTpl',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxLength',
        'maxWidth',
        'minChars',
        'minHeight',
        'minLength',
        'minWidth',
        'monitorResize',
        'multiSelect',
        'multiValueSeparator',
        'name',
        'overlayAnchor',
        'owner',
        'picker',
        'pickerAlignElement',
        'pickerWidth',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'primaryFilter',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showEventColor',
        'showTooltipWhenDisabled',
        'spellCheck',
        'store',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'triggerAction',
        'triggers',
        'ui',
        'validateFilter',
        'validateOnInput',
        'value',
        'valueField',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumResourceComboComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoComplete',
        'autoExpand',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'caseSensitive',
        'centered',
        'chipView',
        'clearable',
        'clearTextOnPickerHide',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'createOnUnmatched',
        'defaultBindProperty',
        'displayField',
        'displayValueRenderer',
        'dock',
        'draggable',
        'emptyText',
        'encodeFilterParams',
        'filterOnEnter',
        'filterParamName',
        'filterSelected',
        'floating',
        'hideAnimation',
        'hidePickerOnSelect',
        'hideTrigger',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inlinePicker',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'items',
        'keyStrokeChangeDelay',
        'keyStrokeFilterDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listCls',
        'listeners',
        'listItemTpl',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maxLength',
        'minChars',
        'minLength',
        'monitorResize',
        'multiSelect',
        'multiValueSeparator',
        'name',
        'overlayAnchor',
        'owner',
        'picker',
        'pickerAlignElement',
        'pickerWidth',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'primaryFilter',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showEventColor',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'triggerAction',
        'ui',
        'validateFilter',
        'validateOnInput',
        'valueField',
        'weight'
    ];
    BryntumResourceComboComponent.bryntumProps = BryntumResourceComboComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'filterOperator',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'store',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumResourceComboComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumResourceComboComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumResourceComboComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumResourceComboComponent, selector: "bryntum-resource-combo", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoClose: "autoClose", autoComplete: "autoComplete", autoExpand: "autoExpand", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", caseSensitive: "caseSensitive", centered: "centered", chipView: "chipView", clearable: "clearable", clearTextOnPickerHide: "clearTextOnPickerHide", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", createOnUnmatched: "createOnUnmatched", defaultBindProperty: "defaultBindProperty", displayField: "displayField", displayValueRenderer: "displayValueRenderer", dock: "dock", draggable: "draggable", emptyText: "emptyText", encodeFilterParams: "encodeFilterParams", filterOnEnter: "filterOnEnter", filterParamName: "filterParamName", filterSelected: "filterSelected", floating: "floating", hideAnimation: "hideAnimation", hidePickerOnSelect: "hidePickerOnSelect", hideTrigger: "hideTrigger", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inlinePicker: "inlinePicker", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", items: "items", keyStrokeChangeDelay: "keyStrokeChangeDelay", keyStrokeFilterDelay: "keyStrokeFilterDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listCls: "listCls", listeners: "listeners", listItemTpl: "listItemTpl", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxLength: "maxLength", minChars: "minChars", minLength: "minLength", monitorResize: "monitorResize", multiSelect: "multiSelect", multiValueSeparator: "multiValueSeparator", name: "name", overlayAnchor: "overlayAnchor", owner: "owner", picker: "picker", pickerAlignElement: "pickerAlignElement", pickerWidth: "pickerWidth", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", primaryFilter: "primaryFilter", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showEventColor: "showEventColor", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tabIndex: "tabIndex", tag: "tag", textAlign: "textAlign", title: "title", triggerAction: "triggerAction", ui: "ui", validateFilter: "validateFilter", validateOnInput: "validateOnInput", valueField: "valueField", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", filterOperator: "filterOperator", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", store: "store", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onSelect: "onSelect", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumResourceComboComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-resource-combo',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoClose: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoExpand: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], caseSensitive: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], chipView: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], clearTextOnPickerHide: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], createOnUnmatched: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], displayField: [{
                    type: i0.Input
                }], displayValueRenderer: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], emptyText: [{
                    type: i0.Input
                }], encodeFilterParams: [{
                    type: i0.Input
                }], filterOnEnter: [{
                    type: i0.Input
                }], filterParamName: [{
                    type: i0.Input
                }], filterSelected: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hidePickerOnSelect: [{
                    type: i0.Input
                }], hideTrigger: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inlinePicker: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], keyStrokeFilterDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listCls: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], listItemTpl: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maxLength: [{
                    type: i0.Input
                }], minChars: [{
                    type: i0.Input
                }], minLength: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], multiSelect: [{
                    type: i0.Input
                }], multiValueSeparator: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], overlayAnchor: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], picker: [{
                    type: i0.Input
                }], pickerAlignElement: [{
                    type: i0.Input
                }], pickerWidth: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], primaryFilter: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showEventColor: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], triggerAction: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], validateFilter: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], valueField: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], filterOperator: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onSelect: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumResourceFilterComponent = /** @class */ (function () {
        function BryntumResourceFilterComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeItem = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onItem = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumResourceFilterComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumResourceFilterComponent.instanceClass, instanceName = BryntumResourceFilterComponent.instanceName, bryntumConfigs = BryntumResourceFilterComponent.bryntumConfigs, bryntumEvents = BryntumResourceFilterComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumResourceFilterComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumResourceFilterComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumResourceFilterComponent.bryntumConfigsOnly, bryntumProps = BryntumResourceFilterComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumResourceFilterComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumResourceFilterComponent;
    }());
    BryntumResourceFilterComponent.instanceClass = calendar.ResourceFilter;
    BryntumResourceFilterComponent.instanceName = 'ResourceFilter';
    BryntumResourceFilterComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeItem',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onItem',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow'
    ];
    BryntumResourceFilterComponent.bryntumFeatureNames = [];
    BryntumResourceFilterComponent.bryntumConfigs = BryntumResourceFilterComponent.bryntumFeatureNames.concat([
        'activateOnMouseover',
        'adopt',
        'align',
        'alignSelf',
        'allowGroupSelect',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'displayField',
        'dock',
        'draggable',
        'eventStore',
        'extraData',
        'filterResources',
        'flex',
        'floating',
        'getItemCls',
        'getItemStyle',
        'groupHeaderTpl',
        'height',
        'hidden',
        'hideAnimation',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'items',
        'itemTpl',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'masterFilter',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'multiSelect',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'selectAllItem',
        'selected',
        'showAnimation',
        'showTooltipWhenDisabled',
        'store',
        'tab',
        'tag',
        'textAlign',
        'title',
        'toggleAllIfCtrlPressed',
        'tooltip',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumResourceFilterComponent.bryntumConfigsOnly = [
        'activateOnMouseover',
        'adopt',
        'align',
        'allowGroupSelect',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'displayField',
        'dock',
        'draggable',
        'eventStore',
        'filterResources',
        'floating',
        'getItemCls',
        'getItemStyle',
        'groupHeaderTpl',
        'hideAnimation',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemTpl',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'masterFilter',
        'monitorResize',
        'multiSelect',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'selectAllItem',
        'selected',
        'showAnimation',
        'showTooltipWhenDisabled',
        'store',
        'tab',
        'tag',
        'textAlign',
        'title',
        'toggleAllIfCtrlPressed',
        'ui',
        'weight'
    ];
    BryntumResourceFilterComponent.bryntumProps = BryntumResourceFilterComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'items',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'tooltip',
        'type',
        'width',
        'x',
        'y'
    ]);
    BryntumResourceFilterComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumResourceFilterComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumResourceFilterComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumResourceFilterComponent, selector: "bryntum-resource-filter", inputs: { activateOnMouseover: "activateOnMouseover", adopt: "adopt", align: "align", allowGroupSelect: "allowGroupSelect", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", displayField: "displayField", dock: "dock", draggable: "draggable", eventStore: "eventStore", filterResources: "filterResources", floating: "floating", getItemCls: "getItemCls", getItemStyle: "getItemStyle", groupHeaderTpl: "groupHeaderTpl", hideAnimation: "hideAnimation", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemTpl: "itemTpl", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", masterFilter: "masterFilter", monitorResize: "monitorResize", multiSelect: "multiSelect", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", selectAllItem: "selectAllItem", selected: "selected", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", store: "store", tab: "tab", tag: "tag", textAlign: "textAlign", title: "title", toggleAllIfCtrlPressed: "toggleAllIfCtrlPressed", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", type: "type" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeItem: "onBeforeItem", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onItem: "onItem", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumResourceFilterComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-resource-filter',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { activateOnMouseover: [{
                    type: i0.Input
                }], adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], allowGroupSelect: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], displayField: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], eventStore: [{
                    type: i0.Input
                }], filterResources: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], getItemCls: [{
                    type: i0.Input
                }], getItemStyle: [{
                    type: i0.Input
                }], groupHeaderTpl: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemTpl: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], masterFilter: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], multiSelect: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], selectAllItem: [{
                    type: i0.Input
                }], selected: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], toggleAllIfCtrlPressed: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeItem: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onItem: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }] } });

    var BryntumResourceViewComponent = /** @class */ (function () {
        function BryntumResourceViewComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeAutoCreate = new i0.EventEmitter();
            this.onBeforeChangeDate = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeResponsiveStateChange = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onEventAutoCreated = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onRefresh = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onResponsiveHeightChange = new i0.EventEmitter();
            this.onResponsiveStateChange = new i0.EventEmitter();
            this.onResponsiveWidthChange = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onToolClick = new i0.EventEmitter();
            this.onViewCreate = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumResourceViewComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumResourceViewComponent.instanceClass, instanceName = BryntumResourceViewComponent.instanceName, bryntumConfigs = BryntumResourceViewComponent.bryntumConfigs, bryntumEvents = BryntumResourceViewComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumResourceViewComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumResourceViewComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumResourceViewComponent.bryntumConfigsOnly, bryntumProps = BryntumResourceViewComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumResourceViewComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumResourceViewComponent;
    }());
    BryntumResourceViewComponent.instanceClass = calendar.ResourceView;
    BryntumResourceViewComponent.instanceName = 'ResourceView';
    BryntumResourceViewComponent.bryntumEvents = [
        'onBeforeAutoCreate',
        'onBeforeChangeDate',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeResponsiveStateChange',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onDestroy',
        'onEventAutoCreated',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onRefresh',
        'onResize',
        'onResponsiveHeightChange',
        'onResponsiveStateChange',
        'onResponsiveWidthChange',
        'onShow',
        'onToolClick',
        'onViewCreate'
    ];
    BryntumResourceViewComponent.bryntumFeatureNames = [];
    BryntumResourceViewComponent.bryntumConfigs = BryntumResourceViewComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'animateTimeShift',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoCreate',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'breakpoints',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'dateFormat',
        'dateSeparator',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'descriptionFormat',
        'descriptionRenderer',
        'disabled',
        'dock',
        'draggable',
        'eventHeight',
        'eventSorter',
        'extraData',
        'flex',
        'floating',
        'footer',
        'header',
        'height',
        'hidden',
        'hideAnimation',
        'hideNonWorkingDays',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'includeTimeRanges',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxDate',
        'maxHeight',
        'maxWidth',
        'meta',
        'minDate',
        'minHeight',
        'minWidth',
        'monitorResize',
        'namedItems',
        'nonWorkingDays',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'resourceImagePath',
        'resourceWidth',
        'responsive',
        'responsiveRoot',
        'responsiveState',
        'responsiveTarget',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'shortDateFormat',
        'shortDateTimeFormat',
        'shortEventCls',
        'shortEventDuration',
        'showAnimation',
        'showAvatars',
        'showResourceAvatars',
        'showTooltipWhenDisabled',
        'stableResourceOrder',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strictRecordMapping',
        'strips',
        'syncViewDate',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'timeFormat',
        'title',
        'tools',
        'tooltip',
        'trapFocus',
        'ui',
        'view',
        'weekStartDay',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumResourceViewComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoCreate',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'breakpoints',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'contentElementCls',
        'dateFormat',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'descriptionRenderer',
        'dock',
        'draggable',
        'eventHeight',
        'eventSorter',
        'floating',
        'footer',
        'header',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'includeTimeRanges',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'meta',
        'monitorResize',
        'namedItems',
        'nonWorkingDays',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'resourceImagePath',
        'responsive',
        'responsiveRoot',
        'responsiveState',
        'responsiveTarget',
        'ripple',
        'rootElement',
        'scrollAction',
        'shortDateFormat',
        'shortDateTimeFormat',
        'shortEventCls',
        'shortEventDuration',
        'showAnimation',
        'showAvatars',
        'showResourceAvatars',
        'showTooltipWhenDisabled',
        'stableResourceOrder',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strips',
        'syncViewDate',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'timeFormat',
        'trapFocus',
        'ui',
        'weekStartDay',
        'weight'
    ];
    BryntumResourceViewComponent.bryntumProps = BryntumResourceViewComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'animateTimeShift',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'dateSeparator',
        'dayCellCls',
        'descriptionFormat',
        'disabled',
        'extraData',
        'firstVisibleCell',
        'firstVisibleDate',
        'flex',
        'height',
        'hidden',
        'hideNonWorkingDays',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'lastVisibleCell',
        'lastVisibleDate',
        'layout',
        'layoutStyle',
        'margin',
        'maxDate',
        'maxHeight',
        'maxWidth',
        'minDate',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'resourceWidth',
        'scrollable',
        'state',
        'strictRecordMapping',
        'title',
        'tools',
        'tooltip',
        'type',
        'values',
        'view',
        'width',
        'x',
        'y'
    ]);
    BryntumResourceViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumResourceViewComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumResourceViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumResourceViewComponent, selector: "bryntum-resource-view", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoCreate: "autoCreate", autoUpdateRecord: "autoUpdateRecord", bbar: "bbar", bodyCls: "bodyCls", breakpoints: "breakpoints", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", collapsed: "collapsed", collapsible: "collapsible", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", dateFormat: "dateFormat", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", descriptionRenderer: "descriptionRenderer", dock: "dock", draggable: "draggable", eventHeight: "eventHeight", eventSorter: "eventSorter", floating: "floating", footer: "footer", header: "header", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", includeTimeRanges: "includeTimeRanges", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", meta: "meta", monitorResize: "monitorResize", namedItems: "namedItems", nonWorkingDays: "nonWorkingDays", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", resourceImagePath: "resourceImagePath", responsive: "responsive", responsiveRoot: "responsiveRoot", responsiveState: "responsiveState", responsiveTarget: "responsiveTarget", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", shortDateFormat: "shortDateFormat", shortDateTimeFormat: "shortDateTimeFormat", shortEventCls: "shortEventCls", shortEventDuration: "shortEventDuration", showAnimation: "showAnimation", showAvatars: "showAvatars", showResourceAvatars: "showResourceAvatars", showTooltipWhenDisabled: "showTooltipWhenDisabled", stableResourceOrder: "stableResourceOrder", stateful: "stateful", statefulEvents: "statefulEvents", stateId: "stateId", stateProvider: "stateProvider", strips: "strips", syncViewDate: "syncViewDate", tab: "tab", tag: "tag", tbar: "tbar", textAlign: "textAlign", textContent: "textContent", timeFormat: "timeFormat", trapFocus: "trapFocus", ui: "ui", weekStartDay: "weekStartDay", weight: "weight", alignSelf: "alignSelf", animateTimeShift: "animateTimeShift", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", dateSeparator: "dateSeparator", descriptionFormat: "descriptionFormat", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", hideNonWorkingDays: "hideNonWorkingDays", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxDate: "maxDate", maxHeight: "maxHeight", maxWidth: "maxWidth", minDate: "minDate", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", resourceWidth: "resourceWidth", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", title: "title", tools: "tools", tooltip: "tooltip", view: "view", width: "width", x: "x", y: "y", anchorSize: "anchorSize", dayCellCls: "dayCellCls", firstVisibleCell: "firstVisibleCell", firstVisibleDate: "firstVisibleDate", isSettingValues: "isSettingValues", isValid: "isValid", lastVisibleCell: "lastVisibleCell", lastVisibleDate: "lastVisibleDate", state: "state", type: "type", values: "values" }, outputs: { onBeforeAutoCreate: "onBeforeAutoCreate", onBeforeChangeDate: "onBeforeChangeDate", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeResponsiveStateChange: "onBeforeResponsiveStateChange", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onEventAutoCreated: "onEventAutoCreated", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onRefresh: "onRefresh", onResize: "onResize", onResponsiveHeightChange: "onResponsiveHeightChange", onResponsiveStateChange: "onResponsiveStateChange", onResponsiveWidthChange: "onResponsiveWidthChange", onShow: "onShow", onToolClick: "onToolClick", onViewCreate: "onViewCreate" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumResourceViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-resource-view',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoCreate: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bbar: [{
                    type: i0.Input
                }], bodyCls: [{
                    type: i0.Input
                }], breakpoints: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], collapsed: [{
                    type: i0.Input
                }], collapsible: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], dateFormat: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], descriptionRenderer: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], eventHeight: [{
                    type: i0.Input
                }], eventSorter: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], footer: [{
                    type: i0.Input
                }], header: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], includeTimeRanges: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], meta: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], nonWorkingDays: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], resourceImagePath: [{
                    type: i0.Input
                }], responsive: [{
                    type: i0.Input
                }], responsiveRoot: [{
                    type: i0.Input
                }], responsiveState: [{
                    type: i0.Input
                }], responsiveTarget: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], shortDateFormat: [{
                    type: i0.Input
                }], shortDateTimeFormat: [{
                    type: i0.Input
                }], shortEventCls: [{
                    type: i0.Input
                }], shortEventDuration: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showAvatars: [{
                    type: i0.Input
                }], showResourceAvatars: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], stableResourceOrder: [{
                    type: i0.Input
                }], stateful: [{
                    type: i0.Input
                }], statefulEvents: [{
                    type: i0.Input
                }], stateId: [{
                    type: i0.Input
                }], stateProvider: [{
                    type: i0.Input
                }], strips: [{
                    type: i0.Input
                }], syncViewDate: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], tbar: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], timeFormat: [{
                    type: i0.Input
                }], trapFocus: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weekStartDay: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], animateTimeShift: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], dateSeparator: [{
                    type: i0.Input
                }], descriptionFormat: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], hideNonWorkingDays: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxDate: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minDate: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], resourceWidth: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], tools: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], view: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], dayCellCls: [{
                    type: i0.Input
                }], firstVisibleCell: [{
                    type: i0.Input
                }], firstVisibleDate: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], lastVisibleCell: [{
                    type: i0.Input
                }], lastVisibleDate: [{
                    type: i0.Input
                }], state: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeAutoCreate: [{
                    type: i0.Output
                }], onBeforeChangeDate: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeResponsiveStateChange: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onEventAutoCreated: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onRefresh: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onResponsiveHeightChange: [{
                    type: i0.Output
                }], onResponsiveStateChange: [{
                    type: i0.Output
                }], onResponsiveWidthChange: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onToolClick: [{
                    type: i0.Output
                }], onViewCreate: [{
                    type: i0.Output
                }] } });

    var BryntumSchedulerDatePickerComponent = /** @class */ (function () {
        function BryntumSchedulerDatePickerComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeRefresh = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDateChange = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onRefresh = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onSelectionChange = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onToolClick = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumSchedulerDatePickerComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumSchedulerDatePickerComponent.instanceClass, instanceName = BryntumSchedulerDatePickerComponent.instanceName, bryntumConfigs = BryntumSchedulerDatePickerComponent.bryntumConfigs, bryntumEvents = BryntumSchedulerDatePickerComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumSchedulerDatePickerComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumSchedulerDatePickerComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumSchedulerDatePickerComponent.bryntumConfigsOnly, bryntumProps = BryntumSchedulerDatePickerComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumSchedulerDatePickerComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumSchedulerDatePickerComponent;
    }());
    BryntumSchedulerDatePickerComponent.instanceClass = calendar.SchedulerDatePicker;
    BryntumSchedulerDatePickerComponent.instanceName = 'SchedulerDatePicker';
    BryntumSchedulerDatePickerComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeRefresh',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onDateChange',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onRefresh',
        'onResize',
        'onSelectionChange',
        'onShow',
        'onToolClick'
    ];
    BryntumSchedulerDatePickerComponent.bryntumFeatureNames = [];
    BryntumSchedulerDatePickerComponent.bryntumConfigs = BryntumSchedulerDatePickerComponent.bryntumFeatureNames.concat([
        'activeDate',
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'animateTimeShift',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'cellRenderer',
        'centered',
        'cls',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'date',
        'dayNameFormat',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'disabledDates',
        'disableOtherMonthCells',
        'disableWeekends',
        'dock',
        'draggable',
        'editMonth',
        'eventFilter',
        'eventStore',
        'extraData',
        'flex',
        'floating',
        'focusDisabledDates',
        'footer',
        'header',
        'headerRenderer',
        'height',
        'hidden',
        'hideAnimation',
        'hideOtherMonthCells',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxDate',
        'maxHeight',
        'maxWidth',
        'minColumnWidth',
        'minDate',
        'minHeight',
        'minRowHeight',
        'minWidth',
        'monitorResize',
        'month',
        'multiSelect',
        'namedItems',
        'nonWorkingDays',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'selection',
        'showAnimation',
        'showEvents',
        'showTooltipWhenDisabled',
        'showWeekColumn',
        'showWeekNumber',
        'sixWeeks',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strictRecordMapping',
        'strips',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'tip',
        'title',
        'tools',
        'tooltip',
        'trapFocus',
        'ui',
        'weekRenderer',
        'weekStartDay',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumSchedulerDatePickerComponent.bryntumConfigsOnly = [
        'activeDate',
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'cellRenderer',
        'centered',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'contentElementCls',
        'dayNameFormat',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabledDates',
        'disableOtherMonthCells',
        'disableWeekends',
        'dock',
        'draggable',
        'editMonth',
        'eventFilter',
        'eventStore',
        'floating',
        'focusDisabledDates',
        'footer',
        'header',
        'headerRenderer',
        'hideAnimation',
        'hideOtherMonthCells',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maxDate',
        'minColumnWidth',
        'minDate',
        'minRowHeight',
        'monitorResize',
        'month',
        'multiSelect',
        'namedItems',
        'nonWorkingDays',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showEvents',
        'showTooltipWhenDisabled',
        'showWeekColumn',
        'showWeekNumber',
        'sixWeeks',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strips',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'tip',
        'trapFocus',
        'ui',
        'weekRenderer',
        'weekStartDay',
        'weight'
    ];
    BryntumSchedulerDatePickerComponent.bryntumProps = BryntumSchedulerDatePickerComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'animateTimeShift',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'date',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'selection',
        'state',
        'strictRecordMapping',
        'title',
        'tools',
        'tooltip',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumSchedulerDatePickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumSchedulerDatePickerComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumSchedulerDatePickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumSchedulerDatePickerComponent, selector: "bryntum-scheduler-date-picker", inputs: { activeDate: "activeDate", adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bbar: "bbar", bodyCls: "bodyCls", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", cellRenderer: "cellRenderer", centered: "centered", collapsed: "collapsed", collapsible: "collapsible", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", dayNameFormat: "dayNameFormat", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", disabledDates: "disabledDates", disableOtherMonthCells: "disableOtherMonthCells", disableWeekends: "disableWeekends", dock: "dock", draggable: "draggable", editMonth: "editMonth", eventFilter: "eventFilter", eventStore: "eventStore", floating: "floating", focusDisabledDates: "focusDisabledDates", footer: "footer", header: "header", headerRenderer: "headerRenderer", hideAnimation: "hideAnimation", hideOtherMonthCells: "hideOtherMonthCells", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxDate: "maxDate", minColumnWidth: "minColumnWidth", minDate: "minDate", minRowHeight: "minRowHeight", monitorResize: "monitorResize", month: "month", multiSelect: "multiSelect", namedItems: "namedItems", nonWorkingDays: "nonWorkingDays", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showEvents: "showEvents", showTooltipWhenDisabled: "showTooltipWhenDisabled", showWeekColumn: "showWeekColumn", showWeekNumber: "showWeekNumber", sixWeeks: "sixWeeks", stateful: "stateful", statefulEvents: "statefulEvents", stateId: "stateId", stateProvider: "stateProvider", strips: "strips", tab: "tab", tag: "tag", tbar: "tbar", textAlign: "textAlign", textContent: "textContent", tip: "tip", trapFocus: "trapFocus", ui: "ui", weekRenderer: "weekRenderer", weekStartDay: "weekStartDay", weight: "weight", alignSelf: "alignSelf", animateTimeShift: "animateTimeShift", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", date: "date", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", selection: "selection", strictRecordMapping: "strictRecordMapping", title: "title", tools: "tools", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", state: "state", type: "type", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeRefresh: "onBeforeRefresh", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDateChange: "onDateChange", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onRefresh: "onRefresh", onResize: "onResize", onSelectionChange: "onSelectionChange", onShow: "onShow", onToolClick: "onToolClick" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumSchedulerDatePickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-scheduler-date-picker',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { activeDate: [{
                    type: i0.Input
                }], adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bbar: [{
                    type: i0.Input
                }], bodyCls: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], cellRenderer: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], collapsed: [{
                    type: i0.Input
                }], collapsible: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], dayNameFormat: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], disabledDates: [{
                    type: i0.Input
                }], disableOtherMonthCells: [{
                    type: i0.Input
                }], disableWeekends: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], editMonth: [{
                    type: i0.Input
                }], eventFilter: [{
                    type: i0.Input
                }], eventStore: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], focusDisabledDates: [{
                    type: i0.Input
                }], footer: [{
                    type: i0.Input
                }], header: [{
                    type: i0.Input
                }], headerRenderer: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideOtherMonthCells: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maxDate: [{
                    type: i0.Input
                }], minColumnWidth: [{
                    type: i0.Input
                }], minDate: [{
                    type: i0.Input
                }], minRowHeight: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], month: [{
                    type: i0.Input
                }], multiSelect: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], nonWorkingDays: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showEvents: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], showWeekColumn: [{
                    type: i0.Input
                }], showWeekNumber: [{
                    type: i0.Input
                }], sixWeeks: [{
                    type: i0.Input
                }], stateful: [{
                    type: i0.Input
                }], statefulEvents: [{
                    type: i0.Input
                }], stateId: [{
                    type: i0.Input
                }], stateProvider: [{
                    type: i0.Input
                }], strips: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], tbar: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], tip: [{
                    type: i0.Input
                }], trapFocus: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weekRenderer: [{
                    type: i0.Input
                }], weekStartDay: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], animateTimeShift: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], date: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], selection: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], tools: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], state: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeRefresh: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDateChange: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onRefresh: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onSelectionChange: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onToolClick: [{
                    type: i0.Output
                }] } });

    var BryntumSidebarComponent = /** @class */ (function () {
        function BryntumSidebarComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeResponsiveStateChange = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onResponsiveHeightChange = new i0.EventEmitter();
            this.onResponsiveStateChange = new i0.EventEmitter();
            this.onResponsiveWidthChange = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onToolClick = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumSidebarComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumSidebarComponent.instanceClass, instanceName = BryntumSidebarComponent.instanceName, bryntumConfigs = BryntumSidebarComponent.bryntumConfigs, bryntumEvents = BryntumSidebarComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumSidebarComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumSidebarComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumSidebarComponent.bryntumConfigsOnly, bryntumProps = BryntumSidebarComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumSidebarComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumSidebarComponent;
    }());
    BryntumSidebarComponent.instanceClass = calendar.Sidebar;
    BryntumSidebarComponent.instanceName = 'Sidebar';
    BryntumSidebarComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeResponsiveStateChange',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onResponsiveHeightChange',
        'onResponsiveStateChange',
        'onResponsiveWidthChange',
        'onShow',
        'onToolClick'
    ];
    BryntumSidebarComponent.bryntumFeatureNames = [];
    BryntumSidebarComponent.bryntumConfigs = BryntumSidebarComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'breakpoints',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'footer',
        'header',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'responsive',
        'responsiveRoot',
        'responsiveState',
        'responsiveTarget',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'side',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strictRecordMapping',
        'strips',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'title',
        'tools',
        'tooltip',
        'trapFocus',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumSidebarComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'breakpoints',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'floating',
        'footer',
        'header',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'responsive',
        'responsiveRoot',
        'responsiveState',
        'responsiveTarget',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'side',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strips',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'trapFocus',
        'ui',
        'weight'
    ];
    BryntumSidebarComponent.bryntumProps = BryntumSidebarComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'state',
        'strictRecordMapping',
        'title',
        'tools',
        'tooltip',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumSidebarComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumSidebarComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumSidebarComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumSidebarComponent, selector: "bryntum-sidebar", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bbar: "bbar", bodyCls: "bodyCls", breakpoints: "breakpoints", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", collapsed: "collapsed", collapsible: "collapsible", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", floating: "floating", footer: "footer", header: "header", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", namedItems: "namedItems", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", responsive: "responsive", responsiveRoot: "responsiveRoot", responsiveState: "responsiveState", responsiveTarget: "responsiveTarget", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", side: "side", stateful: "stateful", statefulEvents: "statefulEvents", stateId: "stateId", stateProvider: "stateProvider", strips: "strips", tab: "tab", tag: "tag", tbar: "tbar", textAlign: "textAlign", textContent: "textContent", trapFocus: "trapFocus", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", title: "title", tools: "tools", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", state: "state", type: "type", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeResponsiveStateChange: "onBeforeResponsiveStateChange", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onResponsiveHeightChange: "onResponsiveHeightChange", onResponsiveStateChange: "onResponsiveStateChange", onResponsiveWidthChange: "onResponsiveWidthChange", onShow: "onShow", onToolClick: "onToolClick" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumSidebarComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-sidebar',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bbar: [{
                    type: i0.Input
                }], bodyCls: [{
                    type: i0.Input
                }], breakpoints: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], collapsed: [{
                    type: i0.Input
                }], collapsible: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], footer: [{
                    type: i0.Input
                }], header: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], responsive: [{
                    type: i0.Input
                }], responsiveRoot: [{
                    type: i0.Input
                }], responsiveState: [{
                    type: i0.Input
                }], responsiveTarget: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], side: [{
                    type: i0.Input
                }], stateful: [{
                    type: i0.Input
                }], statefulEvents: [{
                    type: i0.Input
                }], stateId: [{
                    type: i0.Input
                }], stateProvider: [{
                    type: i0.Input
                }], strips: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], tbar: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], trapFocus: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], tools: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], state: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeResponsiveStateChange: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onResponsiveHeightChange: [{
                    type: i0.Output
                }], onResponsiveStateChange: [{
                    type: i0.Output
                }], onResponsiveWidthChange: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onToolClick: [{
                    type: i0.Output
                }] } });

    var BryntumSliderComponent = /** @class */ (function () {
        function BryntumSliderComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumSliderComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumSliderComponent.instanceClass, instanceName = BryntumSliderComponent.instanceName, bryntumConfigs = BryntumSliderComponent.bryntumConfigs, bryntumEvents = BryntumSliderComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumSliderComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumSliderComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumSliderComponent.bryntumConfigsOnly, bryntumProps = BryntumSliderComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumSliderComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumSliderComponent;
    }());
    BryntumSliderComponent.instanceClass = calendar.Slider;
    BryntumSliderComponent.instanceName = 'Slider';
    BryntumSliderComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onInput',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow'
    ];
    BryntumSliderComponent.bryntumFeatureNames = [];
    BryntumSliderComponent.bryntumConfigs = BryntumSliderComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'max',
        'maxHeight',
        'maxWidth',
        'min',
        'minHeight',
        'minWidth',
        'monitorResize',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltip',
        'showTooltipWhenDisabled',
        'showValue',
        'step',
        'tab',
        'tag',
        'text',
        'textAlign',
        'title',
        'tooltip',
        'triggerChangeOnInput',
        'ui',
        'unit',
        'value',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumSliderComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'htmlCls',
        'ignoreParentReadOnly',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltip',
        'showTooltipWhenDisabled',
        'showValue',
        'tab',
        'tag',
        'textAlign',
        'title',
        'ui',
        'unit',
        'weight'
    ];
    BryntumSliderComponent.bryntumProps = BryntumSliderComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'margin',
        'max',
        'maxHeight',
        'maxWidth',
        'min',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'step',
        'text',
        'tooltip',
        'triggerChangeOnInput',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumSliderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumSliderComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumSliderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumSliderComponent, selector: "bryntum-slider", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltip: "showTooltip", showTooltipWhenDisabled: "showTooltipWhenDisabled", showValue: "showValue", tab: "tab", tag: "tag", textAlign: "textAlign", title: "title", ui: "ui", unit: "unit", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", margin: "margin", max: "max", maxHeight: "maxHeight", maxWidth: "maxWidth", min: "min", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", step: "step", text: "text", tooltip: "tooltip", triggerChangeOnInput: "triggerChangeOnInput", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", type: "type" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumSliderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-slider',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltip: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], showValue: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], unit: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], max: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], min: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], step: [{
                    type: i0.Input
                }], text: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggerChangeOnInput: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }] } });

    var BryntumSlideToggleComponent = /** @class */ (function () {
        function BryntumSlideToggleComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeChange = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onClick = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumSlideToggleComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumSlideToggleComponent.instanceClass, instanceName = BryntumSlideToggleComponent.instanceName, bryntumConfigs = BryntumSlideToggleComponent.bryntumConfigs, bryntumEvents = BryntumSlideToggleComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumSlideToggleComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumSlideToggleComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumSlideToggleComponent.bryntumConfigsOnly, bryntumProps = BryntumSlideToggleComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumSlideToggleComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumSlideToggleComponent;
    }());
    BryntumSlideToggleComponent.instanceClass = calendar.SlideToggle;
    BryntumSlideToggleComponent.instanceName = 'SlideToggle';
    BryntumSlideToggleComponent.bryntumEvents = [
        'onAction',
        'onBeforeChange',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onClick',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onTrigger'
    ];
    BryntumSlideToggleComponent.bryntumFeatureNames = [];
    BryntumSlideToggleComponent.bryntumConfigs = BryntumSlideToggleComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoCollapse',
        'autoComplete',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'checked',
        'checkedValue',
        'clearable',
        'cls',
        'color',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'editable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'keyStrokeChangeDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'text',
        'textAlign',
        'title',
        'tooltip',
        'triggers',
        'ui',
        'uncheckedValue',
        'validateOnInput',
        'value',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumSlideToggleComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoCollapse',
        'autoComplete',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'checkedValue',
        'clearable',
        'color',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'keyStrokeChangeDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'text',
        'textAlign',
        'title',
        'ui',
        'uncheckedValue',
        'validateOnInput',
        'weight'
    ];
    BryntumSlideToggleComponent.bryntumProps = BryntumSlideToggleComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'checked',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'name',
        'readOnly',
        'scrollable',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumSlideToggleComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumSlideToggleComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumSlideToggleComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumSlideToggleComponent, selector: "bryntum-slide-toggle", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoCollapse: "autoCollapse", autoComplete: "autoComplete", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", checkedValue: "checkedValue", clearable: "clearable", color: "color", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", keyStrokeChangeDelay: "keyStrokeChangeDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", owner: "owner", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tag: "tag", text: "text", textAlign: "textAlign", title: "title", ui: "ui", uncheckedValue: "uncheckedValue", validateOnInput: "validateOnInput", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", checked: "checked", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", name: "name", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeChange: "onBeforeChange", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onClick: "onClick", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumSlideToggleComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-slide-toggle',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoCollapse: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], checkedValue: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], text: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], uncheckedValue: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], checked: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeChange: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onClick: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumSplitterComponent = /** @class */ (function () {
        function BryntumSplitterComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onDrag = new i0.EventEmitter();
            this.onDragStart = new i0.EventEmitter();
            this.onDrop = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumSplitterComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumSplitterComponent.instanceClass, instanceName = BryntumSplitterComponent.instanceName, bryntumConfigs = BryntumSplitterComponent.bryntumConfigs, bryntumEvents = BryntumSplitterComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumSplitterComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumSplitterComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumSplitterComponent.bryntumConfigsOnly, bryntumProps = BryntumSplitterComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumSplitterComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumSplitterComponent;
    }());
    BryntumSplitterComponent.instanceClass = calendar.Splitter;
    BryntumSplitterComponent.instanceName = 'Splitter';
    BryntumSplitterComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onDestroy',
        'onDrag',
        'onDragStart',
        'onDrop',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow'
    ];
    BryntumSplitterComponent.bryntumFeatureNames = [];
    BryntumSplitterComponent.bryntumConfigs = BryntumSplitterComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'orientation',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'tab',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumSplitterComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'htmlCls',
        'ignoreParentReadOnly',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'orientation',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'tab',
        'tag',
        'textAlign',
        'title',
        'ui',
        'weight'
    ];
    BryntumSplitterComponent.bryntumProps = BryntumSplitterComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'tooltip',
        'type',
        'width',
        'x',
        'y'
    ]);
    BryntumSplitterComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumSplitterComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumSplitterComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumSplitterComponent, selector: "bryntum-splitter", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", orientation: "orientation", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", tab: "tab", tag: "tag", textAlign: "textAlign", title: "title", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", type: "type" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onDrag: "onDrag", onDragStart: "onDragStart", onDrop: "onDrop", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumSplitterComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-splitter',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], orientation: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onDrag: [{
                    type: i0.Output
                }], onDragStart: [{
                    type: i0.Output
                }], onDrop: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }] } });

    var BryntumTabPanelComponent = /** @class */ (function () {
        function BryntumTabPanelComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onBeforeTabChange = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTabChange = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumTabPanelComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumTabPanelComponent.instanceClass, instanceName = BryntumTabPanelComponent.instanceName, bryntumConfigs = BryntumTabPanelComponent.bryntumConfigs, bryntumEvents = BryntumTabPanelComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumTabPanelComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumTabPanelComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumTabPanelComponent.bryntumConfigsOnly, bryntumProps = BryntumTabPanelComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumTabPanelComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumTabPanelComponent;
    }());
    BryntumTabPanelComponent.instanceClass = calendar.TabPanel;
    BryntumTabPanelComponent.instanceName = 'TabPanel';
    BryntumTabPanelComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onBeforeTabChange',
        'onCatchAll',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onTabChange'
    ];
    BryntumTabPanelComponent.bryntumFeatureNames = [];
    BryntumTabPanelComponent.bryntumConfigs = BryntumTabPanelComponent.bryntumFeatureNames.concat([
        'activeTab',
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'animateTabChange',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoHeight',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'strictRecordMapping',
        'tab',
        'tabMaxWidth',
        'tabMinWidth',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'tooltip',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumTabPanelComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'animateTabChange',
        'ariaDescription',
        'ariaLabel',
        'autoHeight',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'tab',
        'tabMaxWidth',
        'tabMinWidth',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'ui',
        'weight'
    ];
    BryntumTabPanelComponent.bryntumProps = BryntumTabPanelComponent.bryntumFeatureNames.concat([
        'activeTab',
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'strictRecordMapping',
        'tooltip',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumTabPanelComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumTabPanelComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumTabPanelComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumTabPanelComponent, selector: "bryntum-tab-panel", inputs: { adopt: "adopt", align: "align", anchor: "anchor", animateTabChange: "animateTabChange", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoHeight: "autoHeight", autoUpdateRecord: "autoUpdateRecord", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", namedItems: "namedItems", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", tab: "tab", tabMaxWidth: "tabMaxWidth", tabMinWidth: "tabMinWidth", tag: "tag", textAlign: "textAlign", textContent: "textContent", title: "title", ui: "ui", weight: "weight", activeTab: "activeTab", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", type: "type", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onBeforeTabChange: "onBeforeTabChange", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTabChange: "onTabChange" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumTabPanelComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-tab-panel',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], animateTabChange: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoHeight: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tabMaxWidth: [{
                    type: i0.Input
                }], tabMinWidth: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], activeTab: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onBeforeTabChange: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTabChange: [{
                    type: i0.Output
                }] } });

    var BryntumTextAreaFieldComponent = /** @class */ (function () {
        function BryntumTextAreaFieldComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumTextAreaFieldComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumTextAreaFieldComponent.instanceClass, instanceName = BryntumTextAreaFieldComponent.instanceName, bryntumConfigs = BryntumTextAreaFieldComponent.bryntumConfigs, bryntumEvents = BryntumTextAreaFieldComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumTextAreaFieldComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumTextAreaFieldComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumTextAreaFieldComponent.bryntumConfigsOnly, bryntumProps = BryntumTextAreaFieldComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumTextAreaFieldComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumTextAreaFieldComponent;
    }());
    BryntumTextAreaFieldComponent.instanceClass = calendar.TextAreaField;
    BryntumTextAreaFieldComponent.instanceName = 'TextAreaField';
    BryntumTextAreaFieldComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onShow',
        'onTrigger'
    ];
    BryntumTextAreaFieldComponent.bryntumFeatureNames = [];
    BryntumTextAreaFieldComponent.bryntumConfigs = BryntumTextAreaFieldComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'editable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'keyStrokeChangeDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'required',
        'resize',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'triggers',
        'ui',
        'validateOnInput',
        'value',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumTextAreaFieldComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'keyStrokeChangeDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'required',
        'resize',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tag',
        'textAlign',
        'title',
        'ui',
        'validateOnInput',
        'weight'
    ];
    BryntumTextAreaFieldComponent.bryntumProps = BryntumTextAreaFieldComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumTextAreaFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumTextAreaFieldComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumTextAreaFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumTextAreaFieldComponent, selector: "bryntum-text-area-field", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoComplete: "autoComplete", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", clearable: "clearable", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", keyStrokeChangeDelay: "keyStrokeChangeDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", name: "name", owner: "owner", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", required: "required", resize: "resize", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tag: "tag", textAlign: "textAlign", title: "title", ui: "ui", validateOnInput: "validateOnInput", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumTextAreaFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-text-area-field',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], resize: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumTextAreaPickerFieldComponent = /** @class */ (function () {
        function BryntumTextAreaPickerFieldComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumTextAreaPickerFieldComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumTextAreaPickerFieldComponent.instanceClass, instanceName = BryntumTextAreaPickerFieldComponent.instanceName, bryntumConfigs = BryntumTextAreaPickerFieldComponent.bryntumConfigs, bryntumEvents = BryntumTextAreaPickerFieldComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumTextAreaPickerFieldComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumTextAreaPickerFieldComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumTextAreaPickerFieldComponent.bryntumConfigsOnly, bryntumProps = BryntumTextAreaPickerFieldComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumTextAreaPickerFieldComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumTextAreaPickerFieldComponent;
    }());
    BryntumTextAreaPickerFieldComponent.instanceClass = calendar.TextAreaPickerField;
    BryntumTextAreaPickerFieldComponent.instanceName = 'TextAreaPickerField';
    BryntumTextAreaPickerFieldComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onShow',
        'onTrigger'
    ];
    BryntumTextAreaPickerFieldComponent.bryntumFeatureNames = [];
    BryntumTextAreaPickerFieldComponent.bryntumConfigs = BryntumTextAreaPickerFieldComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoComplete',
        'autoExpand',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'editable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'keyStrokeChangeDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxLength',
        'maxWidth',
        'minHeight',
        'minLength',
        'minWidth',
        'monitorResize',
        'name',
        'owner',
        'picker',
        'pickerAlignElement',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'required',
        'resize',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'triggers',
        'ui',
        'validateOnInput',
        'value',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumTextAreaPickerFieldComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoComplete',
        'autoExpand',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'keyStrokeChangeDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maxLength',
        'minLength',
        'monitorResize',
        'name',
        'owner',
        'picker',
        'pickerAlignElement',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'required',
        'resize',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'ui',
        'validateOnInput',
        'weight'
    ];
    BryntumTextAreaPickerFieldComponent.bryntumProps = BryntumTextAreaPickerFieldComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumTextAreaPickerFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumTextAreaPickerFieldComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumTextAreaPickerFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumTextAreaPickerFieldComponent, selector: "bryntum-text-area-picker-field", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoClose: "autoClose", autoComplete: "autoComplete", autoExpand: "autoExpand", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", clearable: "clearable", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", keyStrokeChangeDelay: "keyStrokeChangeDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxLength: "maxLength", minLength: "minLength", monitorResize: "monitorResize", name: "name", owner: "owner", picker: "picker", pickerAlignElement: "pickerAlignElement", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", required: "required", resize: "resize", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tabIndex: "tabIndex", tag: "tag", textAlign: "textAlign", title: "title", ui: "ui", validateOnInput: "validateOnInput", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumTextAreaPickerFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-text-area-picker-field',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoClose: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoExpand: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maxLength: [{
                    type: i0.Input
                }], minLength: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], picker: [{
                    type: i0.Input
                }], pickerAlignElement: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], resize: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumTextFieldComponent = /** @class */ (function () {
        function BryntumTextFieldComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumTextFieldComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumTextFieldComponent.instanceClass, instanceName = BryntumTextFieldComponent.instanceName, bryntumConfigs = BryntumTextFieldComponent.bryntumConfigs, bryntumEvents = BryntumTextFieldComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumTextFieldComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumTextFieldComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumTextFieldComponent.bryntumConfigsOnly, bryntumProps = BryntumTextFieldComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumTextFieldComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumTextFieldComponent;
    }());
    BryntumTextFieldComponent.instanceClass = calendar.TextField;
    BryntumTextFieldComponent.instanceName = 'TextField';
    BryntumTextFieldComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onTrigger'
    ];
    BryntumTextFieldComponent.bryntumFeatureNames = [];
    BryntumTextFieldComponent.bryntumConfigs = BryntumTextFieldComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'editable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'keyStrokeChangeDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxLength',
        'maxWidth',
        'minHeight',
        'minLength',
        'minWidth',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'triggers',
        'ui',
        'validateOnInput',
        'value',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumTextFieldComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoComplete',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'keyStrokeChangeDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maxLength',
        'minLength',
        'monitorResize',
        'name',
        'owner',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'ui',
        'validateOnInput',
        'weight'
    ];
    BryntumTextFieldComponent.bryntumProps = BryntumTextFieldComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumTextFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumTextFieldComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumTextFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumTextFieldComponent, selector: "bryntum-text-field", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoComplete: "autoComplete", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", clearable: "clearable", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", keyStrokeChangeDelay: "keyStrokeChangeDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxLength: "maxLength", minLength: "minLength", monitorResize: "monitorResize", name: "name", owner: "owner", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tabIndex: "tabIndex", tag: "tag", textAlign: "textAlign", title: "title", ui: "ui", validateOnInput: "validateOnInput", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumTextFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-text-field',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maxLength: [{
                    type: i0.Input
                }], minLength: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumTimeFieldComponent = /** @class */ (function () {
        function BryntumTimeFieldComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumTimeFieldComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumTimeFieldComponent.instanceClass, instanceName = BryntumTimeFieldComponent.instanceName, bryntumConfigs = BryntumTimeFieldComponent.bryntumConfigs, bryntumEvents = BryntumTimeFieldComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumTimeFieldComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumTimeFieldComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumTimeFieldComponent.bryntumConfigsOnly, bryntumProps = BryntumTimeFieldComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumTimeFieldComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumTimeFieldComponent;
    }());
    BryntumTimeFieldComponent.instanceClass = calendar.TimeField;
    BryntumTimeFieldComponent.instanceName = 'TimeField';
    BryntumTimeFieldComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onTrigger'
    ];
    BryntumTimeFieldComponent.bryntumFeatureNames = [];
    BryntumTimeFieldComponent.bryntumConfigs = BryntumTimeFieldComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoComplete',
        'autoExpand',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'editable',
        'extraData',
        'flex',
        'floating',
        'format',
        'height',
        'hidden',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'keepDate',
        'keyStrokeChangeDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'max',
        'maxHeight',
        'maxLength',
        'maxWidth',
        'min',
        'minHeight',
        'minLength',
        'minWidth',
        'monitorResize',
        'name',
        'owner',
        'picker',
        'pickerAlignElement',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'step',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'triggers',
        'ui',
        'validateOnInput',
        'value',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumTimeFieldComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoComplete',
        'autoExpand',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'clearable',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'keyStrokeChangeDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maxLength',
        'minLength',
        'monitorResize',
        'name',
        'owner',
        'picker',
        'pickerAlignElement',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'ui',
        'validateOnInput',
        'weight'
    ];
    BryntumTimeFieldComponent.bryntumProps = BryntumTimeFieldComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'flex',
        'format',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'keepDate',
        'label',
        'margin',
        'max',
        'maxHeight',
        'maxWidth',
        'min',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'step',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumTimeFieldComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumTimeFieldComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumTimeFieldComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumTimeFieldComponent, selector: "bryntum-time-field", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoClose: "autoClose", autoComplete: "autoComplete", autoExpand: "autoExpand", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", clearable: "clearable", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", keyStrokeChangeDelay: "keyStrokeChangeDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxLength: "maxLength", minLength: "minLength", monitorResize: "monitorResize", name: "name", owner: "owner", picker: "picker", pickerAlignElement: "pickerAlignElement", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tabIndex: "tabIndex", tag: "tag", textAlign: "textAlign", title: "title", ui: "ui", validateOnInput: "validateOnInput", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", flex: "flex", format: "format", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", keepDate: "keepDate", label: "label", margin: "margin", max: "max", maxHeight: "maxHeight", maxWidth: "maxWidth", min: "min", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", step: "step", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumTimeFieldComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-time-field',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoClose: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoExpand: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maxLength: [{
                    type: i0.Input
                }], minLength: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], picker: [{
                    type: i0.Input
                }], pickerAlignElement: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], format: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], keepDate: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], max: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], min: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], step: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumTimePickerComponent = /** @class */ (function () {
        function BryntumTimePickerComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTimeChange = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumTimePickerComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumTimePickerComponent.instanceClass, instanceName = BryntumTimePickerComponent.instanceName, bryntumConfigs = BryntumTimePickerComponent.bryntumConfigs, bryntumEvents = BryntumTimePickerComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumTimePickerComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumTimePickerComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumTimePickerComponent.bryntumConfigsOnly, bryntumProps = BryntumTimePickerComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumTimePickerComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumTimePickerComponent;
    }());
    BryntumTimePickerComponent.instanceClass = calendar.TimePicker;
    BryntumTimePickerComponent.instanceName = 'TimePicker';
    BryntumTimePickerComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow',
        'onTimeChange'
    ];
    BryntumTimePickerComponent.bryntumFeatureNames = [];
    BryntumTimePickerComponent.bryntumConfigs = BryntumTimePickerComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'format',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'max',
        'maxHeight',
        'maxWidth',
        'min',
        'minHeight',
        'minWidth',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'seconds',
        'showAnimation',
        'showTooltipWhenDisabled',
        'strictRecordMapping',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'tooltip',
        'ui',
        'value',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumTimePickerComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'seconds',
        'showAnimation',
        'showTooltipWhenDisabled',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'ui',
        'weight'
    ];
    BryntumTimePickerComponent.bryntumProps = BryntumTimePickerComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'format',
        'height',
        'hidden',
        'html',
        'id',
        'initialValue',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'max',
        'maxHeight',
        'maxWidth',
        'min',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'strictRecordMapping',
        'tooltip',
        'type',
        'value',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumTimePickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumTimePickerComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumTimePickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumTimePickerComponent, selector: "bryntum-time-picker", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", namedItems: "namedItems", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", seconds: "seconds", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", tab: "tab", tag: "tag", textAlign: "textAlign", textContent: "textContent", title: "title", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", format: "format", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", max: "max", maxHeight: "maxHeight", maxWidth: "maxWidth", min: "min", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", tooltip: "tooltip", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", initialValue: "initialValue", isSettingValues: "isSettingValues", isValid: "isValid", type: "type", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTimeChange: "onTimeChange" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumTimePickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-time-picker',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], seconds: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], format: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], max: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], min: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], initialValue: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTimeChange: [{
                    type: i0.Output
                }] } });

    var BryntumToolbarComponent = /** @class */ (function () {
        function BryntumToolbarComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumToolbarComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumToolbarComponent.instanceClass, instanceName = BryntumToolbarComponent.instanceName, bryntumConfigs = BryntumToolbarComponent.bryntumConfigs, bryntumEvents = BryntumToolbarComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumToolbarComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumToolbarComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumToolbarComponent.bryntumConfigsOnly, bryntumProps = BryntumToolbarComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumToolbarComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumToolbarComponent;
    }());
    BryntumToolbarComponent.instanceClass = calendar.Toolbar;
    BryntumToolbarComponent.instanceName = 'Toolbar';
    BryntumToolbarComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow'
    ];
    BryntumToolbarComponent.bryntumFeatureNames = [];
    BryntumToolbarComponent.bryntumConfigs = BryntumToolbarComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'namedItems',
        'overflow',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'strictRecordMapping',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'tools',
        'tooltip',
        'ui',
        'weight',
        'widgetCls',
        'width',
        'x',
        'y'
    ]);
    BryntumToolbarComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'namedItems',
        'overflow',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'tab',
        'tag',
        'textAlign',
        'textContent',
        'title',
        'ui',
        'weight',
        'widgetCls'
    ];
    BryntumToolbarComponent.bryntumProps = BryntumToolbarComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'strictRecordMapping',
        'tools',
        'tooltip',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumToolbarComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumToolbarComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumToolbarComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumToolbarComponent, selector: "bryntum-toolbar", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", namedItems: "namedItems", overflow: "overflow", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", tab: "tab", tag: "tag", textAlign: "textAlign", textContent: "textContent", title: "title", ui: "ui", weight: "weight", widgetCls: "widgetCls", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", tools: "tools", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", type: "type", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumToolbarComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-toolbar',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], overflow: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], widgetCls: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], tools: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }] } });

    var BryntumTreeComboComponent = /** @class */ (function () {
        function BryntumTreeComboComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onSelect = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumTreeComboComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumTreeComboComponent.instanceClass, instanceName = BryntumTreeComboComponent.instanceName, bryntumConfigs = BryntumTreeComboComponent.bryntumConfigs, bryntumEvents = BryntumTreeComboComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumTreeComboComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumTreeComboComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumTreeComboComponent.bryntumConfigsOnly, bryntumProps = BryntumTreeComboComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumTreeComboComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumTreeComboComponent;
    }());
    BryntumTreeComboComponent.instanceClass = calendar.TreeCombo;
    BryntumTreeComboComponent.instanceName = 'TreeCombo';
    BryntumTreeComboComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onSelect',
        'onShow',
        'onTrigger'
    ];
    BryntumTreeComboComponent.bryntumFeatureNames = [];
    BryntumTreeComboComponent.bryntumConfigs = BryntumTreeComboComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoComplete',
        'autoExpand',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'caseSensitive',
        'centered',
        'chipView',
        'clearable',
        'clearTextOnPickerHide',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'createOnUnmatched',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'displayField',
        'displayValueRenderer',
        'dock',
        'draggable',
        'editable',
        'emptyText',
        'encodeFilterParams',
        'extraData',
        'filterOnEnter',
        'filterOperator',
        'filterParamName',
        'filterSelected',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'hidePickerOnSelect',
        'hideTrigger',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inlinePicker',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'items',
        'keyStrokeChangeDelay',
        'keyStrokeFilterDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listCls',
        'listeners',
        'listItemTpl',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxLength',
        'maxWidth',
        'minChars',
        'minHeight',
        'minLength',
        'minWidth',
        'monitorResize',
        'multiSelect',
        'multiValueSeparator',
        'name',
        'overlayAnchor',
        'owner',
        'picker',
        'pickerAlignElement',
        'pickerWidth',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'primaryFilter',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'store',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'triggerAction',
        'triggers',
        'ui',
        'validateFilter',
        'validateOnInput',
        'value',
        'valueField',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumTreeComboComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoComplete',
        'autoExpand',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'caseSensitive',
        'centered',
        'chipView',
        'clearable',
        'clearTextOnPickerHide',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'createOnUnmatched',
        'defaultBindProperty',
        'displayField',
        'displayValueRenderer',
        'dock',
        'draggable',
        'emptyText',
        'encodeFilterParams',
        'filterOnEnter',
        'filterParamName',
        'filterSelected',
        'floating',
        'hideAnimation',
        'hidePickerOnSelect',
        'hideTrigger',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inlinePicker',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'items',
        'keyStrokeChangeDelay',
        'keyStrokeFilterDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listCls',
        'listeners',
        'listItemTpl',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maxLength',
        'minChars',
        'minLength',
        'monitorResize',
        'multiSelect',
        'multiValueSeparator',
        'name',
        'overlayAnchor',
        'owner',
        'picker',
        'pickerAlignElement',
        'pickerWidth',
        'placeholder',
        'positioned',
        'preventTooltipOnTouch',
        'primaryFilter',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'triggerAction',
        'ui',
        'validateFilter',
        'validateOnInput',
        'valueField',
        'weight'
    ];
    BryntumTreeComboComponent.bryntumProps = BryntumTreeComboComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'filterOperator',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'store',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumTreeComboComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumTreeComboComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumTreeComboComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumTreeComboComponent, selector: "bryntum-tree-combo", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoClose: "autoClose", autoComplete: "autoComplete", autoExpand: "autoExpand", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", caseSensitive: "caseSensitive", centered: "centered", chipView: "chipView", clearable: "clearable", clearTextOnPickerHide: "clearTextOnPickerHide", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", createOnUnmatched: "createOnUnmatched", defaultBindProperty: "defaultBindProperty", displayField: "displayField", displayValueRenderer: "displayValueRenderer", dock: "dock", draggable: "draggable", emptyText: "emptyText", encodeFilterParams: "encodeFilterParams", filterOnEnter: "filterOnEnter", filterParamName: "filterParamName", filterSelected: "filterSelected", floating: "floating", hideAnimation: "hideAnimation", hidePickerOnSelect: "hidePickerOnSelect", hideTrigger: "hideTrigger", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inlinePicker: "inlinePicker", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", items: "items", keyStrokeChangeDelay: "keyStrokeChangeDelay", keyStrokeFilterDelay: "keyStrokeFilterDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listCls: "listCls", listeners: "listeners", listItemTpl: "listItemTpl", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxLength: "maxLength", minChars: "minChars", minLength: "minLength", monitorResize: "monitorResize", multiSelect: "multiSelect", multiValueSeparator: "multiValueSeparator", name: "name", overlayAnchor: "overlayAnchor", owner: "owner", picker: "picker", pickerAlignElement: "pickerAlignElement", pickerWidth: "pickerWidth", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", primaryFilter: "primaryFilter", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tabIndex: "tabIndex", tag: "tag", textAlign: "textAlign", title: "title", triggerAction: "triggerAction", ui: "ui", validateFilter: "validateFilter", validateOnInput: "validateOnInput", valueField: "valueField", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", filterOperator: "filterOperator", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", store: "store", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onSelect: "onSelect", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumTreeComboComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-tree-combo',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoClose: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoExpand: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], caseSensitive: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], chipView: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], clearTextOnPickerHide: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], createOnUnmatched: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], displayField: [{
                    type: i0.Input
                }], displayValueRenderer: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], emptyText: [{
                    type: i0.Input
                }], encodeFilterParams: [{
                    type: i0.Input
                }], filterOnEnter: [{
                    type: i0.Input
                }], filterParamName: [{
                    type: i0.Input
                }], filterSelected: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hidePickerOnSelect: [{
                    type: i0.Input
                }], hideTrigger: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inlinePicker: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], keyStrokeFilterDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listCls: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], listItemTpl: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maxLength: [{
                    type: i0.Input
                }], minChars: [{
                    type: i0.Input
                }], minLength: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], multiSelect: [{
                    type: i0.Input
                }], multiValueSeparator: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], overlayAnchor: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], picker: [{
                    type: i0.Input
                }], pickerAlignElement: [{
                    type: i0.Input
                }], pickerWidth: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], primaryFilter: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], triggerAction: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], validateFilter: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], valueField: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], filterOperator: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onSelect: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumUndoRedoComponent = /** @class */ (function () {
        function BryntumUndoRedoComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumUndoRedoComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumUndoRedoComponent.instanceClass, instanceName = BryntumUndoRedoComponent.instanceName, bryntumConfigs = BryntumUndoRedoComponent.bryntumConfigs, bryntumEvents = BryntumUndoRedoComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumUndoRedoComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumUndoRedoComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumUndoRedoComponent.bryntumConfigsOnly, bryntumProps = BryntumUndoRedoComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumUndoRedoComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumUndoRedoComponent;
    }());
    BryntumUndoRedoComponent.instanceClass = calendar.UndoRedo;
    BryntumUndoRedoComponent.instanceName = 'UndoRedo';
    BryntumUndoRedoComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow'
    ];
    BryntumUndoRedoComponent.bryntumFeatureNames = [];
    BryntumUndoRedoComponent.bryntumConfigs = BryntumUndoRedoComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'color',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'project',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scheduler',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'showZeroActionBadge',
        'strictRecordMapping',
        'tab',
        'tag',
        'text',
        'textAlign',
        'textContent',
        'title',
        'tooltip',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumUndoRedoComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'color',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scheduler',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'showZeroActionBadge',
        'tab',
        'tag',
        'text',
        'textAlign',
        'textContent',
        'title',
        'ui',
        'weight'
    ];
    BryntumUndoRedoComponent.bryntumProps = BryntumUndoRedoComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'project',
        'readOnly',
        'record',
        'scrollable',
        'strictRecordMapping',
        'tooltip',
        'type',
        'values',
        'width',
        'x',
        'y'
    ]);
    BryntumUndoRedoComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumUndoRedoComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumUndoRedoComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumUndoRedoComponent, selector: "bryntum-undo-redo", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", color: "color", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", namedItems: "namedItems", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scheduler: "scheduler", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", showZeroActionBadge: "showZeroActionBadge", tab: "tab", tag: "tag", text: "text", textAlign: "textAlign", textContent: "textContent", title: "title", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", project: "project", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", type: "type", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumUndoRedoComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-undo-redo',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scheduler: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], showZeroActionBadge: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], text: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], project: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }] } });

    var BryntumViewPresetComboComponent = /** @class */ (function () {
        function BryntumViewPresetComboComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onAction = new i0.EventEmitter();
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClear = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInput = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onSelect = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onTrigger = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumViewPresetComboComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumViewPresetComboComponent.instanceClass, instanceName = BryntumViewPresetComboComponent.instanceName, bryntumConfigs = BryntumViewPresetComboComponent.bryntumConfigs, bryntumEvents = BryntumViewPresetComboComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumViewPresetComboComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumViewPresetComboComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumViewPresetComboComponent.bryntumConfigsOnly, bryntumProps = BryntumViewPresetComboComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumViewPresetComboComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumViewPresetComboComponent;
    }());
    BryntumViewPresetComboComponent.instanceClass = calendar.ViewPresetCombo;
    BryntumViewPresetComboComponent.instanceName = 'ViewPresetCombo';
    BryntumViewPresetComboComponent.bryntumEvents = [
        'onAction',
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onChange',
        'onClear',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onSelect',
        'onShow',
        'onTrigger'
    ];
    BryntumViewPresetComboComponent.bryntumFeatureNames = [];
    BryntumViewPresetComboComponent.bryntumConfigs = BryntumViewPresetComboComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoComplete',
        'autoExpand',
        'autoSelect',
        'badge',
        'bubbleEvents',
        'callOnFunctions',
        'caseSensitive',
        'centered',
        'chipView',
        'clearable',
        'clearTextOnPickerHide',
        'client',
        'cls',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'content',
        'contentElementCls',
        'createOnUnmatched',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'displayField',
        'displayValueRenderer',
        'dock',
        'draggable',
        'editable',
        'emptyText',
        'encodeFilterParams',
        'extraData',
        'filterOnEnter',
        'filterOperator',
        'filterParamName',
        'filterSelected',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'hidePickerOnSelect',
        'hideTrigger',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'inline',
        'inlinePicker',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'insertBefore',
        'insertFirst',
        'items',
        'keyStrokeChangeDelay',
        'keyStrokeFilterDelay',
        'label',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listCls',
        'listeners',
        'listItemTpl',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxLength',
        'maxWidth',
        'minChars',
        'minHeight',
        'minLength',
        'minWidth',
        'monitorResize',
        'multiSelect',
        'multiValueSeparator',
        'name',
        'overlayAnchor',
        'owner',
        'picker',
        'pickerAlignElement',
        'pickerWidth',
        'placeholder',
        'positioned',
        'presets',
        'preventTooltipOnTouch',
        'primaryFilter',
        'readOnly',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'store',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'triggerAction',
        'triggers',
        'ui',
        'validateFilter',
        'validateOnInput',
        'value',
        'valueField',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumViewPresetComboComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoClose',
        'autoComplete',
        'autoExpand',
        'autoSelect',
        'bubbleEvents',
        'callOnFunctions',
        'caseSensitive',
        'centered',
        'chipView',
        'clearable',
        'clearTextOnPickerHide',
        'client',
        'config',
        'constrainTo',
        'container',
        'containValues',
        'contentElementCls',
        'createOnUnmatched',
        'defaultBindProperty',
        'displayField',
        'displayValueRenderer',
        'dock',
        'draggable',
        'emptyText',
        'encodeFilterParams',
        'filterOnEnter',
        'filterParamName',
        'filterSelected',
        'floating',
        'hideAnimation',
        'hidePickerOnSelect',
        'hideTrigger',
        'highlightExternalChange',
        'hint',
        'hintHtml',
        'htmlCls',
        'ignoreParentReadOnly',
        'inline',
        'inlinePicker',
        'inputAlign',
        'inputAttributes',
        'inputType',
        'inputWidth',
        'items',
        'keyStrokeChangeDelay',
        'keyStrokeFilterDelay',
        'labelCls',
        'labelPosition',
        'labels',
        'labelWidth',
        'listCls',
        'listeners',
        'listItemTpl',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maxLength',
        'minChars',
        'minLength',
        'monitorResize',
        'multiSelect',
        'multiValueSeparator',
        'name',
        'overlayAnchor',
        'owner',
        'picker',
        'pickerAlignElement',
        'pickerWidth',
        'placeholder',
        'positioned',
        'presets',
        'preventTooltipOnTouch',
        'primaryFilter',
        'relayStoreEvents',
        'required',
        'revertOnEscape',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'spellCheck',
        'tab',
        'tabIndex',
        'tag',
        'textAlign',
        'title',
        'triggerAction',
        'ui',
        'validateFilter',
        'validateOnInput',
        'valueField',
        'weight'
    ];
    BryntumViewPresetComboComponent.bryntumProps = BryntumViewPresetComboComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'badge',
        'cls',
        'content',
        'dataset',
        'disabled',
        'editable',
        'extraData',
        'filterOperator',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'input',
        'insertBefore',
        'insertFirst',
        'label',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'store',
        'tooltip',
        'triggers',
        'type',
        'value',
        'width',
        'x',
        'y'
    ]);
    BryntumViewPresetComboComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumViewPresetComboComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumViewPresetComboComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumViewPresetComboComponent, selector: "bryntum-view-preset-combo", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoClose: "autoClose", autoComplete: "autoComplete", autoExpand: "autoExpand", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", caseSensitive: "caseSensitive", centered: "centered", chipView: "chipView", clearable: "clearable", clearTextOnPickerHide: "clearTextOnPickerHide", client: "client", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", createOnUnmatched: "createOnUnmatched", defaultBindProperty: "defaultBindProperty", displayField: "displayField", displayValueRenderer: "displayValueRenderer", dock: "dock", draggable: "draggable", emptyText: "emptyText", encodeFilterParams: "encodeFilterParams", filterOnEnter: "filterOnEnter", filterParamName: "filterParamName", filterSelected: "filterSelected", floating: "floating", hideAnimation: "hideAnimation", hidePickerOnSelect: "hidePickerOnSelect", hideTrigger: "hideTrigger", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inlinePicker: "inlinePicker", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", items: "items", keyStrokeChangeDelay: "keyStrokeChangeDelay", keyStrokeFilterDelay: "keyStrokeFilterDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listCls: "listCls", listeners: "listeners", listItemTpl: "listItemTpl", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxLength: "maxLength", minChars: "minChars", minLength: "minLength", monitorResize: "monitorResize", multiSelect: "multiSelect", multiValueSeparator: "multiValueSeparator", name: "name", overlayAnchor: "overlayAnchor", owner: "owner", picker: "picker", pickerAlignElement: "pickerAlignElement", pickerWidth: "pickerWidth", placeholder: "placeholder", positioned: "positioned", presets: "presets", preventTooltipOnTouch: "preventTooltipOnTouch", primaryFilter: "primaryFilter", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tabIndex: "tabIndex", tag: "tag", textAlign: "textAlign", title: "title", triggerAction: "triggerAction", ui: "ui", validateFilter: "validateFilter", validateOnInput: "validateOnInput", valueField: "valueField", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", filterOperator: "filterOperator", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", store: "store", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onSelect: "onSelect", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumViewPresetComboComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-view-preset-combo',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoClose: [{
                    type: i0.Input
                }], autoComplete: [{
                    type: i0.Input
                }], autoExpand: [{
                    type: i0.Input
                }], autoSelect: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], caseSensitive: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], chipView: [{
                    type: i0.Input
                }], clearable: [{
                    type: i0.Input
                }], clearTextOnPickerHide: [{
                    type: i0.Input
                }], client: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], container: [{
                    type: i0.Input
                }], containValues: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], createOnUnmatched: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], displayField: [{
                    type: i0.Input
                }], displayValueRenderer: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], emptyText: [{
                    type: i0.Input
                }], encodeFilterParams: [{
                    type: i0.Input
                }], filterOnEnter: [{
                    type: i0.Input
                }], filterParamName: [{
                    type: i0.Input
                }], filterSelected: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hidePickerOnSelect: [{
                    type: i0.Input
                }], hideTrigger: [{
                    type: i0.Input
                }], highlightExternalChange: [{
                    type: i0.Input
                }], hint: [{
                    type: i0.Input
                }], hintHtml: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], inlinePicker: [{
                    type: i0.Input
                }], inputAlign: [{
                    type: i0.Input
                }], inputAttributes: [{
                    type: i0.Input
                }], inputType: [{
                    type: i0.Input
                }], inputWidth: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], keyStrokeChangeDelay: [{
                    type: i0.Input
                }], keyStrokeFilterDelay: [{
                    type: i0.Input
                }], labelCls: [{
                    type: i0.Input
                }], labelPosition: [{
                    type: i0.Input
                }], labels: [{
                    type: i0.Input
                }], labelWidth: [{
                    type: i0.Input
                }], listCls: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], listItemTpl: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maxLength: [{
                    type: i0.Input
                }], minChars: [{
                    type: i0.Input
                }], minLength: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], multiSelect: [{
                    type: i0.Input
                }], multiValueSeparator: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], overlayAnchor: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], picker: [{
                    type: i0.Input
                }], pickerAlignElement: [{
                    type: i0.Input
                }], pickerWidth: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], presets: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], primaryFilter: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], revertOnEscape: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], spellCheck: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tabIndex: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], triggerAction: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], validateFilter: [{
                    type: i0.Input
                }], validateOnInput: [{
                    type: i0.Input
                }], valueField: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], badge: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], editable: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], filterOperator: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], store: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], triggers: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], input: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onAction: [{
                    type: i0.Output
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.Output
                }], onClear: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onInput: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onSelect: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onTrigger: [{
                    type: i0.Output
                }] } });

    var BryntumWidgetComponent = /** @class */ (function () {
        function BryntumWidgetComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumWidgetComponent.instanceClass, instanceName = BryntumWidgetComponent.instanceName, bryntumConfigs = BryntumWidgetComponent.bryntumConfigs, bryntumEvents = BryntumWidgetComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumWidgetComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumWidgetComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumWidgetComponent.bryntumConfigsOnly, bryntumProps = BryntumWidgetComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumWidgetComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumWidgetComponent;
    }());
    BryntumWidgetComponent.instanceClass = calendar.Widget;
    BryntumWidgetComponent.instanceName = 'Widget';
    BryntumWidgetComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeShow',
        'onCatchAll',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onShow'
    ];
    BryntumWidgetComponent.bryntumFeatureNames = [];
    BryntumWidgetComponent.bryntumConfigs = BryntumWidgetComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'height',
        'hidden',
        'hideAnimation',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'monitorResize',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'tab',
        'tag',
        'textAlign',
        'title',
        'tooltip',
        'ui',
        'weight',
        'width',
        'x',
        'y'
    ]);
    BryntumWidgetComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'dock',
        'draggable',
        'floating',
        'hideAnimation',
        'htmlCls',
        'ignoreParentReadOnly',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'monitorResize',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'tab',
        'tag',
        'textAlign',
        'title',
        'ui',
        'weight'
    ];
    BryntumWidgetComponent.bryntumProps = BryntumWidgetComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'scrollable',
        'tooltip',
        'type',
        'width',
        'x',
        'y'
    ]);
    BryntumWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumWidgetComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumWidgetComponent, selector: "bryntum-widget", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", tab: "tab", tag: "tag", textAlign: "textAlign", title: "title", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", type: "type" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-widget',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }] } });

    var BryntumYearPickerComponent = /** @class */ (function () {
        function BryntumYearPickerComponent(element) {
            this.bryntumConfig = {
                adopt: undefined,
                appendTo: undefined,
                href: undefined,
                angularComponent: this,
                features: {},
                listeners: {}
            };
            // Events
            this.onBeforeDestroy = new i0.EventEmitter();
            this.onBeforeHide = new i0.EventEmitter();
            this.onBeforeSetRecord = new i0.EventEmitter();
            this.onBeforeShow = new i0.EventEmitter();
            this.onCatchAll = new i0.EventEmitter();
            this.onDestroy = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onPaint = new i0.EventEmitter();
            this.onReadOnly = new i0.EventEmitter();
            this.onRecompose = new i0.EventEmitter();
            this.onResize = new i0.EventEmitter();
            this.onSelect = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onToolClick = new i0.EventEmitter();
            this.elementRef = element;
        }
        /**
         * Create and append the underlying widget
         */
        BryntumYearPickerComponent.prototype.ngOnInit = function () {
            var _this = this;
            var me = this, elementRef = me.elementRef, bryntumConfig = me.bryntumConfig, instanceClass = BryntumYearPickerComponent.instanceClass, instanceName = BryntumYearPickerComponent.instanceName, bryntumConfigs = BryntumYearPickerComponent.bryntumConfigs, bryntumEvents = BryntumYearPickerComponent.bryntumEvents;
            bryntumConfigs.filter(function (prop) { return prop in _this; }).forEach(function (prop) {
                // @ts-ignore
                WrapperHelper.applyPropValue(bryntumConfig, prop, _this[prop]);
                if (['features', 'config'].includes(prop)) {
                    WrapperHelper.devWarningConfigProp(instanceName, prop);
                }
            });
            // @ts-ignore
            bryntumEvents.filter(function (event) { return _this[event] && _this[event].observers.length > 0; }).forEach(function (event) {
                var uncapitalize = function (str) { return str.charAt(0).toLowerCase() + str.slice(1); }, eventName = function (str) { return uncapitalize(str.slice(2)); };
                // @ts-ignore
                bryntumConfig.listeners[eventName(event)] = function (e) {
                    // @ts-ignore
                    me[event].emit(e);
                    // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                    // in Angular listeners
                    return e.returnValue;
                };
            });
            // If component has no container specified in config then use adopt to Wrapper's element
            var containerParam = [
                'adopt',
                'appendTo',
                'insertAfter',
                'insertBefore'
                // @ts-ignore
            ].find(function (prop) { return bryntumConfig[prop]; });
            if (!containerParam) {
                if (instanceName === 'Button') {
                    // Button should always be <a> or <button> inside owner element
                    bryntumConfig.appendTo = elementRef.nativeElement;
                }
                else {
                    bryntumConfig.adopt = elementRef.nativeElement;
                }
            }
            else {
                WrapperHelper.devWarningContainer(instanceName, containerParam);
            }
            // @ts-ignore
            me.instance = instanceName === 'Widget' ? calendar.WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        };
        /**
         * Watch for changes
         * @param changes
         */
        BryntumYearPickerComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var instance = this.instance, instanceName = BryntumYearPickerComponent.instanceName;
            if (!instance) {
                return;
            }
            // Iterate over all changes
            Object.entries(changes).forEach(function (_a) {
                var _b = __read(_a, 2), prop = _b[0], change = _b[1];
                var newValue = change.currentValue, instance = _this.instance, bryntumConfigsOnly = BryntumYearPickerComponent.bryntumConfigsOnly, bryntumProps = BryntumYearPickerComponent.bryntumProps;
                if (bryntumProps.includes(prop)) {
                    WrapperHelper.applyPropValue(instance, prop, newValue, false);
                    if (bryntumConfigsOnly.includes(prop)) {
                        WrapperHelper.devWarningUpdateProp(instanceName, prop);
                    }
                }
            });
        };
        /**
         * Destroy the component
         */
        BryntumYearPickerComponent.prototype.ngOnDestroy = function () {
            // @ts-ignore
            this.instance && this.instance.destroy && this.instance.destroy();
        };
        return BryntumYearPickerComponent;
    }());
    BryntumYearPickerComponent.instanceClass = calendar.YearPicker;
    BryntumYearPickerComponent.instanceName = 'YearPicker';
    BryntumYearPickerComponent.bryntumEvents = [
        'onBeforeDestroy',
        'onBeforeHide',
        'onBeforeSetRecord',
        'onBeforeShow',
        'onCatchAll',
        'onDestroy',
        'onFocusIn',
        'onFocusOut',
        'onHide',
        'onPaint',
        'onRecompose',
        'onResize',
        'onSelect',
        'onShow',
        'onToolClick'
    ];
    BryntumYearPickerComponent.bryntumFeatureNames = [];
    BryntumYearPickerComponent.bryntumConfigs = BryntumYearPickerComponent.bryntumFeatureNames.concat([
        'adopt',
        'align',
        'alignSelf',
        'anchor',
        'appendTo',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'cls',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'content',
        'contentElementCls',
        'dataset',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'disabled',
        'dock',
        'draggable',
        'extraData',
        'flex',
        'floating',
        'footer',
        'header',
        'height',
        'hidden',
        'hideAnimation',
        'hideWhenEmpty',
        'html',
        'htmlCls',
        'id',
        'ignoreParentReadOnly',
        'insertBefore',
        'insertFirst',
        'itemCls',
        'items',
        'layout',
        'layoutStyle',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'margin',
        'maskDefaults',
        'masked',
        'maxHeight',
        'maxWidth',
        'maxYear',
        'minHeight',
        'minWidth',
        'minYear',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'readOnly',
        'record',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollable',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'startYear',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strictRecordMapping',
        'strips',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'title',
        'tools',
        'tooltip',
        'trapFocus',
        'ui',
        'weight',
        'width',
        'x',
        'y',
        'year',
        'yearButtonCount'
    ]);
    BryntumYearPickerComponent.bryntumConfigsOnly = [
        'adopt',
        'align',
        'anchor',
        'ariaDescription',
        'ariaLabel',
        'autoUpdateRecord',
        'bbar',
        'bodyCls',
        'bubbleEvents',
        'callOnFunctions',
        'centered',
        'collapsed',
        'collapsible',
        'config',
        'constrainTo',
        'contentElementCls',
        'defaultBindProperty',
        'defaultFocus',
        'defaults',
        'dock',
        'draggable',
        'floating',
        'footer',
        'header',
        'hideAnimation',
        'hideWhenEmpty',
        'htmlCls',
        'ignoreParentReadOnly',
        'itemCls',
        'lazyItems',
        'listeners',
        'localeClass',
        'localizable',
        'localizableProperties',
        'maskDefaults',
        'masked',
        'maxYear',
        'minYear',
        'monitorResize',
        'namedItems',
        'owner',
        'positioned',
        'preventTooltipOnTouch',
        'relayStoreEvents',
        'ripple',
        'rootElement',
        'scrollAction',
        'showAnimation',
        'showTooltipWhenDisabled',
        'stateful',
        'statefulEvents',
        'stateId',
        'stateProvider',
        'strips',
        'tab',
        'tag',
        'tbar',
        'textAlign',
        'textContent',
        'trapFocus',
        'ui',
        'weight',
        'yearButtonCount'
    ];
    BryntumYearPickerComponent.bryntumProps = BryntumYearPickerComponent.bryntumFeatureNames.concat([
        'alignSelf',
        'anchorSize',
        'appendTo',
        'cls',
        'content',
        'dataset',
        'disabled',
        'extraData',
        'flex',
        'height',
        'hidden',
        'html',
        'id',
        'insertBefore',
        'insertFirst',
        'isSettingValues',
        'isValid',
        'items',
        'layout',
        'layoutStyle',
        'margin',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'readOnly',
        'record',
        'scrollable',
        'startYear',
        'state',
        'strictRecordMapping',
        'title',
        'tools',
        'tooltip',
        'type',
        'value',
        'values',
        'width',
        'x',
        'y',
        'year'
    ]);
    BryntumYearPickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumYearPickerComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BryntumYearPickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumYearPickerComponent, selector: "bryntum-year-picker", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bbar: "bbar", bodyCls: "bodyCls", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", collapsed: "collapsed", collapsible: "collapsible", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", floating: "floating", footer: "footer", header: "header", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxYear: "maxYear", minYear: "minYear", monitorResize: "monitorResize", namedItems: "namedItems", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", stateful: "stateful", statefulEvents: "statefulEvents", stateId: "stateId", stateProvider: "stateProvider", strips: "strips", tab: "tab", tag: "tag", tbar: "tbar", textAlign: "textAlign", textContent: "textContent", trapFocus: "trapFocus", ui: "ui", weight: "weight", yearButtonCount: "yearButtonCount", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", startYear: "startYear", strictRecordMapping: "strictRecordMapping", title: "title", tools: "tools", tooltip: "tooltip", width: "width", x: "x", y: "y", year: "year", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", state: "state", type: "type", value: "value", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onSelect: "onSelect", onShow: "onShow", onToolClick: "onToolClick" }, usesOnChanges: true, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumYearPickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bryntum-year-picker',
                        template: ''
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { adopt: [{
                    type: i0.Input
                }], align: [{
                    type: i0.Input
                }], anchor: [{
                    type: i0.Input
                }], ariaDescription: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input
                }], autoUpdateRecord: [{
                    type: i0.Input
                }], bbar: [{
                    type: i0.Input
                }], bodyCls: [{
                    type: i0.Input
                }], bubbleEvents: [{
                    type: i0.Input
                }], callOnFunctions: [{
                    type: i0.Input
                }], centered: [{
                    type: i0.Input
                }], collapsed: [{
                    type: i0.Input
                }], collapsible: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], constrainTo: [{
                    type: i0.Input
                }], contentElementCls: [{
                    type: i0.Input
                }], defaultBindProperty: [{
                    type: i0.Input
                }], defaultFocus: [{
                    type: i0.Input
                }], defaults: [{
                    type: i0.Input
                }], dock: [{
                    type: i0.Input
                }], draggable: [{
                    type: i0.Input
                }], floating: [{
                    type: i0.Input
                }], footer: [{
                    type: i0.Input
                }], header: [{
                    type: i0.Input
                }], hideAnimation: [{
                    type: i0.Input
                }], hideWhenEmpty: [{
                    type: i0.Input
                }], htmlCls: [{
                    type: i0.Input
                }], ignoreParentReadOnly: [{
                    type: i0.Input
                }], itemCls: [{
                    type: i0.Input
                }], lazyItems: [{
                    type: i0.Input
                }], listeners: [{
                    type: i0.Input
                }], localeClass: [{
                    type: i0.Input
                }], localizable: [{
                    type: i0.Input
                }], localizableProperties: [{
                    type: i0.Input
                }], maskDefaults: [{
                    type: i0.Input
                }], masked: [{
                    type: i0.Input
                }], maxYear: [{
                    type: i0.Input
                }], minYear: [{
                    type: i0.Input
                }], monitorResize: [{
                    type: i0.Input
                }], namedItems: [{
                    type: i0.Input
                }], owner: [{
                    type: i0.Input
                }], positioned: [{
                    type: i0.Input
                }], preventTooltipOnTouch: [{
                    type: i0.Input
                }], relayStoreEvents: [{
                    type: i0.Input
                }], ripple: [{
                    type: i0.Input
                }], rootElement: [{
                    type: i0.Input
                }], scrollAction: [{
                    type: i0.Input
                }], showAnimation: [{
                    type: i0.Input
                }], showTooltipWhenDisabled: [{
                    type: i0.Input
                }], stateful: [{
                    type: i0.Input
                }], statefulEvents: [{
                    type: i0.Input
                }], stateId: [{
                    type: i0.Input
                }], stateProvider: [{
                    type: i0.Input
                }], strips: [{
                    type: i0.Input
                }], tab: [{
                    type: i0.Input
                }], tag: [{
                    type: i0.Input
                }], tbar: [{
                    type: i0.Input
                }], textAlign: [{
                    type: i0.Input
                }], textContent: [{
                    type: i0.Input
                }], trapFocus: [{
                    type: i0.Input
                }], ui: [{
                    type: i0.Input
                }], weight: [{
                    type: i0.Input
                }], yearButtonCount: [{
                    type: i0.Input
                }], alignSelf: [{
                    type: i0.Input
                }], appendTo: [{
                    type: i0.Input
                }], cls: [{
                    type: i0.Input
                }], content: [{
                    type: i0.Input
                }], dataset: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], extraData: [{
                    type: i0.Input
                }], flex: [{
                    type: i0.Input
                }], height: [{
                    type: i0.Input
                }], hidden: [{
                    type: i0.Input
                }], html: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], insertBefore: [{
                    type: i0.Input
                }], insertFirst: [{
                    type: i0.Input
                }], items: [{
                    type: i0.Input
                }], layout: [{
                    type: i0.Input
                }], layoutStyle: [{
                    type: i0.Input
                }], margin: [{
                    type: i0.Input
                }], maxHeight: [{
                    type: i0.Input
                }], maxWidth: [{
                    type: i0.Input
                }], minHeight: [{
                    type: i0.Input
                }], minWidth: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], record: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], startYear: [{
                    type: i0.Input
                }], strictRecordMapping: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], tools: [{
                    type: i0.Input
                }], tooltip: [{
                    type: i0.Input
                }], width: [{
                    type: i0.Input
                }], x: [{
                    type: i0.Input
                }], y: [{
                    type: i0.Input
                }], year: [{
                    type: i0.Input
                }], anchorSize: [{
                    type: i0.Input
                }], isSettingValues: [{
                    type: i0.Input
                }], isValid: [{
                    type: i0.Input
                }], state: [{
                    type: i0.Input
                }], type: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], values: [{
                    type: i0.Input
                }], onBeforeDestroy: [{
                    type: i0.Output
                }], onBeforeHide: [{
                    type: i0.Output
                }], onBeforeSetRecord: [{
                    type: i0.Output
                }], onBeforeShow: [{
                    type: i0.Output
                }], onCatchAll: [{
                    type: i0.Output
                }], onDestroy: [{
                    type: i0.Output
                }], onFocusIn: [{
                    type: i0.Output
                }], onFocusOut: [{
                    type: i0.Output
                }], onHide: [{
                    type: i0.Output
                }], onPaint: [{
                    type: i0.Output
                }], onReadOnly: [{
                    type: i0.Output
                }], onRecompose: [{
                    type: i0.Output
                }], onResize: [{
                    type: i0.Output
                }], onSelect: [{
                    type: i0.Output
                }], onShow: [{
                    type: i0.Output
                }], onToolClick: [{
                    type: i0.Output
                }] } });

    /**
    * Angular Bryntum Calendar Shared module
    */
    var BryntumCalendarModule = /** @class */ (function () {
        function BryntumCalendarModule() {
        }
        return BryntumCalendarModule;
    }());
    BryntumCalendarModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumCalendarModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BryntumCalendarModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumCalendarModule, declarations: [BryntumFullscreenButtonComponent,
            BryntumDemoHeaderComponent,
            BryntumButtonComponent,
            BryntumButtonGroupComponent,
            BryntumCalendarComponent,
            BryntumCalendarDatePickerComponent,
            BryntumCheckboxComponent,
            BryntumChipViewComponent,
            BryntumComboComponent,
            BryntumContainerComponent,
            BryntumDateFieldComponent,
            BryntumDatePickerComponent,
            BryntumDateTimeFieldComponent,
            BryntumDisplayFieldComponent,
            BryntumDurationFieldComponent,
            BryntumFieldFilterPickerComponent,
            BryntumFieldFilterPickerGroupComponent,
            BryntumFileFieldComponent,
            BryntumFilePickerComponent,
            BryntumFilterFieldComponent,
            BryntumGridComponent,
            BryntumGridBaseComponent,
            BryntumGridFieldFilterPickerComponent,
            BryntumGridFieldFilterPickerGroupComponent,
            BryntumListComponent,
            BryntumMenuComponent,
            BryntumModeSelectorComponent,
            BryntumNumberFieldComponent,
            BryntumPagingToolbarComponent,
            BryntumPanelComponent,
            BryntumPasswordFieldComponent,
            BryntumProjectComboComponent,
            BryntumProjectModelComponent,
            BryntumRadioComponent,
            BryntumRadioGroupComponent,
            BryntumResourceComboComponent,
            BryntumResourceFilterComponent,
            BryntumResourceViewComponent,
            BryntumSchedulerDatePickerComponent,
            BryntumSidebarComponent,
            BryntumSliderComponent,
            BryntumSlideToggleComponent,
            BryntumSplitterComponent,
            BryntumTabPanelComponent,
            BryntumTextAreaFieldComponent,
            BryntumTextAreaPickerFieldComponent,
            BryntumTextFieldComponent,
            BryntumTimeFieldComponent,
            BryntumTimePickerComponent,
            BryntumToolbarComponent,
            BryntumTreeComboComponent,
            BryntumUndoRedoComponent,
            BryntumViewPresetComboComponent,
            BryntumWidgetComponent,
            BryntumYearPickerComponent], exports: [BryntumFullscreenButtonComponent,
            BryntumDemoHeaderComponent,
            BryntumButtonComponent,
            BryntumButtonGroupComponent,
            BryntumCalendarComponent,
            BryntumCalendarDatePickerComponent,
            BryntumCheckboxComponent,
            BryntumChipViewComponent,
            BryntumComboComponent,
            BryntumContainerComponent,
            BryntumDateFieldComponent,
            BryntumDatePickerComponent,
            BryntumDateTimeFieldComponent,
            BryntumDisplayFieldComponent,
            BryntumDurationFieldComponent,
            BryntumFieldFilterPickerComponent,
            BryntumFieldFilterPickerGroupComponent,
            BryntumFileFieldComponent,
            BryntumFilePickerComponent,
            BryntumFilterFieldComponent,
            BryntumGridComponent,
            BryntumGridBaseComponent,
            BryntumGridFieldFilterPickerComponent,
            BryntumGridFieldFilterPickerGroupComponent,
            BryntumListComponent,
            BryntumMenuComponent,
            BryntumModeSelectorComponent,
            BryntumNumberFieldComponent,
            BryntumPagingToolbarComponent,
            BryntumPanelComponent,
            BryntumPasswordFieldComponent,
            BryntumProjectComboComponent,
            BryntumProjectModelComponent,
            BryntumRadioComponent,
            BryntumRadioGroupComponent,
            BryntumResourceComboComponent,
            BryntumResourceFilterComponent,
            BryntumResourceViewComponent,
            BryntumSchedulerDatePickerComponent,
            BryntumSidebarComponent,
            BryntumSliderComponent,
            BryntumSlideToggleComponent,
            BryntumSplitterComponent,
            BryntumTabPanelComponent,
            BryntumTextAreaFieldComponent,
            BryntumTextAreaPickerFieldComponent,
            BryntumTextFieldComponent,
            BryntumTimeFieldComponent,
            BryntumTimePickerComponent,
            BryntumToolbarComponent,
            BryntumTreeComboComponent,
            BryntumUndoRedoComponent,
            BryntumViewPresetComboComponent,
            BryntumWidgetComponent,
            BryntumYearPickerComponent] });
    BryntumCalendarModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumCalendarModule, imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0__namespace, type: BryntumCalendarModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            BryntumFullscreenButtonComponent,
                            BryntumDemoHeaderComponent,
                            BryntumButtonComponent,
                            BryntumButtonGroupComponent,
                            BryntumCalendarComponent,
                            BryntumCalendarDatePickerComponent,
                            BryntumCheckboxComponent,
                            BryntumChipViewComponent,
                            BryntumComboComponent,
                            BryntumContainerComponent,
                            BryntumDateFieldComponent,
                            BryntumDatePickerComponent,
                            BryntumDateTimeFieldComponent,
                            BryntumDisplayFieldComponent,
                            BryntumDurationFieldComponent,
                            BryntumFieldFilterPickerComponent,
                            BryntumFieldFilterPickerGroupComponent,
                            BryntumFileFieldComponent,
                            BryntumFilePickerComponent,
                            BryntumFilterFieldComponent,
                            BryntumGridComponent,
                            BryntumGridBaseComponent,
                            BryntumGridFieldFilterPickerComponent,
                            BryntumGridFieldFilterPickerGroupComponent,
                            BryntumListComponent,
                            BryntumMenuComponent,
                            BryntumModeSelectorComponent,
                            BryntumNumberFieldComponent,
                            BryntumPagingToolbarComponent,
                            BryntumPanelComponent,
                            BryntumPasswordFieldComponent,
                            BryntumProjectComboComponent,
                            BryntumProjectModelComponent,
                            BryntumRadioComponent,
                            BryntumRadioGroupComponent,
                            BryntumResourceComboComponent,
                            BryntumResourceFilterComponent,
                            BryntumResourceViewComponent,
                            BryntumSchedulerDatePickerComponent,
                            BryntumSidebarComponent,
                            BryntumSliderComponent,
                            BryntumSlideToggleComponent,
                            BryntumSplitterComponent,
                            BryntumTabPanelComponent,
                            BryntumTextAreaFieldComponent,
                            BryntumTextAreaPickerFieldComponent,
                            BryntumTextFieldComponent,
                            BryntumTimeFieldComponent,
                            BryntumTimePickerComponent,
                            BryntumToolbarComponent,
                            BryntumTreeComboComponent,
                            BryntumUndoRedoComponent,
                            BryntumViewPresetComboComponent,
                            BryntumWidgetComponent,
                            BryntumYearPickerComponent
                        ],
                        imports: [],
                        exports: [
                            BryntumFullscreenButtonComponent,
                            BryntumDemoHeaderComponent,
                            BryntumButtonComponent,
                            BryntumButtonGroupComponent,
                            BryntumCalendarComponent,
                            BryntumCalendarDatePickerComponent,
                            BryntumCheckboxComponent,
                            BryntumChipViewComponent,
                            BryntumComboComponent,
                            BryntumContainerComponent,
                            BryntumDateFieldComponent,
                            BryntumDatePickerComponent,
                            BryntumDateTimeFieldComponent,
                            BryntumDisplayFieldComponent,
                            BryntumDurationFieldComponent,
                            BryntumFieldFilterPickerComponent,
                            BryntumFieldFilterPickerGroupComponent,
                            BryntumFileFieldComponent,
                            BryntumFilePickerComponent,
                            BryntumFilterFieldComponent,
                            BryntumGridComponent,
                            BryntumGridBaseComponent,
                            BryntumGridFieldFilterPickerComponent,
                            BryntumGridFieldFilterPickerGroupComponent,
                            BryntumListComponent,
                            BryntumMenuComponent,
                            BryntumModeSelectorComponent,
                            BryntumNumberFieldComponent,
                            BryntumPagingToolbarComponent,
                            BryntumPanelComponent,
                            BryntumPasswordFieldComponent,
                            BryntumProjectComboComponent,
                            BryntumProjectModelComponent,
                            BryntumRadioComponent,
                            BryntumRadioGroupComponent,
                            BryntumResourceComboComponent,
                            BryntumResourceFilterComponent,
                            BryntumResourceViewComponent,
                            BryntumSchedulerDatePickerComponent,
                            BryntumSidebarComponent,
                            BryntumSliderComponent,
                            BryntumSlideToggleComponent,
                            BryntumSplitterComponent,
                            BryntumTabPanelComponent,
                            BryntumTextAreaFieldComponent,
                            BryntumTextAreaPickerFieldComponent,
                            BryntumTextFieldComponent,
                            BryntumTimeFieldComponent,
                            BryntumTimePickerComponent,
                            BryntumToolbarComponent,
                            BryntumTreeComboComponent,
                            BryntumUndoRedoComponent,
                            BryntumViewPresetComboComponent,
                            BryntumWidgetComponent,
                            BryntumYearPickerComponent
                        ]
                    }]
            }] });

    /*
     * Public API Surface of Bryntum Calendar
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.BryntumButtonComponent = BryntumButtonComponent;
    exports.BryntumButtonGroupComponent = BryntumButtonGroupComponent;
    exports.BryntumCalendarComponent = BryntumCalendarComponent;
    exports.BryntumCalendarDatePickerComponent = BryntumCalendarDatePickerComponent;
    exports.BryntumCalendarModule = BryntumCalendarModule;
    exports.BryntumCheckboxComponent = BryntumCheckboxComponent;
    exports.BryntumChipViewComponent = BryntumChipViewComponent;
    exports.BryntumComboComponent = BryntumComboComponent;
    exports.BryntumContainerComponent = BryntumContainerComponent;
    exports.BryntumDateFieldComponent = BryntumDateFieldComponent;
    exports.BryntumDatePickerComponent = BryntumDatePickerComponent;
    exports.BryntumDateTimeFieldComponent = BryntumDateTimeFieldComponent;
    exports.BryntumDemoHeaderComponent = BryntumDemoHeaderComponent;
    exports.BryntumDisplayFieldComponent = BryntumDisplayFieldComponent;
    exports.BryntumDurationFieldComponent = BryntumDurationFieldComponent;
    exports.BryntumFieldFilterPickerComponent = BryntumFieldFilterPickerComponent;
    exports.BryntumFieldFilterPickerGroupComponent = BryntumFieldFilterPickerGroupComponent;
    exports.BryntumFileFieldComponent = BryntumFileFieldComponent;
    exports.BryntumFilePickerComponent = BryntumFilePickerComponent;
    exports.BryntumFilterFieldComponent = BryntumFilterFieldComponent;
    exports.BryntumFullscreenButtonComponent = BryntumFullscreenButtonComponent;
    exports.BryntumGridBaseComponent = BryntumGridBaseComponent;
    exports.BryntumGridComponent = BryntumGridComponent;
    exports.BryntumGridFieldFilterPickerComponent = BryntumGridFieldFilterPickerComponent;
    exports.BryntumGridFieldFilterPickerGroupComponent = BryntumGridFieldFilterPickerGroupComponent;
    exports.BryntumListComponent = BryntumListComponent;
    exports.BryntumMenuComponent = BryntumMenuComponent;
    exports.BryntumModeSelectorComponent = BryntumModeSelectorComponent;
    exports.BryntumNumberFieldComponent = BryntumNumberFieldComponent;
    exports.BryntumPagingToolbarComponent = BryntumPagingToolbarComponent;
    exports.BryntumPanelComponent = BryntumPanelComponent;
    exports.BryntumPasswordFieldComponent = BryntumPasswordFieldComponent;
    exports.BryntumProjectComboComponent = BryntumProjectComboComponent;
    exports.BryntumProjectModelComponent = BryntumProjectModelComponent;
    exports.BryntumRadioComponent = BryntumRadioComponent;
    exports.BryntumRadioGroupComponent = BryntumRadioGroupComponent;
    exports.BryntumResourceComboComponent = BryntumResourceComboComponent;
    exports.BryntumResourceFilterComponent = BryntumResourceFilterComponent;
    exports.BryntumResourceViewComponent = BryntumResourceViewComponent;
    exports.BryntumSchedulerDatePickerComponent = BryntumSchedulerDatePickerComponent;
    exports.BryntumSidebarComponent = BryntumSidebarComponent;
    exports.BryntumSlideToggleComponent = BryntumSlideToggleComponent;
    exports.BryntumSliderComponent = BryntumSliderComponent;
    exports.BryntumSplitterComponent = BryntumSplitterComponent;
    exports.BryntumTabPanelComponent = BryntumTabPanelComponent;
    exports.BryntumTextAreaFieldComponent = BryntumTextAreaFieldComponent;
    exports.BryntumTextAreaPickerFieldComponent = BryntumTextAreaPickerFieldComponent;
    exports.BryntumTextFieldComponent = BryntumTextFieldComponent;
    exports.BryntumTimeFieldComponent = BryntumTimeFieldComponent;
    exports.BryntumTimePickerComponent = BryntumTimePickerComponent;
    exports.BryntumToolbarComponent = BryntumToolbarComponent;
    exports.BryntumTreeComboComponent = BryntumTreeComboComponent;
    exports.BryntumUndoRedoComponent = BryntumUndoRedoComponent;
    exports.BryntumViewPresetComboComponent = BryntumViewPresetComboComponent;
    exports.BryntumWidgetComponent = BryntumWidgetComponent;
    exports.BryntumYearPickerComponent = BryntumYearPickerComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=bryntum-calendar-angular.umd.js.map
