import { isDevMode } from '@angular/core';
export default class WrapperHelper {
    /**
     * Development warning. Showed when environment is set to 'development'.
     */
    static devWarning(clsName, msg) {
        // @ts-ignore
        if (window.bryntum && window.bryntum.isTestEnv || isDevMode()) {
            console.warn(`Bryntum${clsName}Component development warning!\n${msg}\n` +
                'Please check Angular integration guide: https://bryntum.com/products/calendar/docs/guide/Calendar/integration/angular/guide');
        }
    }
    /**
     * Development warning for container parameter.
     */
    static devWarningContainer(clsName, containerParam) {
        WrapperHelper.devWarning(clsName, `Using "${containerParam}" parameter for configuration is not recommended.\n` +
            'Widget is placed automatically inside it\'s container element' +
            `Solution: remove "${containerParam}" parameter from configuration.`);
    }
    /**
     * Development warning for config parameter.
     */
    static devWarningConfigProp(clsName, prop) {
        WrapperHelper.devWarning(clsName, `Using "${prop}" parameter for configuration is not recommended.\n` +
            `Solution: Use separate parameter for each "${prop}" value to enable reactive updates of the API instance`);
    }
    /**
     * Development warning for config property.
     */
    static devWarningUpdateProp(clsName, prop) {
        WrapperHelper.devWarning(clsName, `"${prop}" is a static config option for component constructor only. No runtime changes are supported!`);
    }
    /**
     * Applies property value to Bryntum config or instance.
     * @param {Object} configOrInstance target object
     * @param {string} prop property name
     * @param {any} value value
     * @param {Boolean} isConfig config setting mode
     */
    static applyPropValue(configOrInstance, prop, value, isConfig = true) {
        if (prop === 'project') {
            // Allow use ProjectModel component as project
            if (value && typeof value === 'object') {
                configOrInstance[prop] = value.instance || value;
            }
        }
        else if (prop === 'features' && typeof value === 'object') {
            Object.keys(value).forEach(key => WrapperHelper.applyPropValue(configOrInstance, `${key}Feature`, value[key], isConfig));
        }
        else if (prop === 'config' && typeof value === 'object') {
            Object.keys(value).forEach(key => WrapperHelper.applyPropValue(configOrInstance, key, value[key], isConfig));
        }
        else if (prop === 'columns' && !isConfig) {
            configOrInstance['columns'].data = value;
        }
        else if (prop.endsWith('Feature')) {
            const features = configOrInstance['features'], featureName = prop.replace('Feature', '');
            if (isConfig) {
                features[featureName] = value;
            }
            else {
                const feature = features[featureName];
                if (feature) {
                    feature.setConfig(value);
                }
            }
        }
        else {
            configOrInstance[prop] = value;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlci5oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb21wb25lbnQvc3JjL2xpYi93cmFwcGVyLmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFDLE1BQU0sQ0FBQyxPQUFPLE9BQU8sYUFBYTtJQUM5Qjs7T0FFRztJQUNJLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBZSxFQUFFLEdBQVc7UUFDakQsYUFBYTtRQUNiLElBQUksTUFBTSxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxTQUFTLEVBQUUsRUFBRTtZQUMzRCxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsT0FBTyxtQ0FBbUMsR0FBRyxJQUFJO2dCQUN4RSw2SEFBNkgsQ0FDNUgsQ0FBQztTQUNMO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLG1CQUFtQixDQUFDLE9BQWUsRUFBRSxjQUFzQjtRQUNyRSxhQUFhLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFDNUIsVUFBVSxjQUFjLHFEQUFxRDtZQUM3RSwrREFBK0Q7WUFDL0QscUJBQXFCLGNBQWMsaUNBQWlDLENBQ3ZFLENBQUM7SUFDTixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsb0JBQW9CLENBQUMsT0FBZSxFQUFFLElBQVk7UUFDNUQsYUFBYSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQzVCLFVBQVUsSUFBSSxxREFBcUQ7WUFDbkUsOENBQThDLElBQUksd0RBQXdELENBQzdHLENBQUM7SUFDTixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsb0JBQW9CLENBQUMsT0FBZSxFQUFFLElBQVk7UUFDNUQsYUFBYSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQzVCLElBQUksSUFBSSwrRkFBK0YsQ0FDMUcsQ0FBQztJQUNOLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxNQUFNLENBQUMsY0FBYyxDQUFDLGdCQUE0QixFQUFFLElBQVksRUFBRSxLQUFpQixFQUFFLFdBQW9CLElBQUk7UUFFaEgsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQ3BCLDhDQUE4QztZQUM5QyxJQUFJLEtBQUssSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7Z0JBQ3BDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDO2FBQ3BEO1NBQ0o7YUFDSSxJQUFJLElBQUksS0FBSyxVQUFVLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQ3ZELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEdBQUcsU0FBUyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQzVIO2FBQ0ksSUFBSSxJQUFJLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUNyRCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ2hIO2FBQ0ksSUFBSSxJQUFJLEtBQUssU0FBUyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3RDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7U0FDNUM7YUFDSSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDL0IsTUFDSSxRQUFRLEdBQU0sZ0JBQWdCLENBQUMsVUFBVSxDQUFDLEVBQzFDLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUM5QyxJQUFJLFFBQVEsRUFBRTtnQkFDVixRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQ2pDO2lCQUNJO2dCQUNELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDdEMsSUFBSSxPQUFPLEVBQUU7b0JBQ1QsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDNUI7YUFDSjtTQUNKO2FBQ0k7WUFDRCxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7U0FDbEM7SUFDTCxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0Rldk1vZGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV3JhcHBlckhlbHBlciB7XG4gICAgLyoqXG4gICAgICogRGV2ZWxvcG1lbnQgd2FybmluZy4gU2hvd2VkIHdoZW4gZW52aXJvbm1lbnQgaXMgc2V0IHRvICdkZXZlbG9wbWVudCcuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBkZXZXYXJuaW5nKGNsc05hbWU6IHN0cmluZywgbXNnOiBzdHJpbmcpIDogdm9pZCB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKHdpbmRvdy5icnludHVtICYmIHdpbmRvdy5icnludHVtLmlzVGVzdEVudiB8fCBpc0Rldk1vZGUoKSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBCcnludHVtJHtjbHNOYW1lfUNvbXBvbmVudCBkZXZlbG9wbWVudCB3YXJuaW5nIVxcbiR7bXNnfVxcbmAgK1xuICAgICAgICAgICAgJ1BsZWFzZSBjaGVjayBBbmd1bGFyIGludGVncmF0aW9uIGd1aWRlOiBodHRwczovL2JyeW50dW0uY29tL3Byb2R1Y3RzL2NhbGVuZGFyL2RvY3MvZ3VpZGUvQ2FsZW5kYXIvaW50ZWdyYXRpb24vYW5ndWxhci9ndWlkZSdcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXZlbG9wbWVudCB3YXJuaW5nIGZvciBjb250YWluZXIgcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZGV2V2FybmluZ0NvbnRhaW5lcihjbHNOYW1lOiBzdHJpbmcsIGNvbnRhaW5lclBhcmFtOiBzdHJpbmcpIDogdm9pZCB7XG4gICAgICAgIFdyYXBwZXJIZWxwZXIuZGV2V2FybmluZyhjbHNOYW1lLFxuICAgICAgICAgICAgYFVzaW5nIFwiJHtjb250YWluZXJQYXJhbX1cIiBwYXJhbWV0ZXIgZm9yIGNvbmZpZ3VyYXRpb24gaXMgbm90IHJlY29tbWVuZGVkLlxcbmAgK1xuICAgICAgICAgICAgJ1dpZGdldCBpcyBwbGFjZWQgYXV0b21hdGljYWxseSBpbnNpZGUgaXRcXCdzIGNvbnRhaW5lciBlbGVtZW50JyArXG4gICAgICAgICAgICBgU29sdXRpb246IHJlbW92ZSBcIiR7Y29udGFpbmVyUGFyYW19XCIgcGFyYW1ldGVyIGZyb20gY29uZmlndXJhdGlvbi5gXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV2ZWxvcG1lbnQgd2FybmluZyBmb3IgY29uZmlnIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGRldldhcm5pbmdDb25maWdQcm9wKGNsc05hbWU6IHN0cmluZywgcHJvcDogc3RyaW5nKSA6IHZvaWQge1xuICAgICAgICBXcmFwcGVySGVscGVyLmRldldhcm5pbmcoY2xzTmFtZSxcbiAgICAgICAgICAgIGBVc2luZyBcIiR7cHJvcH1cIiBwYXJhbWV0ZXIgZm9yIGNvbmZpZ3VyYXRpb24gaXMgbm90IHJlY29tbWVuZGVkLlxcbmAgK1xuICAgICAgICAgICAgYFNvbHV0aW9uOiBVc2Ugc2VwYXJhdGUgcGFyYW1ldGVyIGZvciBlYWNoIFwiJHtwcm9wfVwiIHZhbHVlIHRvIGVuYWJsZSByZWFjdGl2ZSB1cGRhdGVzIG9mIHRoZSBBUEkgaW5zdGFuY2VgXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV2ZWxvcG1lbnQgd2FybmluZyBmb3IgY29uZmlnIHByb3BlcnR5LlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZGV2V2FybmluZ1VwZGF0ZVByb3AoY2xzTmFtZTogc3RyaW5nLCBwcm9wOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgV3JhcHBlckhlbHBlci5kZXZXYXJuaW5nKGNsc05hbWUsXG4gICAgICAgICAgICBgXCIke3Byb3B9XCIgaXMgYSBzdGF0aWMgY29uZmlnIG9wdGlvbiBmb3IgY29tcG9uZW50IGNvbnN0cnVjdG9yIG9ubHkuIE5vIHJ1bnRpbWUgY2hhbmdlcyBhcmUgc3VwcG9ydGVkIWBcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHByb3BlcnR5IHZhbHVlIHRvIEJyeW50dW0gY29uZmlnIG9yIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdPckluc3RhbmNlIHRhcmdldCBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBwcm9wZXJ0eSBuYW1lXG4gICAgICogQHBhcmFtIHthbnl9IHZhbHVlIHZhbHVlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpc0NvbmZpZyBjb25maWcgc2V0dGluZyBtb2RlXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBhcHBseVByb3BWYWx1ZShjb25maWdPckluc3RhbmNlOiBPYmplY3R8YW55LCBwcm9wOiBzdHJpbmcsIHZhbHVlOiBPYmplY3R8YW55LCBpc0NvbmZpZzogQm9vbGVhbiA9IHRydWUpOiB2b2lkIHtcblxuICAgICAgICBpZiAocHJvcCA9PT0gJ3Byb2plY3QnKSB7XG4gICAgICAgICAgICAvLyBBbGxvdyB1c2UgUHJvamVjdE1vZGVsIGNvbXBvbmVudCBhcyBwcm9qZWN0XG4gICAgICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGNvbmZpZ09ySW5zdGFuY2VbcHJvcF0gPSB2YWx1ZS5pbnN0YW5jZSB8fCB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcm9wID09PSAnZmVhdHVyZXMnICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKGtleSA9PiBXcmFwcGVySGVscGVyLmFwcGx5UHJvcFZhbHVlKGNvbmZpZ09ySW5zdGFuY2UsIGAke2tleX1GZWF0dXJlYCwgdmFsdWVba2V5XSwgaXNDb25maWcpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcm9wID09PSAnY29uZmlnJyAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaChrZXkgPT4gV3JhcHBlckhlbHBlci5hcHBseVByb3BWYWx1ZShjb25maWdPckluc3RhbmNlLCBrZXksIHZhbHVlW2tleV0sIGlzQ29uZmlnKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJvcCA9PT0gJ2NvbHVtbnMnICYmICFpc0NvbmZpZykge1xuICAgICAgICAgICAgY29uZmlnT3JJbnN0YW5jZVsnY29sdW1ucyddLmRhdGEgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcm9wLmVuZHNXaXRoKCdGZWF0dXJlJykpIHtcbiAgICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICAgICAgZmVhdHVyZXMgICAgPSBjb25maWdPckluc3RhbmNlWydmZWF0dXJlcyddLFxuICAgICAgICAgICAgICAgIGZlYXR1cmVOYW1lID0gcHJvcC5yZXBsYWNlKCdGZWF0dXJlJywgJycpO1xuICAgICAgICAgICAgaWYgKGlzQ29uZmlnKSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZXNbZmVhdHVyZU5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmZWF0dXJlID0gZmVhdHVyZXNbZmVhdHVyZU5hbWVdO1xuICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmUuc2V0Q29uZmlnKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25maWdPckluc3RhbmNlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==