/**
 * Angular wrapper for Bryntum Fullscreen button
 */
import { Component } from '@angular/core';
import { Button, Fullscreen } from '@bryntum/calendar';
import * as i0 from "@angular/core";
export class BryntumFullscreenButtonComponent {
    constructor(element) {
        this.elementRef = element;
    }
    /**
     * Initializes component
     */
    ngOnInit() {
        if (!Fullscreen.enabled) {
            return;
        }
        this.button = new Button({
            appendTo: this.elementRef.nativeElement,
            icon: 'b-icon b-icon-fullscreen',
            tooltip: 'Fullscreen',
            toggleable: true,
            onToggle: ({ pressed }) => {
                pressed ? Fullscreen.request(document.documentElement) : Fullscreen.exit();
            }
        });
        Fullscreen.onFullscreenChange(() => {
            this.button['pressed'] = Fullscreen.isFullscreen;
        });
    }
    /**
     * Destroys component
     */
    ngOnDestroy() {
        if (this.button) {
            this.button.destroy();
        }
    }
}
BryntumFullscreenButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: BryntumFullscreenButtonComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
BryntumFullscreenButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumFullscreenButtonComponent, selector: "bryntum-fullscreen-button", ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: BryntumFullscreenButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bryntum-fullscreen-button',
                    template: ''
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJ5bnR1bS1mdWxsc2NyZWVuLWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb21wb25lbnQvc3JjL2xpYi9icnludHVtLWZ1bGxzY3JlZW4tYnV0dG9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE9BQU8sRUFBRSxTQUFTLEVBQWlDLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7O0FBTXZELE1BQU0sT0FBTyxnQ0FBZ0M7SUFLekMsWUFBWSxPQUFtQjtRQUMzQixJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQztJQUM5QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRO1FBQ0osSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUU7WUFDckIsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQztZQUNyQixRQUFRLEVBQUssSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhO1lBQzFDLElBQUksRUFBUywwQkFBMEI7WUFDdkMsT0FBTyxFQUFNLFlBQVk7WUFDekIsVUFBVSxFQUFHLElBQUk7WUFDakIsUUFBUSxFQUFLLENBQUMsRUFBRSxPQUFPLEVBQXlCLEVBQUUsRUFBRTtnQkFDaEQsT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQy9FLENBQUM7U0FDSixDQUFDLENBQUM7UUFFSCxVQUFVLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFO1lBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVc7UUFDUCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDYixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ3pCO0lBQ0wsQ0FBQzs7NkhBdENRLGdDQUFnQztpSEFBaEMsZ0NBQWdDLGlFQUY5QixFQUFFOzJGQUVKLGdDQUFnQztrQkFKNUMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUcsMkJBQTJCO29CQUN0QyxRQUFRLEVBQUcsRUFBRTtpQkFDaEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFuZ3VsYXIgd3JhcHBlciBmb3IgQnJ5bnR1bSBGdWxsc2NyZWVuIGJ1dHRvblxuICovXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCdXR0b24sIEZ1bGxzY3JlZW4gfSBmcm9tICdAYnJ5bnR1bS9jYWxlbmRhcic7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yIDogJ2JyeW50dW0tZnVsbHNjcmVlbi1idXR0b24nLFxuICAgIHRlbXBsYXRlIDogJydcbn0pXG5leHBvcnQgY2xhc3MgQnJ5bnR1bUZ1bGxzY3JlZW5CdXR0b25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgLy8gY2xhc3MgdmFyaWFibGVzXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuICAgIHByaXZhdGUgYnV0dG9uITogQnV0dG9uO1xuXG4gICAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZikge1xuICAgICAgICB0aGlzLmVsZW1lbnRSZWYgPSBlbGVtZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGNvbXBvbmVudFxuICAgICAqL1xuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICBpZiAoIUZ1bGxzY3JlZW4uZW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnV0dG9uID0gbmV3IEJ1dHRvbih7XG4gICAgICAgICAgICBhcHBlbmRUbyAgIDogdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgICBpY29uICAgICAgIDogJ2ItaWNvbiBiLWljb24tZnVsbHNjcmVlbicsXG4gICAgICAgICAgICB0b29sdGlwICAgIDogJ0Z1bGxzY3JlZW4nLFxuICAgICAgICAgICAgdG9nZ2xlYWJsZSA6IHRydWUsXG4gICAgICAgICAgICBvblRvZ2dsZSAgIDogKHsgcHJlc3NlZCB9IDogeyBwcmVzc2VkIDogYm9vbGVhbn0pID0+IHtcbiAgICAgICAgICAgICAgICBwcmVzc2VkID8gRnVsbHNjcmVlbi5yZXF1ZXN0KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkgOiBGdWxsc2NyZWVuLmV4aXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgRnVsbHNjcmVlbi5vbkZ1bGxzY3JlZW5DaGFuZ2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5idXR0b25bJ3ByZXNzZWQnXSA9IEZ1bGxzY3JlZW4uaXNGdWxsc2NyZWVuO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyBjb21wb25lbnRcbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpIDogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmJ1dHRvbikge1xuICAgICAgICAgICAgdGhpcy5idXR0b24uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19