/**
 * Angular wrapper for Bryntum Grid
 */
import { Component, EventEmitter, Output, Input } from '@angular/core';
import WrapperHelper from './wrapper.helper';
import { Grid, StringHelper, WidgetHelper } from '@bryntum/calendar';
import * as i0 from "@angular/core";
export class BryntumGridComponent {
    constructor(element) {
        this.bryntumConfig = {
            adopt: undefined,
            appendTo: undefined,
            href: undefined,
            angularComponent: this,
            features: {},
            listeners: {}
        };
        // Events
        this.onBeforeCancelCellEdit = new EventEmitter();
        this.onBeforeCellDelete = new EventEmitter();
        this.onBeforeCellEditStart = new EventEmitter();
        this.onBeforeClose = new EventEmitter();
        this.onBeforeColumnDragStart = new EventEmitter();
        this.onBeforeColumnDropFinalize = new EventEmitter();
        this.onBeforeCopy = new EventEmitter();
        this.onBeforeDestroy = new EventEmitter();
        this.onBeforeFinishCellEdit = new EventEmitter();
        this.onBeforeHide = new EventEmitter();
        this.onBeforePaste = new EventEmitter();
        this.onBeforePdfExport = new EventEmitter();
        this.onBeforeRenderRow = new EventEmitter();
        this.onBeforeRenderRows = new EventEmitter();
        this.onBeforeSelectionChange = new EventEmitter();
        this.onBeforeSetRecord = new EventEmitter();
        this.onBeforeShow = new EventEmitter();
        this.onBeforeToggleGroup = new EventEmitter();
        this.onBeforeToggleNode = new EventEmitter();
        this.onCancelCellEdit = new EventEmitter();
        this.onCatchAll = new EventEmitter();
        this.onCellClick = new EventEmitter();
        this.onCellContextMenu = new EventEmitter();
        this.onCellDblClick = new EventEmitter();
        this.onCellMenuBeforeShow = new EventEmitter();
        this.onCellMenuItem = new EventEmitter();
        this.onCellMenuShow = new EventEmitter();
        this.onCellMenuToggleItem = new EventEmitter();
        this.onCellMouseOut = new EventEmitter();
        this.onCellMouseOver = new EventEmitter();
        this.onCollapseNode = new EventEmitter();
        this.onColumnDrag = new EventEmitter();
        this.onColumnDragStart = new EventEmitter();
        this.onColumnDrop = new EventEmitter();
        this.onContextMenuItem = new EventEmitter();
        this.onContextMenuToggleItem = new EventEmitter();
        this.onCopy = new EventEmitter();
        this.onDataChange = new EventEmitter();
        this.onDestroy = new EventEmitter();
        this.onDragSelecting = new EventEmitter();
        this.onExpandNode = new EventEmitter();
        this.onFinishCellEdit = new EventEmitter();
        this.onFocusIn = new EventEmitter();
        this.onFocusOut = new EventEmitter();
        this.onGridRowAbort = new EventEmitter();
        this.onGridRowBeforeDragStart = new EventEmitter();
        this.onGridRowBeforeDropFinalize = new EventEmitter();
        this.onGridRowDrag = new EventEmitter();
        this.onGridRowDragStart = new EventEmitter();
        this.onGridRowDrop = new EventEmitter();
        this.onHeaderMenuBeforeShow = new EventEmitter();
        this.onHeaderMenuItem = new EventEmitter();
        this.onHeaderMenuShow = new EventEmitter();
        this.onHeaderMenuToggleItem = new EventEmitter();
        this.onHide = new EventEmitter();
        this.onMouseOut = new EventEmitter();
        this.onMouseOver = new EventEmitter();
        this.onPaint = new EventEmitter();
        this.onPaste = new EventEmitter();
        this.onPdfExport = new EventEmitter();
        this.onPointerOver = new EventEmitter();
        this.onReadOnly = new EventEmitter();
        this.onRecompose = new EventEmitter();
        this.onRenderRow = new EventEmitter();
        this.onRenderRows = new EventEmitter();
        this.onResize = new EventEmitter();
        this.onResponsive = new EventEmitter();
        this.onScroll = new EventEmitter();
        this.onSelectionChange = new EventEmitter();
        this.onSelectionModeChange = new EventEmitter();
        this.onShow = new EventEmitter();
        this.onStartCellEdit = new EventEmitter();
        this.onSubGridCollapse = new EventEmitter();
        this.onSubGridExpand = new EventEmitter();
        this.onToggleGroup = new EventEmitter();
        this.onToggleNode = new EventEmitter();
        this.onToolClick = new EventEmitter();
        this.elementRef = element;
    }
    /**
     * Create and append the underlying widget
     */
    ngOnInit() {
        const me = this, { elementRef, bryntumConfig } = me, { instanceClass, instanceName, bryntumConfigs, bryntumEvents } = BryntumGridComponent;
        bryntumConfigs.filter(prop => prop in this).forEach(prop => {
            // @ts-ignore
            WrapperHelper.applyPropValue(bryntumConfig, prop, this[prop]);
            if (['features', 'config'].includes(prop)) {
                WrapperHelper.devWarningConfigProp(instanceName, prop);
            }
        });
        // @ts-ignore
        bryntumEvents.filter(event => this[event] && this[event].observers.length > 0).forEach(event => {
            const uncapitalize = (str) => str.charAt(0).toLowerCase() + str.slice(1), eventName = (str) => uncapitalize(str.slice(2));
            // @ts-ignore
            bryntumConfig.listeners[eventName(event)] = e => {
                // @ts-ignore
                me[event].emit(e);
                // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                // in Angular listeners
                return e.returnValue;
            };
        });
        // If component has no container specified in config then use adopt to Wrapper's element
        const containerParam = [
            'adopt',
            'appendTo',
            'insertAfter',
            'insertBefore'
            // @ts-ignore
        ].find(prop => bryntumConfig[prop]);
        if (!containerParam) {
            if (instanceName === 'Button') {
                // Button should always be <a> or <button> inside owner element
                bryntumConfig.appendTo = elementRef.nativeElement;
            }
            else {
                bryntumConfig.adopt = elementRef.nativeElement;
            }
        }
        else {
            WrapperHelper.devWarningContainer(instanceName, containerParam);
        }
        // @ts-ignore
        me.instance = instanceName === 'Widget' ? WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        // Backwards compatibility for gridInstance, schedulerInstance etc.
        // @ts-ignore
        me[StringHelper.uncapitalize(instanceName) + 'Instance'] = me.instance;
        // 
    }
    /**
     * Watch for changes
     * @param changes
     */
    ngOnChanges(changes) {
        const { instance } = this, { instanceName } = BryntumGridComponent;
        if (!instance) {
            return;
        }
        // Iterate over all changes
        Object.entries(changes).forEach(([prop, change]) => {
            const newValue = change.currentValue, { instance } = this, { bryntumConfigsOnly, bryntumProps } = BryntumGridComponent;
            if (bryntumProps.includes(prop)) {
                WrapperHelper.applyPropValue(instance, prop, newValue, false);
                if (bryntumConfigsOnly.includes(prop)) {
                    WrapperHelper.devWarningUpdateProp(instanceName, prop);
                }
            }
        });
    }
    /**
     * Destroy the component
     */
    ngOnDestroy() {
        // @ts-ignore
        this.instance && this.instance.destroy && this.instance.destroy();
    }
}
BryntumGridComponent.instanceClass = Grid;
BryntumGridComponent.instanceName = 'Grid';
BryntumGridComponent.bryntumEvents = [
    'onBeforeCancelCellEdit',
    'onBeforeCellDelete',
    'onBeforeCellEditStart',
    'onBeforeClose',
    'onBeforeColumnDragStart',
    'onBeforeColumnDropFinalize',
    'onBeforeCopy',
    'onBeforeDestroy',
    'onBeforeFinishCellEdit',
    'onBeforeHide',
    'onBeforePaste',
    'onBeforePdfExport',
    'onBeforeRenderRow',
    'onBeforeRenderRows',
    'onBeforeSelectionChange',
    'onBeforeSetRecord',
    'onBeforeShow',
    'onBeforeToggleGroup',
    'onBeforeToggleNode',
    'onCancelCellEdit',
    'onCatchAll',
    'onCellClick',
    'onCellContextMenu',
    'onCellDblClick',
    'onCellMenuBeforeShow',
    'onCellMenuItem',
    'onCellMenuShow',
    'onCellMenuToggleItem',
    'onCellMouseOut',
    'onCellMouseOver',
    'onCollapseNode',
    'onColumnDrag',
    'onColumnDragStart',
    'onColumnDrop',
    'onContextMenuItem',
    'onContextMenuToggleItem',
    'onCopy',
    'onDataChange',
    'onDestroy',
    'onDragSelecting',
    'onExpandNode',
    'onFinishCellEdit',
    'onFocusIn',
    'onFocusOut',
    'onGridRowAbort',
    'onGridRowBeforeDragStart',
    'onGridRowBeforeDropFinalize',
    'onGridRowDrag',
    'onGridRowDragStart',
    'onGridRowDrop',
    'onHeaderMenuBeforeShow',
    'onHeaderMenuItem',
    'onHeaderMenuShow',
    'onHeaderMenuToggleItem',
    'onHide',
    'onMouseOut',
    'onMouseOver',
    'onPaint',
    'onPaste',
    'onPdfExport',
    'onPointerOver',
    'onRecompose',
    'onRenderRow',
    'onRenderRows',
    'onResize',
    'onResponsive',
    'onScroll',
    'onSelectionChange',
    'onSelectionModeChange',
    'onShow',
    'onStartCellEdit',
    'onSubGridCollapse',
    'onSubGridExpand',
    'onToggleGroup',
    'onToggleNode',
    'onToolClick'
];
BryntumGridComponent.bryntumFeatureNames = [
    'cellCopyPasteFeature',
    'cellEditFeature',
    'cellMenuFeature',
    'cellTooltipFeature',
    'columnAutoWidthFeature',
    'columnDragToolbarFeature',
    'columnPickerFeature',
    'columnRenameFeature',
    'columnReorderFeature',
    'columnResizeFeature',
    'excelExporterFeature',
    'fillHandleFeature',
    'filterFeature',
    'filterBarFeature',
    'groupFeature',
    'groupSummaryFeature',
    'headerMenuFeature',
    'mergeCellsFeature',
    'multipageFeature',
    'multipageverticalFeature',
    'pdfExportFeature',
    'quickFindFeature',
    'regionResizeFeature',
    'rowCopyPasteFeature',
    'rowExpanderFeature',
    'rowReorderFeature',
    'searchFeature',
    'singlepageFeature',
    'sortFeature',
    'stickyCellsFeature',
    'stripeFeature',
    'summaryFeature',
    'treeFeature',
    'treeGroupFeature'
];
BryntumGridComponent.bryntumConfigs = BryntumGridComponent.bryntumFeatureNames.concat([
    'adopt',
    'align',
    'alignSelf',
    'allowOver',
    'anchor',
    'anchorToTarget',
    'animateRemovingRows',
    'appendTo',
    'ariaDescription',
    'ariaLabel',
    'autoClose',
    'autoHeight',
    'autoShow',
    'autoUpdateRecord',
    'bbar',
    'bodyCls',
    'bubbleEvents',
    'callOnFunctions',
    'centered',
    'closable',
    'closeAction',
    'cls',
    'collapsed',
    'collapsible',
    'columnLines',
    'columns',
    'config',
    'constrainTo',
    'content',
    'contentElementCls',
    'contextMenuTriggerEvent',
    'data',
    'dataset',
    'defaultBindProperty',
    'defaultFocus',
    'defaultRegion',
    'defaults',
    'destroyStore',
    'disabled',
    'disableGridRowModelWarning',
    'dismissDelay',
    'dock',
    'draggable',
    'emptyText',
    'enableSticky',
    'enableTextSelection',
    'enableUndoRedoKeys',
    'extraData',
    'features',
    'fillLastColumn',
    'fixedRowHeight',
    'flex',
    'floating',
    'focusOnToFront',
    'footer',
    'forElement',
    'forSelector',
    'fullRowRefresh',
    'getHtml',
    'getRowHeight',
    'header',
    'height',
    'hidden',
    'hideAnimation',
    'hideDelay',
    'hideHeaders',
    'hideOnDelegateChange',
    'hideWhenEmpty',
    'hoverDelay',
    'html',
    'htmlCls',
    'id',
    'ignoreParentReadOnly',
    'insertBefore',
    'insertFirst',
    'itemCls',
    'items',
    'keyMap',
    'layout',
    'layoutStyle',
    'lazyItems',
    'listeners',
    'loadingMsg',
    'loadMask',
    'loadMaskDefaults',
    'loadMaskError',
    'localeClass',
    'localizable',
    'localizableProperties',
    'longPressTime',
    'margin',
    'maskDefaults',
    'masked',
    'maxHeight',
    'maximizable',
    'maximized',
    'maxWidth',
    'minHeight',
    'minWidth',
    'modal',
    'monitorResize',
    'mouseOffsetX',
    'mouseOffsetY',
    'namedItems',
    'owner',
    'plugins',
    'positioned',
    'preserveFocusOnDatasetChange',
    'preserveScrollOnDatasetChange',
    'preventTooltipOnTouch',
    'readOnly',
    'record',
    'relayStoreEvents',
    'resizeToFitIncludesHeader',
    'responsiveLevels',
    'ripple',
    'rootElement',
    'rowHeight',
    'scrollable',
    'scrollAction',
    'scrollerClass',
    'scrollManager',
    'selectionMode',
    'showAnimation',
    'showDirty',
    'showOnClick',
    'showOnHover',
    'showTooltipWhenDisabled',
    'stateful',
    'statefulEvents',
    'stateId',
    'stateProvider',
    'store',
    'strictRecordMapping',
    'strips',
    'subGridConfigs',
    'syncMask',
    'tab',
    'tag',
    'tbar',
    'textAlign',
    'textContent',
    'title',
    'tools',
    'tooltip',
    'trackMouse',
    'transitionDuration',
    'trapFocus',
    'ui',
    'weight',
    'width',
    'x',
    'y'
]);
BryntumGridComponent.bryntumConfigsOnly = [
    'adopt',
    'align',
    'allowOver',
    'anchor',
    'anchorToTarget',
    'animateRemovingRows',
    'ariaDescription',
    'ariaLabel',
    'autoClose',
    'autoHeight',
    'autoShow',
    'autoUpdateRecord',
    'bbar',
    'bodyCls',
    'bubbleEvents',
    'callOnFunctions',
    'centered',
    'closable',
    'closeAction',
    'collapsed',
    'collapsible',
    'columns',
    'config',
    'constrainTo',
    'contentElementCls',
    'contextMenuTriggerEvent',
    'defaultBindProperty',
    'defaultFocus',
    'defaultRegion',
    'defaults',
    'destroyStore',
    'disableGridRowModelWarning',
    'dismissDelay',
    'dock',
    'draggable',
    'enableSticky',
    'enableTextSelection',
    'features',
    'fillLastColumn',
    'fixedRowHeight',
    'floating',
    'focusOnToFront',
    'footer',
    'forElement',
    'forSelector',
    'fullRowRefresh',
    'getHtml',
    'getRowHeight',
    'header',
    'hideAnimation',
    'hideDelay',
    'hideHeaders',
    'hideOnDelegateChange',
    'hideWhenEmpty',
    'hoverDelay',
    'htmlCls',
    'ignoreParentReadOnly',
    'itemCls',
    'keyMap',
    'lazyItems',
    'listeners',
    'loadingMsg',
    'loadMask',
    'loadMaskDefaults',
    'loadMaskError',
    'localeClass',
    'localizable',
    'localizableProperties',
    'maskDefaults',
    'masked',
    'maximizable',
    'maximized',
    'modal',
    'monitorResize',
    'mouseOffsetX',
    'mouseOffsetY',
    'namedItems',
    'owner',
    'plugins',
    'positioned',
    'preserveFocusOnDatasetChange',
    'preserveScrollOnDatasetChange',
    'preventTooltipOnTouch',
    'relayStoreEvents',
    'resizeToFitIncludesHeader',
    'responsiveLevels',
    'ripple',
    'rootElement',
    'scrollAction',
    'scrollerClass',
    'scrollManager',
    'selectionMode',
    'showAnimation',
    'showDirty',
    'showOnClick',
    'showOnHover',
    'showTooltipWhenDisabled',
    'stateful',
    'statefulEvents',
    'stateId',
    'stateProvider',
    'strips',
    'subGridConfigs',
    'syncMask',
    'tab',
    'tag',
    'tbar',
    'textAlign',
    'textContent',
    'trackMouse',
    'trapFocus',
    'ui',
    'weight'
];
BryntumGridComponent.bryntumProps = BryntumGridComponent.bryntumFeatureNames.concat([
    'alignSelf',
    'anchorSize',
    'appendTo',
    'cls',
    'columnLines',
    'content',
    'data',
    'dataset',
    'disabled',
    'emptyText',
    'enableUndoRedoKeys',
    'extraData',
    'flex',
    'height',
    'hidden',
    'html',
    'id',
    'insertBefore',
    'insertFirst',
    'isSettingValues',
    'isValid',
    'items',
    'layout',
    'layoutStyle',
    'longPressTime',
    'margin',
    'maxHeight',
    'maxWidth',
    'minHeight',
    'minWidth',
    'readOnly',
    'record',
    'rowHeight',
    'scrollable',
    'selectedCell',
    'selectedCells',
    'selectedRecord',
    'selectedRecords',
    'selectedRows',
    'state',
    'store',
    'strictRecordMapping',
    'title',
    'tools',
    'tooltip',
    'transitionDuration',
    'type',
    'values',
    'width',
    'x',
    'y'
]);
BryntumGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: BryntumGridComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
BryntumGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumGridComponent, selector: "bryntum-grid", inputs: { adopt: "adopt", align: "align", allowOver: "allowOver", anchor: "anchor", anchorToTarget: "anchorToTarget", animateRemovingRows: "animateRemovingRows", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoClose: "autoClose", autoHeight: "autoHeight", autoShow: "autoShow", autoUpdateRecord: "autoUpdateRecord", bbar: "bbar", bodyCls: "bodyCls", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", closable: "closable", closeAction: "closeAction", collapsed: "collapsed", collapsible: "collapsible", columns: "columns", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", contextMenuTriggerEvent: "contextMenuTriggerEvent", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaultRegion: "defaultRegion", defaults: "defaults", destroyStore: "destroyStore", disableGridRowModelWarning: "disableGridRowModelWarning", dismissDelay: "dismissDelay", dock: "dock", draggable: "draggable", enableSticky: "enableSticky", enableTextSelection: "enableTextSelection", features: "features", fillLastColumn: "fillLastColumn", fixedRowHeight: "fixedRowHeight", floating: "floating", focusOnToFront: "focusOnToFront", footer: "footer", forElement: "forElement", forSelector: "forSelector", fullRowRefresh: "fullRowRefresh", getHtml: "getHtml", getRowHeight: "getRowHeight", header: "header", hideAnimation: "hideAnimation", hideDelay: "hideDelay", hideHeaders: "hideHeaders", hideOnDelegateChange: "hideOnDelegateChange", hideWhenEmpty: "hideWhenEmpty", hoverDelay: "hoverDelay", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", keyMap: "keyMap", lazyItems: "lazyItems", listeners: "listeners", loadingMsg: "loadingMsg", loadMask: "loadMask", loadMaskDefaults: "loadMaskDefaults", loadMaskError: "loadMaskError", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maximizable: "maximizable", maximized: "maximized", modal: "modal", monitorResize: "monitorResize", mouseOffsetX: "mouseOffsetX", mouseOffsetY: "mouseOffsetY", namedItems: "namedItems", owner: "owner", plugins: "plugins", positioned: "positioned", preserveFocusOnDatasetChange: "preserveFocusOnDatasetChange", preserveScrollOnDatasetChange: "preserveScrollOnDatasetChange", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", resizeToFitIncludesHeader: "resizeToFitIncludesHeader", responsiveLevels: "responsiveLevels", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", scrollerClass: "scrollerClass", scrollManager: "scrollManager", selectionMode: "selectionMode", showAnimation: "showAnimation", showDirty: "showDirty", showOnClick: "showOnClick", showOnHover: "showOnHover", showTooltipWhenDisabled: "showTooltipWhenDisabled", stateful: "stateful", statefulEvents: "statefulEvents", stateId: "stateId", stateProvider: "stateProvider", strips: "strips", subGridConfigs: "subGridConfigs", syncMask: "syncMask", tab: "tab", tag: "tag", tbar: "tbar", textAlign: "textAlign", textContent: "textContent", trackMouse: "trackMouse", trapFocus: "trapFocus", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", columnLines: "columnLines", content: "content", data: "data", dataset: "dataset", disabled: "disabled", emptyText: "emptyText", enableUndoRedoKeys: "enableUndoRedoKeys", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", longPressTime: "longPressTime", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", rowHeight: "rowHeight", scrollable: "scrollable", store: "store", strictRecordMapping: "strictRecordMapping", title: "title", tools: "tools", tooltip: "tooltip", transitionDuration: "transitionDuration", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", selectedCell: "selectedCell", selectedCells: "selectedCells", selectedRecord: "selectedRecord", selectedRecords: "selectedRecords", selectedRows: "selectedRows", state: "state", type: "type", values: "values", cellCopyPasteFeature: "cellCopyPasteFeature", cellEditFeature: "cellEditFeature", cellMenuFeature: "cellMenuFeature", cellTooltipFeature: "cellTooltipFeature", columnAutoWidthFeature: "columnAutoWidthFeature", columnDragToolbarFeature: "columnDragToolbarFeature", columnPickerFeature: "columnPickerFeature", columnRenameFeature: "columnRenameFeature", columnReorderFeature: "columnReorderFeature", columnResizeFeature: "columnResizeFeature", excelExporterFeature: "excelExporterFeature", fillHandleFeature: "fillHandleFeature", filterFeature: "filterFeature", filterBarFeature: "filterBarFeature", groupFeature: "groupFeature", groupSummaryFeature: "groupSummaryFeature", headerMenuFeature: "headerMenuFeature", mergeCellsFeature: "mergeCellsFeature", multipageFeature: "multipageFeature", multipageverticalFeature: "multipageverticalFeature", pdfExportFeature: "pdfExportFeature", quickFindFeature: "quickFindFeature", regionResizeFeature: "regionResizeFeature", rowCopyPasteFeature: "rowCopyPasteFeature", rowExpanderFeature: "rowExpanderFeature", rowReorderFeature: "rowReorderFeature", searchFeature: "searchFeature", singlepageFeature: "singlepageFeature", sortFeature: "sortFeature", stickyCellsFeature: "stickyCellsFeature", stripeFeature: "stripeFeature", summaryFeature: "summaryFeature", treeFeature: "treeFeature", treeGroupFeature: "treeGroupFeature" }, outputs: { onBeforeCancelCellEdit: "onBeforeCancelCellEdit", onBeforeCellDelete: "onBeforeCellDelete", onBeforeCellEditStart: "onBeforeCellEditStart", onBeforeClose: "onBeforeClose", onBeforeColumnDragStart: "onBeforeColumnDragStart", onBeforeColumnDropFinalize: "onBeforeColumnDropFinalize", onBeforeCopy: "onBeforeCopy", onBeforeDestroy: "onBeforeDestroy", onBeforeFinishCellEdit: "onBeforeFinishCellEdit", onBeforeHide: "onBeforeHide", onBeforePaste: "onBeforePaste", onBeforePdfExport: "onBeforePdfExport", onBeforeRenderRow: "onBeforeRenderRow", onBeforeRenderRows: "onBeforeRenderRows", onBeforeSelectionChange: "onBeforeSelectionChange", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onBeforeToggleGroup: "onBeforeToggleGroup", onBeforeToggleNode: "onBeforeToggleNode", onCancelCellEdit: "onCancelCellEdit", onCatchAll: "onCatchAll", onCellClick: "onCellClick", onCellContextMenu: "onCellContextMenu", onCellDblClick: "onCellDblClick", onCellMenuBeforeShow: "onCellMenuBeforeShow", onCellMenuItem: "onCellMenuItem", onCellMenuShow: "onCellMenuShow", onCellMenuToggleItem: "onCellMenuToggleItem", onCellMouseOut: "onCellMouseOut", onCellMouseOver: "onCellMouseOver", onCollapseNode: "onCollapseNode", onColumnDrag: "onColumnDrag", onColumnDragStart: "onColumnDragStart", onColumnDrop: "onColumnDrop", onContextMenuItem: "onContextMenuItem", onContextMenuToggleItem: "onContextMenuToggleItem", onCopy: "onCopy", onDataChange: "onDataChange", onDestroy: "onDestroy", onDragSelecting: "onDragSelecting", onExpandNode: "onExpandNode", onFinishCellEdit: "onFinishCellEdit", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onGridRowAbort: "onGridRowAbort", onGridRowBeforeDragStart: "onGridRowBeforeDragStart", onGridRowBeforeDropFinalize: "onGridRowBeforeDropFinalize", onGridRowDrag: "onGridRowDrag", onGridRowDragStart: "onGridRowDragStart", onGridRowDrop: "onGridRowDrop", onHeaderMenuBeforeShow: "onHeaderMenuBeforeShow", onHeaderMenuItem: "onHeaderMenuItem", onHeaderMenuShow: "onHeaderMenuShow", onHeaderMenuToggleItem: "onHeaderMenuToggleItem", onHide: "onHide", onMouseOut: "onMouseOut", onMouseOver: "onMouseOver", onPaint: "onPaint", onPaste: "onPaste", onPdfExport: "onPdfExport", onPointerOver: "onPointerOver", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onRenderRow: "onRenderRow", onRenderRows: "onRenderRows", onResize: "onResize", onResponsive: "onResponsive", onScroll: "onScroll", onSelectionChange: "onSelectionChange", onSelectionModeChange: "onSelectionModeChange", onShow: "onShow", onStartCellEdit: "onStartCellEdit", onSubGridCollapse: "onSubGridCollapse", onSubGridExpand: "onSubGridExpand", onToggleGroup: "onToggleGroup", onToggleNode: "onToggleNode", onToolClick: "onToolClick" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: BryntumGridComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bryntum-grid',
                    template: ''
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { adopt: [{
                type: Input
            }], align: [{
                type: Input
            }], allowOver: [{
                type: Input
            }], anchor: [{
                type: Input
            }], anchorToTarget: [{
                type: Input
            }], animateRemovingRows: [{
                type: Input
            }], ariaDescription: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], autoClose: [{
                type: Input
            }], autoHeight: [{
                type: Input
            }], autoShow: [{
                type: Input
            }], autoUpdateRecord: [{
                type: Input
            }], bbar: [{
                type: Input
            }], bodyCls: [{
                type: Input
            }], bubbleEvents: [{
                type: Input
            }], callOnFunctions: [{
                type: Input
            }], centered: [{
                type: Input
            }], closable: [{
                type: Input
            }], closeAction: [{
                type: Input
            }], collapsed: [{
                type: Input
            }], collapsible: [{
                type: Input
            }], columns: [{
                type: Input
            }], config: [{
                type: Input
            }], constrainTo: [{
                type: Input
            }], contentElementCls: [{
                type: Input
            }], contextMenuTriggerEvent: [{
                type: Input
            }], defaultBindProperty: [{
                type: Input
            }], defaultFocus: [{
                type: Input
            }], defaultRegion: [{
                type: Input
            }], defaults: [{
                type: Input
            }], destroyStore: [{
                type: Input
            }], disableGridRowModelWarning: [{
                type: Input
            }], dismissDelay: [{
                type: Input
            }], dock: [{
                type: Input
            }], draggable: [{
                type: Input
            }], enableSticky: [{
                type: Input
            }], enableTextSelection: [{
                type: Input
            }], features: [{
                type: Input
            }], fillLastColumn: [{
                type: Input
            }], fixedRowHeight: [{
                type: Input
            }], floating: [{
                type: Input
            }], focusOnToFront: [{
                type: Input
            }], footer: [{
                type: Input
            }], forElement: [{
                type: Input
            }], forSelector: [{
                type: Input
            }], fullRowRefresh: [{
                type: Input
            }], getHtml: [{
                type: Input
            }], getRowHeight: [{
                type: Input
            }], header: [{
                type: Input
            }], hideAnimation: [{
                type: Input
            }], hideDelay: [{
                type: Input
            }], hideHeaders: [{
                type: Input
            }], hideOnDelegateChange: [{
                type: Input
            }], hideWhenEmpty: [{
                type: Input
            }], hoverDelay: [{
                type: Input
            }], htmlCls: [{
                type: Input
            }], ignoreParentReadOnly: [{
                type: Input
            }], itemCls: [{
                type: Input
            }], keyMap: [{
                type: Input
            }], lazyItems: [{
                type: Input
            }], listeners: [{
                type: Input
            }], loadingMsg: [{
                type: Input
            }], loadMask: [{
                type: Input
            }], loadMaskDefaults: [{
                type: Input
            }], loadMaskError: [{
                type: Input
            }], localeClass: [{
                type: Input
            }], localizable: [{
                type: Input
            }], localizableProperties: [{
                type: Input
            }], maskDefaults: [{
                type: Input
            }], masked: [{
                type: Input
            }], maximizable: [{
                type: Input
            }], maximized: [{
                type: Input
            }], modal: [{
                type: Input
            }], monitorResize: [{
                type: Input
            }], mouseOffsetX: [{
                type: Input
            }], mouseOffsetY: [{
                type: Input
            }], namedItems: [{
                type: Input
            }], owner: [{
                type: Input
            }], plugins: [{
                type: Input
            }], positioned: [{
                type: Input
            }], preserveFocusOnDatasetChange: [{
                type: Input
            }], preserveScrollOnDatasetChange: [{
                type: Input
            }], preventTooltipOnTouch: [{
                type: Input
            }], relayStoreEvents: [{
                type: Input
            }], resizeToFitIncludesHeader: [{
                type: Input
            }], responsiveLevels: [{
                type: Input
            }], ripple: [{
                type: Input
            }], rootElement: [{
                type: Input
            }], scrollAction: [{
                type: Input
            }], scrollerClass: [{
                type: Input
            }], scrollManager: [{
                type: Input
            }], selectionMode: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], showDirty: [{
                type: Input
            }], showOnClick: [{
                type: Input
            }], showOnHover: [{
                type: Input
            }], showTooltipWhenDisabled: [{
                type: Input
            }], stateful: [{
                type: Input
            }], statefulEvents: [{
                type: Input
            }], stateId: [{
                type: Input
            }], stateProvider: [{
                type: Input
            }], strips: [{
                type: Input
            }], subGridConfigs: [{
                type: Input
            }], syncMask: [{
                type: Input
            }], tab: [{
                type: Input
            }], tag: [{
                type: Input
            }], tbar: [{
                type: Input
            }], textAlign: [{
                type: Input
            }], textContent: [{
                type: Input
            }], trackMouse: [{
                type: Input
            }], trapFocus: [{
                type: Input
            }], ui: [{
                type: Input
            }], weight: [{
                type: Input
            }], alignSelf: [{
                type: Input
            }], appendTo: [{
                type: Input
            }], cls: [{
                type: Input
            }], columnLines: [{
                type: Input
            }], content: [{
                type: Input
            }], data: [{
                type: Input
            }], dataset: [{
                type: Input
            }], disabled: [{
                type: Input
            }], emptyText: [{
                type: Input
            }], enableUndoRedoKeys: [{
                type: Input
            }], extraData: [{
                type: Input
            }], flex: [{
                type: Input
            }], height: [{
                type: Input
            }], hidden: [{
                type: Input
            }], html: [{
                type: Input
            }], id: [{
                type: Input
            }], insertBefore: [{
                type: Input
            }], insertFirst: [{
                type: Input
            }], items: [{
                type: Input
            }], layout: [{
                type: Input
            }], layoutStyle: [{
                type: Input
            }], longPressTime: [{
                type: Input
            }], margin: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], minHeight: [{
                type: Input
            }], minWidth: [{
                type: Input
            }], readOnly: [{
                type: Input
            }], record: [{
                type: Input
            }], rowHeight: [{
                type: Input
            }], scrollable: [{
                type: Input
            }], store: [{
                type: Input
            }], strictRecordMapping: [{
                type: Input
            }], title: [{
                type: Input
            }], tools: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], transitionDuration: [{
                type: Input
            }], width: [{
                type: Input
            }], x: [{
                type: Input
            }], y: [{
                type: Input
            }], anchorSize: [{
                type: Input
            }], isSettingValues: [{
                type: Input
            }], isValid: [{
                type: Input
            }], selectedCell: [{
                type: Input
            }], selectedCells: [{
                type: Input
            }], selectedRecord: [{
                type: Input
            }], selectedRecords: [{
                type: Input
            }], selectedRows: [{
                type: Input
            }], state: [{
                type: Input
            }], type: [{
                type: Input
            }], values: [{
                type: Input
            }], onBeforeCancelCellEdit: [{
                type: Output
            }], onBeforeCellDelete: [{
                type: Output
            }], onBeforeCellEditStart: [{
                type: Output
            }], onBeforeClose: [{
                type: Output
            }], onBeforeColumnDragStart: [{
                type: Output
            }], onBeforeColumnDropFinalize: [{
                type: Output
            }], onBeforeCopy: [{
                type: Output
            }], onBeforeDestroy: [{
                type: Output
            }], onBeforeFinishCellEdit: [{
                type: Output
            }], onBeforeHide: [{
                type: Output
            }], onBeforePaste: [{
                type: Output
            }], onBeforePdfExport: [{
                type: Output
            }], onBeforeRenderRow: [{
                type: Output
            }], onBeforeRenderRows: [{
                type: Output
            }], onBeforeSelectionChange: [{
                type: Output
            }], onBeforeSetRecord: [{
                type: Output
            }], onBeforeShow: [{
                type: Output
            }], onBeforeToggleGroup: [{
                type: Output
            }], onBeforeToggleNode: [{
                type: Output
            }], onCancelCellEdit: [{
                type: Output
            }], onCatchAll: [{
                type: Output
            }], onCellClick: [{
                type: Output
            }], onCellContextMenu: [{
                type: Output
            }], onCellDblClick: [{
                type: Output
            }], onCellMenuBeforeShow: [{
                type: Output
            }], onCellMenuItem: [{
                type: Output
            }], onCellMenuShow: [{
                type: Output
            }], onCellMenuToggleItem: [{
                type: Output
            }], onCellMouseOut: [{
                type: Output
            }], onCellMouseOver: [{
                type: Output
            }], onCollapseNode: [{
                type: Output
            }], onColumnDrag: [{
                type: Output
            }], onColumnDragStart: [{
                type: Output
            }], onColumnDrop: [{
                type: Output
            }], onContextMenuItem: [{
                type: Output
            }], onContextMenuToggleItem: [{
                type: Output
            }], onCopy: [{
                type: Output
            }], onDataChange: [{
                type: Output
            }], onDestroy: [{
                type: Output
            }], onDragSelecting: [{
                type: Output
            }], onExpandNode: [{
                type: Output
            }], onFinishCellEdit: [{
                type: Output
            }], onFocusIn: [{
                type: Output
            }], onFocusOut: [{
                type: Output
            }], onGridRowAbort: [{
                type: Output
            }], onGridRowBeforeDragStart: [{
                type: Output
            }], onGridRowBeforeDropFinalize: [{
                type: Output
            }], onGridRowDrag: [{
                type: Output
            }], onGridRowDragStart: [{
                type: Output
            }], onGridRowDrop: [{
                type: Output
            }], onHeaderMenuBeforeShow: [{
                type: Output
            }], onHeaderMenuItem: [{
                type: Output
            }], onHeaderMenuShow: [{
                type: Output
            }], onHeaderMenuToggleItem: [{
                type: Output
            }], onHide: [{
                type: Output
            }], onMouseOut: [{
                type: Output
            }], onMouseOver: [{
                type: Output
            }], onPaint: [{
                type: Output
            }], onPaste: [{
                type: Output
            }], onPdfExport: [{
                type: Output
            }], onPointerOver: [{
                type: Output
            }], onReadOnly: [{
                type: Output
            }], onRecompose: [{
                type: Output
            }], onRenderRow: [{
                type: Output
            }], onRenderRows: [{
                type: Output
            }], onResize: [{
                type: Output
            }], onResponsive: [{
                type: Output
            }], onScroll: [{
                type: Output
            }], onSelectionChange: [{
                type: Output
            }], onSelectionModeChange: [{
                type: Output
            }], onShow: [{
                type: Output
            }], onStartCellEdit: [{
                type: Output
            }], onSubGridCollapse: [{
                type: Output
            }], onSubGridExpand: [{
                type: Output
            }], onToggleGroup: [{
                type: Output
            }], onToggleNode: [{
                type: Output
            }], onToolClick: [{
                type: Output
            }], cellCopyPasteFeature: [{
                type: Input
            }], cellEditFeature: [{
                type: Input
            }], cellMenuFeature: [{
                type: Input
            }], cellTooltipFeature: [{
                type: Input
            }], columnAutoWidthFeature: [{
                type: Input
            }], columnDragToolbarFeature: [{
                type: Input
            }], columnPickerFeature: [{
                type: Input
            }], columnRenameFeature: [{
                type: Input
            }], columnReorderFeature: [{
                type: Input
            }], columnResizeFeature: [{
                type: Input
            }], excelExporterFeature: [{
                type: Input
            }], fillHandleFeature: [{
                type: Input
            }], filterFeature: [{
                type: Input
            }], filterBarFeature: [{
                type: Input
            }], groupFeature: [{
                type: Input
            }], groupSummaryFeature: [{
                type: Input
            }], headerMenuFeature: [{
                type: Input
            }], mergeCellsFeature: [{
                type: Input
            }], multipageFeature: [{
                type: Input
            }], multipageverticalFeature: [{
                type: Input
            }], pdfExportFeature: [{
                type: Input
            }], quickFindFeature: [{
                type: Input
            }], regionResizeFeature: [{
                type: Input
            }], rowCopyPasteFeature: [{
                type: Input
            }], rowExpanderFeature: [{
                type: Input
            }], rowReorderFeature: [{
                type: Input
            }], searchFeature: [{
                type: Input
            }], singlepageFeature: [{
                type: Input
            }], sortFeature: [{
                type: Input
            }], stickyCellsFeature: [{
                type: Input
            }], stripeFeature: [{
                type: Input
            }], summaryFeature: [{
                type: Input
            }], treeFeature: [{
                type: Input
            }], treeGroupFeature: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,