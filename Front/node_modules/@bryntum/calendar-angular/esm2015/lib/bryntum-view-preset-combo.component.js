/**
 * Angular wrapper for Bryntum ViewPresetCombo
 */
import { Component, EventEmitter, Output, Input } from '@angular/core';
import WrapperHelper from './wrapper.helper';
import { ViewPresetCombo, WidgetHelper } from '@bryntum/calendar';
import * as i0 from "@angular/core";
export class BryntumViewPresetComboComponent {
    constructor(element) {
        this.bryntumConfig = {
            adopt: undefined,
            appendTo: undefined,
            href: undefined,
            angularComponent: this,
            features: {},
            listeners: {}
        };
        // Events
        this.onAction = new EventEmitter();
        this.onBeforeDestroy = new EventEmitter();
        this.onBeforeHide = new EventEmitter();
        this.onBeforeShow = new EventEmitter();
        this.onCatchAll = new EventEmitter();
        this.onChange = new EventEmitter();
        this.onClear = new EventEmitter();
        this.onDestroy = new EventEmitter();
        this.onFocusIn = new EventEmitter();
        this.onFocusOut = new EventEmitter();
        this.onHide = new EventEmitter();
        this.onInput = new EventEmitter();
        this.onPaint = new EventEmitter();
        this.onReadOnly = new EventEmitter();
        this.onRecompose = new EventEmitter();
        this.onResize = new EventEmitter();
        this.onSelect = new EventEmitter();
        this.onShow = new EventEmitter();
        this.onTrigger = new EventEmitter();
        this.elementRef = element;
    }
    /**
     * Create and append the underlying widget
     */
    ngOnInit() {
        const me = this, { elementRef, bryntumConfig } = me, { instanceClass, instanceName, bryntumConfigs, bryntumEvents } = BryntumViewPresetComboComponent;
        bryntumConfigs.filter(prop => prop in this).forEach(prop => {
            // @ts-ignore
            WrapperHelper.applyPropValue(bryntumConfig, prop, this[prop]);
            if (['features', 'config'].includes(prop)) {
                WrapperHelper.devWarningConfigProp(instanceName, prop);
            }
        });
        // @ts-ignore
        bryntumEvents.filter(event => this[event] && this[event].observers.length > 0).forEach(event => {
            const uncapitalize = (str) => str.charAt(0).toLowerCase() + str.slice(1), eventName = (str) => uncapitalize(str.slice(2));
            // @ts-ignore
            bryntumConfig.listeners[eventName(event)] = e => {
                // @ts-ignore
                me[event].emit(e);
                // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                // in Angular listeners
                return e.returnValue;
            };
        });
        // If component has no container specified in config then use adopt to Wrapper's element
        const containerParam = [
            'adopt',
            'appendTo',
            'insertAfter',
            'insertBefore'
            // @ts-ignore
        ].find(prop => bryntumConfig[prop]);
        if (!containerParam) {
            if (instanceName === 'Button') {
                // Button should always be <a> or <button> inside owner element
                bryntumConfig.appendTo = elementRef.nativeElement;
            }
            else {
                bryntumConfig.adopt = elementRef.nativeElement;
            }
        }
        else {
            WrapperHelper.devWarningContainer(instanceName, containerParam);
        }
        // @ts-ignore
        me.instance = instanceName === 'Widget' ? WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
    }
    /**
     * Watch for changes
     * @param changes
     */
    ngOnChanges(changes) {
        const { instance } = this, { instanceName } = BryntumViewPresetComboComponent;
        if (!instance) {
            return;
        }
        // Iterate over all changes
        Object.entries(changes).forEach(([prop, change]) => {
            const newValue = change.currentValue, { instance } = this, { bryntumConfigsOnly, bryntumProps } = BryntumViewPresetComboComponent;
            if (bryntumProps.includes(prop)) {
                WrapperHelper.applyPropValue(instance, prop, newValue, false);
                if (bryntumConfigsOnly.includes(prop)) {
                    WrapperHelper.devWarningUpdateProp(instanceName, prop);
                }
            }
        });
    }
    /**
     * Destroy the component
     */
    ngOnDestroy() {
        // @ts-ignore
        this.instance && this.instance.destroy && this.instance.destroy();
    }
}
BryntumViewPresetComboComponent.instanceClass = ViewPresetCombo;
BryntumViewPresetComboComponent.instanceName = 'ViewPresetCombo';
BryntumViewPresetComboComponent.bryntumEvents = [
    'onAction',
    'onBeforeDestroy',
    'onBeforeHide',
    'onBeforeShow',
    'onCatchAll',
    'onChange',
    'onClear',
    'onDestroy',
    'onFocusIn',
    'onFocusOut',
    'onHide',
    'onPaint',
    'onRecompose',
    'onResize',
    'onSelect',
    'onShow',
    'onTrigger'
];
BryntumViewPresetComboComponent.bryntumFeatureNames = [];
BryntumViewPresetComboComponent.bryntumConfigs = BryntumViewPresetComboComponent.bryntumFeatureNames.concat([
    'adopt',
    'align',
    'alignSelf',
    'anchor',
    'appendTo',
    'ariaDescription',
    'ariaLabel',
    'autoClose',
    'autoComplete',
    'autoExpand',
    'autoSelect',
    'badge',
    'bubbleEvents',
    'callOnFunctions',
    'caseSensitive',
    'centered',
    'chipView',
    'clearable',
    'clearTextOnPickerHide',
    'client',
    'cls',
    'config',
    'constrainTo',
    'container',
    'containValues',
    'content',
    'contentElementCls',
    'createOnUnmatched',
    'dataset',
    'defaultBindProperty',
    'disabled',
    'displayField',
    'displayValueRenderer',
    'dock',
    'draggable',
    'editable',
    'emptyText',
    'encodeFilterParams',
    'extraData',
    'filterOnEnter',
    'filterOperator',
    'filterParamName',
    'filterSelected',
    'flex',
    'floating',
    'height',
    'hidden',
    'hideAnimation',
    'hidePickerOnSelect',
    'hideTrigger',
    'highlightExternalChange',
    'hint',
    'hintHtml',
    'html',
    'htmlCls',
    'id',
    'ignoreParentReadOnly',
    'inline',
    'inlinePicker',
    'inputAlign',
    'inputAttributes',
    'inputType',
    'inputWidth',
    'insertBefore',
    'insertFirst',
    'items',
    'keyStrokeChangeDelay',
    'keyStrokeFilterDelay',
    'label',
    'labelCls',
    'labelPosition',
    'labels',
    'labelWidth',
    'listCls',
    'listeners',
    'listItemTpl',
    'localeClass',
    'localizable',
    'localizableProperties',
    'margin',
    'maskDefaults',
    'masked',
    'maxHeight',
    'maxLength',
    'maxWidth',
    'minChars',
    'minHeight',
    'minLength',
    'minWidth',
    'monitorResize',
    'multiSelect',
    'multiValueSeparator',
    'name',
    'overlayAnchor',
    'owner',
    'picker',
    'pickerAlignElement',
    'pickerWidth',
    'placeholder',
    'positioned',
    'presets',
    'preventTooltipOnTouch',
    'primaryFilter',
    'readOnly',
    'relayStoreEvents',
    'required',
    'revertOnEscape',
    'ripple',
    'rootElement',
    'scrollable',
    'scrollAction',
    'showAnimation',
    'showTooltipWhenDisabled',
    'spellCheck',
    'store',
    'tab',
    'tabIndex',
    'tag',
    'textAlign',
    'title',
    'tooltip',
    'triggerAction',
    'triggers',
    'ui',
    'validateFilter',
    'validateOnInput',
    'value',
    'valueField',
    'weight',
    'width',
    'x',
    'y'
]);
BryntumViewPresetComboComponent.bryntumConfigsOnly = [
    'adopt',
    'align',
    'anchor',
    'ariaDescription',
    'ariaLabel',
    'autoClose',
    'autoComplete',
    'autoExpand',
    'autoSelect',
    'bubbleEvents',
    'callOnFunctions',
    'caseSensitive',
    'centered',
    'chipView',
    'clearable',
    'clearTextOnPickerHide',
    'client',
    'config',
    'constrainTo',
    'container',
    'containValues',
    'contentElementCls',
    'createOnUnmatched',
    'defaultBindProperty',
    'displayField',
    'displayValueRenderer',
    'dock',
    'draggable',
    'emptyText',
    'encodeFilterParams',
    'filterOnEnter',
    'filterParamName',
    'filterSelected',
    'floating',
    'hideAnimation',
    'hidePickerOnSelect',
    'hideTrigger',
    'highlightExternalChange',
    'hint',
    'hintHtml',
    'htmlCls',
    'ignoreParentReadOnly',
    'inline',
    'inlinePicker',
    'inputAlign',
    'inputAttributes',
    'inputType',
    'inputWidth',
    'items',
    'keyStrokeChangeDelay',
    'keyStrokeFilterDelay',
    'labelCls',
    'labelPosition',
    'labels',
    'labelWidth',
    'listCls',
    'listeners',
    'listItemTpl',
    'localeClass',
    'localizable',
    'localizableProperties',
    'maskDefaults',
    'masked',
    'maxLength',
    'minChars',
    'minLength',
    'monitorResize',
    'multiSelect',
    'multiValueSeparator',
    'name',
    'overlayAnchor',
    'owner',
    'picker',
    'pickerAlignElement',
    'pickerWidth',
    'placeholder',
    'positioned',
    'presets',
    'preventTooltipOnTouch',
    'primaryFilter',
    'relayStoreEvents',
    'required',
    'revertOnEscape',
    'ripple',
    'rootElement',
    'scrollAction',
    'showAnimation',
    'showTooltipWhenDisabled',
    'spellCheck',
    'tab',
    'tabIndex',
    'tag',
    'textAlign',
    'title',
    'triggerAction',
    'ui',
    'validateFilter',
    'validateOnInput',
    'valueField',
    'weight'
];
BryntumViewPresetComboComponent.bryntumProps = BryntumViewPresetComboComponent.bryntumFeatureNames.concat([
    'alignSelf',
    'anchorSize',
    'appendTo',
    'badge',
    'cls',
    'content',
    'dataset',
    'disabled',
    'editable',
    'extraData',
    'filterOperator',
    'flex',
    'height',
    'hidden',
    'html',
    'id',
    'input',
    'insertBefore',
    'insertFirst',
    'label',
    'margin',
    'maxHeight',
    'maxWidth',
    'minHeight',
    'minWidth',
    'readOnly',
    'scrollable',
    'store',
    'tooltip',
    'triggers',
    'type',
    'value',
    'width',
    'x',
    'y'
]);
BryntumViewPresetComboComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: BryntumViewPresetComboComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
BryntumViewPresetComboComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumViewPresetComboComponent, selector: "bryntum-view-preset-combo", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoClose: "autoClose", autoComplete: "autoComplete", autoExpand: "autoExpand", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", caseSensitive: "caseSensitive", centered: "centered", chipView: "chipView", clearable: "clearable", clearTextOnPickerHide: "clearTextOnPickerHide", client: "client", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", createOnUnmatched: "createOnUnmatched", defaultBindProperty: "defaultBindProperty", displayField: "displayField", displayValueRenderer: "displayValueRenderer", dock: "dock", draggable: "draggable", emptyText: "emptyText", encodeFilterParams: "encodeFilterParams", filterOnEnter: "filterOnEnter", filterParamName: "filterParamName", filterSelected: "filterSelected", floating: "floating", hideAnimation: "hideAnimation", hidePickerOnSelect: "hidePickerOnSelect", hideTrigger: "hideTrigger", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inlinePicker: "inlinePicker", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", items: "items", keyStrokeChangeDelay: "keyStrokeChangeDelay", keyStrokeFilterDelay: "keyStrokeFilterDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listCls: "listCls", listeners: "listeners", listItemTpl: "listItemTpl", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxLength: "maxLength", minChars: "minChars", minLength: "minLength", monitorResize: "monitorResize", multiSelect: "multiSelect", multiValueSeparator: "multiValueSeparator", name: "name", overlayAnchor: "overlayAnchor", owner: "owner", picker: "picker", pickerAlignElement: "pickerAlignElement", pickerWidth: "pickerWidth", placeholder: "placeholder", positioned: "positioned", presets: "presets", preventTooltipOnTouch: "preventTooltipOnTouch", primaryFilter: "primaryFilter", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tabIndex: "tabIndex", tag: "tag", textAlign: "textAlign", title: "title", triggerAction: "triggerAction", ui: "ui", validateFilter: "validateFilter", validateOnInput: "validateOnInput", valueField: "valueField", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", filterOperator: "filterOperator", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", store: "store", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onSelect: "onSelect", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: BryntumViewPresetComboComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bryntum-view-preset-combo',
                    template: ''
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { adopt: [{
                type: Input
            }], align: [{
                type: Input
            }], anchor: [{
                type: Input
            }], ariaDescription: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], autoClose: [{
                type: Input
            }], autoComplete: [{
                type: Input
            }], autoExpand: [{
                type: Input
            }], autoSelect: [{
                type: Input
            }], bubbleEvents: [{
                type: Input
            }], callOnFunctions: [{
                type: Input
            }], caseSensitive: [{
                type: Input
            }], centered: [{
                type: Input
            }], chipView: [{
                type: Input
            }], clearable: [{
                type: Input
            }], clearTextOnPickerHide: [{
                type: Input
            }], client: [{
                type: Input
            }], config: [{
                type: Input
            }], constrainTo: [{
                type: Input
            }], container: [{
                type: Input
            }], containValues: [{
                type: Input
            }], contentElementCls: [{
                type: Input
            }], createOnUnmatched: [{
                type: Input
            }], defaultBindProperty: [{
                type: Input
            }], displayField: [{
                type: Input
            }], displayValueRenderer: [{
                type: Input
            }], dock: [{
                type: Input
            }], draggable: [{
                type: Input
            }], emptyText: [{
                type: Input
            }], encodeFilterParams: [{
                type: Input
            }], filterOnEnter: [{
                type: Input
            }], filterParamName: [{
                type: Input
            }], filterSelected: [{
                type: Input
            }], floating: [{
                type: Input
            }], hideAnimation: [{
                type: Input
            }], hidePickerOnSelect: [{
                type: Input
            }], hideTrigger: [{
                type: Input
            }], highlightExternalChange: [{
                type: Input
            }], hint: [{
                type: Input
            }], hintHtml: [{
                type: Input
            }], htmlCls: [{
                type: Input
            }], ignoreParentReadOnly: [{
                type: Input
            }], inline: [{
                type: Input
            }], inlinePicker: [{
                type: Input
            }], inputAlign: [{
                type: Input
            }], inputAttributes: [{
                type: Input
            }], inputType: [{
                type: Input
            }], inputWidth: [{
                type: Input
            }], items: [{
                type: Input
            }], keyStrokeChangeDelay: [{
                type: Input
            }], keyStrokeFilterDelay: [{
                type: Input
            }], labelCls: [{
                type: Input
            }], labelPosition: [{
                type: Input
            }], labels: [{
                type: Input
            }], labelWidth: [{
                type: Input
            }], listCls: [{
                type: Input
            }], listeners: [{
                type: Input
            }], listItemTpl: [{
                type: Input
            }], localeClass: [{
                type: Input
            }], localizable: [{
                type: Input
            }], localizableProperties: [{
                type: Input
            }], maskDefaults: [{
                type: Input
            }], masked: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], minChars: [{
                type: Input
            }], minLength: [{
                type: Input
            }], monitorResize: [{
                type: Input
            }], multiSelect: [{
                type: Input
            }], multiValueSeparator: [{
                type: Input
            }], name: [{
                type: Input
            }], overlayAnchor: [{
                type: Input
            }], owner: [{
                type: Input
            }], picker: [{
                type: Input
            }], pickerAlignElement: [{
                type: Input
            }], pickerWidth: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], positioned: [{
                type: Input
            }], presets: [{
                type: Input
            }], preventTooltipOnTouch: [{
                type: Input
            }], primaryFilter: [{
                type: Input
            }], relayStoreEvents: [{
                type: Input
            }], required: [{
                type: Input
            }], revertOnEscape: [{
                type: Input
            }], ripple: [{
                type: Input
            }], rootElement: [{
                type: Input
            }], scrollAction: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], showTooltipWhenDisabled: [{
                type: Input
            }], spellCheck: [{
                type: Input
            }], tab: [{
                type: Input
            }], tabIndex: [{
                type: Input
            }], tag: [{
                type: Input
            }], textAlign: [{
                type: Input
            }], title: [{
                type: Input
            }], triggerAction: [{
                type: Input
            }], ui: [{
                type: Input
            }], validateFilter: [{
                type: Input
            }], validateOnInput: [{
                type: Input
            }], valueField: [{
                type: Input
            }], weight: [{
                type: Input
            }], alignSelf: [{
                type: Input
            }], appendTo: [{
                type: Input
            }], badge: [{
                type: Input
            }], cls: [{
                type: Input
            }], content: [{
                type: Input
            }], dataset: [{
                type: Input
            }], disabled: [{
                type: Input
            }], editable: [{
                type: Input
            }], extraData: [{
                type: Input
            }], filterOperator: [{
                type: Input
            }], flex: [{
                type: Input
            }], height: [{
                type: Input
            }], hidden: [{
                type: Input
            }], html: [{
                type: Input
            }], id: [{
                type: Input
            }], insertBefore: [{
                type: Input
            }], insertFirst: [{
                type: Input
            }], label: [{
                type: Input
            }], margin: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], minHeight: [{
                type: Input
            }], minWidth: [{
                type: Input
            }], readOnly: [{
                type: Input
            }], scrollable: [{
                type: Input
            }], store: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], triggers: [{
                type: Input
            }], value: [{
                type: Input
            }], width: [{
                type: Input
            }], x: [{
                type: Input
            }], y: [{
                type: Input
            }], anchorSize: [{
                type: Input
            }], input: [{
                type: Input
            }], type: [{
                type: Input
            }], onAction: [{
                type: Output
            }], onBeforeDestroy: [{
                type: Output
            }], onBeforeHide: [{
                type: Output
            }], onBeforeShow: [{
                type: Output
            }], onCatchAll: [{
                type: Output
            }], onChange: [{
                type: Output
            }], onClear: [{
                type: Output
            }], onDestroy: [{
                type: Output
            }], onFocusIn: [{
                type: Output
            }], onFocusOut: [{
                type: Output
            }], onHide: [{
                type: Output
            }], onInput: [{
                type: Output
            }], onPaint: [{
                type: Output
            }], onReadOnly: [{
                type: Output
            }], onRecompose: [{
                type: Output
            }], onResize: [{
                type: Output
            }], onSelect: [{
                type: Output
            }], onShow: [{
                type: Output
            }], onTrigger: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,