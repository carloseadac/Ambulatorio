/**
 * Angular wrapper for Bryntum ProjectModel
 */
import { Component, EventEmitter, Output, Input } from '@angular/core';
import WrapperHelper from './wrapper.helper';
import { ProjectModel, WidgetHelper } from '@bryntum/calendar';
import * as i0 from "@angular/core";
export class BryntumProjectModelComponent {
    constructor(element) {
        this.bryntumConfig = {
            adopt: undefined,
            appendTo: undefined,
            href: undefined,
            angularComponent: this,
            features: {},
            listeners: {}
        };
        // Events
        this.onChange = new EventEmitter();
        this.onDataReady = new EventEmitter();
        this.elementRef = element;
    }
    /**
     * Create and append the underlying widget
     */
    ngOnInit() {
        const me = this, { elementRef, bryntumConfig } = me, { instanceClass, instanceName, bryntumConfigs, bryntumEvents } = BryntumProjectModelComponent;
        bryntumConfigs.filter(prop => prop in this).forEach(prop => {
            // @ts-ignore
            WrapperHelper.applyPropValue(bryntumConfig, prop, this[prop]);
            if (['features', 'config'].includes(prop)) {
                WrapperHelper.devWarningConfigProp(instanceName, prop);
            }
        });
        // @ts-ignore
        bryntumEvents.filter(event => this[event] && this[event].observers.length > 0).forEach(event => {
            const uncapitalize = (str) => str.charAt(0).toLowerCase() + str.slice(1), eventName = (str) => uncapitalize(str.slice(2));
            // @ts-ignore
            bryntumConfig.listeners[eventName(event)] = e => {
                // @ts-ignore
                me[event].emit(e);
                // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                // in Angular listeners
                return e.returnValue;
            };
        });
        // If component has no container specified in config then use adopt to Wrapper's element
        const containerParam = [
            'adopt',
            'appendTo',
            'insertAfter',
            'insertBefore'
            // @ts-ignore
        ].find(prop => bryntumConfig[prop]);
        if (!containerParam) {
            if (instanceName === 'Button') {
                // Button should always be <a> or <button> inside owner element
                bryntumConfig.appendTo = elementRef.nativeElement;
            }
            else {
                bryntumConfig.adopt = elementRef.nativeElement;
            }
        }
        else {
            WrapperHelper.devWarningContainer(instanceName, containerParam);
        }
        // @ts-ignore
        me.instance = instanceName === 'Widget' ? WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
    }
    /**
     * Watch for changes
     * @param changes
     */
    ngOnChanges(changes) {
        const { instance } = this, { instanceName } = BryntumProjectModelComponent;
        if (!instance) {
            return;
        }
        // Iterate over all changes
        Object.entries(changes).forEach(([prop, change]) => {
            const newValue = change.currentValue, { instance } = this, { bryntumConfigsOnly, bryntumProps } = BryntumProjectModelComponent;
            if (bryntumProps.includes(prop)) {
                WrapperHelper.applyPropValue(instance, prop, newValue, false);
                if (bryntumConfigsOnly.includes(prop)) {
                    WrapperHelper.devWarningUpdateProp(instanceName, prop);
                }
            }
        });
    }
    /**
     * Destroy the component
     */
    ngOnDestroy() {
        // @ts-ignore
        this.instance && this.instance.destroy && this.instance.destroy();
    }
}
BryntumProjectModelComponent.instanceClass = ProjectModel;
BryntumProjectModelComponent.instanceName = 'ProjectModel';
BryntumProjectModelComponent.bryntumEvents = [
    'onChange',
    'onDataReady'
];
BryntumProjectModelComponent.bryntumFeatureNames = [];
BryntumProjectModelComponent.bryntumConfigs = BryntumProjectModelComponent.bryntumFeatureNames.concat([
    'assignmentModelClass',
    'assignments',
    'assignmentsData',
    'assignmentStore',
    'assignmentStoreClass',
    'children',
    'dependencies',
    'dependenciesData',
    'dependencyModelClass',
    'dependencyStore',
    'dependencyStoreClass',
    'eventModelClass',
    'events',
    'eventsData',
    'eventStore',
    'eventStoreClass',
    'expanded',
    'id',
    'json',
    'orderedParentIndex',
    'parentId',
    'parentIndex',
    'readOnly',
    'resourceModelClass',
    'resources',
    'resourcesData',
    'resourceStore',
    'resourceStoreClass',
    'resourceTimeRanges',
    'resourceTimeRangesData',
    'resourceTimeRangeStore',
    'resourceTimeRangeStoreClass',
    'silenceInitialCommit',
    'stm',
    'timeRangeModelClass',
    'timeRanges',
    'timeRangesData',
    'timeRangeStore',
    'timeRangeStoreClass',
    'timeZone'
]);
BryntumProjectModelComponent.bryntumConfigsOnly = [
    'assignmentModelClass',
    'assignmentsData',
    'assignmentStoreClass',
    'dependenciesData',
    'dependencyModelClass',
    'dependencyStoreClass',
    'eventModelClass',
    'eventsData',
    'eventStoreClass',
    'expanded',
    'orderedParentIndex',
    'parentId',
    'parentIndex',
    'resourceModelClass',
    'resourcesData',
    'resourceStoreClass',
    'resourceTimeRangesData',
    'resourceTimeRangeStoreClass',
    'silenceInitialCommit',
    'timeRangeModelClass',
    'timeRangesData',
    'timeRangeStoreClass'
];
BryntumProjectModelComponent.bryntumProps = BryntumProjectModelComponent.bryntumFeatureNames.concat([
    'allChildren',
    'assignments',
    'assignmentStore',
    'autoExposeFields',
    'children',
    'childrenField',
    'convertEmptyParentToLeaf',
    'defaults',
    'dependencies',
    'dependencyStore',
    'descendantCount',
    'events',
    'eventStore',
    'hasGeneratedId',
    'id',
    'idField',
    'inlineData',
    'internalId',
    'isCommitting',
    'isCreating',
    'isValid',
    'json',
    'previousSiblingsTotalCount',
    'readOnly',
    'relations',
    'resources',
    'resourceStore',
    'resourceTimeRanges',
    'resourceTimeRangeStore',
    'stm',
    'timeRanges',
    'timeRangeStore',
    'timeZone',
    'visibleDescendantCount'
]);
BryntumProjectModelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: BryntumProjectModelComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
BryntumProjectModelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumProjectModelComponent, selector: "bryntum-project-model", inputs: { assignmentModelClass: "assignmentModelClass", assignmentsData: "assignmentsData", assignmentStoreClass: "assignmentStoreClass", dependenciesData: "dependenciesData", dependencyModelClass: "dependencyModelClass", dependencyStoreClass: "dependencyStoreClass", eventModelClass: "eventModelClass", eventsData: "eventsData", eventStoreClass: "eventStoreClass", expanded: "expanded", orderedParentIndex: "orderedParentIndex", parentId: "parentId", parentIndex: "parentIndex", resourceModelClass: "resourceModelClass", resourcesData: "resourcesData", resourceStoreClass: "resourceStoreClass", resourceTimeRangesData: "resourceTimeRangesData", resourceTimeRangeStoreClass: "resourceTimeRangeStoreClass", silenceInitialCommit: "silenceInitialCommit", timeRangeModelClass: "timeRangeModelClass", timeRangesData: "timeRangesData", timeRangeStoreClass: "timeRangeStoreClass", assignments: "assignments", assignmentStore: "assignmentStore", children: "children", dependencies: "dependencies", dependencyStore: "dependencyStore", events: "events", eventStore: "eventStore", id: "id", json: "json", readOnly: "readOnly", resources: "resources", resourceStore: "resourceStore", resourceTimeRanges: "resourceTimeRanges", resourceTimeRangeStore: "resourceTimeRangeStore", stm: "stm", timeRanges: "timeRanges", timeRangeStore: "timeRangeStore", timeZone: "timeZone", allChildren: "allChildren", autoExposeFields: "autoExposeFields", childrenField: "childrenField", convertEmptyParentToLeaf: "convertEmptyParentToLeaf", defaults: "defaults", descendantCount: "descendantCount", hasGeneratedId: "hasGeneratedId", idField: "idField", inlineData: "inlineData", internalId: "internalId", isCommitting: "isCommitting", isCreating: "isCreating", isValid: "isValid", previousSiblingsTotalCount: "previousSiblingsTotalCount", relations: "relations", visibleDescendantCount: "visibleDescendantCount" }, outputs: { onChange: "onChange", onDataReady: "onDataReady" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: BryntumProjectModelComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bryntum-project-model',
                    template: ''
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { assignmentModelClass: [{
                type: Input
            }], assignmentsData: [{
                type: Input
            }], assignmentStoreClass: [{
                type: Input
            }], dependenciesData: [{
                type: Input
            }], dependencyModelClass: [{
                type: Input
            }], dependencyStoreClass: [{
                type: Input
            }], eventModelClass: [{
                type: Input
            }], eventsData: [{
                type: Input
            }], eventStoreClass: [{
                type: Input
            }], expanded: [{
                type: Input
            }], orderedParentIndex: [{
                type: Input
            }], parentId: [{
                type: Input
            }], parentIndex: [{
                type: Input
            }], resourceModelClass: [{
                type: Input
            }], resourcesData: [{
                type: Input
            }], resourceStoreClass: [{
                type: Input
            }], resourceTimeRangesData: [{
                type: Input
            }], resourceTimeRangeStoreClass: [{
                type: Input
            }], silenceInitialCommit: [{
                type: Input
            }], timeRangeModelClass: [{
                type: Input
            }], timeRangesData: [{
                type: Input
            }], timeRangeStoreClass: [{
                type: Input
            }], assignments: [{
                type: Input
            }], assignmentStore: [{
                type: Input
            }], children: [{
                type: Input
            }], dependencies: [{
                type: Input
            }], dependencyStore: [{
                type: Input
            }], events: [{
                type: Input
            }], eventStore: [{
                type: Input
            }], id: [{
                type: Input
            }], json: [{
                type: Input
            }], readOnly: [{
                type: Input
            }], resources: [{
                type: Input
            }], resourceStore: [{
                type: Input
            }], resourceTimeRanges: [{
                type: Input
            }], resourceTimeRangeStore: [{
                type: Input
            }], stm: [{
                type: Input
            }], timeRanges: [{
                type: Input
            }], timeRangeStore: [{
                type: Input
            }], timeZone: [{
                type: Input
            }], allChildren: [{
                type: Input
            }], autoExposeFields: [{
                type: Input
            }], childrenField: [{
                type: Input
            }], convertEmptyParentToLeaf: [{
                type: Input
            }], defaults: [{
                type: Input
            }], descendantCount: [{
                type: Input
            }], hasGeneratedId: [{
                type: Input
            }], idField: [{
                type: Input
            }], inlineData: [{
                type: Input
            }], internalId: [{
                type: Input
            }], isCommitting: [{
                type: Input
            }], isCreating: [{
                type: Input
            }], isValid: [{
                type: Input
            }], previousSiblingsTotalCount: [{
                type: Input
            }], relations: [{
                type: Input
            }], visibleDescendantCount: [{
                type: Input
            }], onChange: [{
                type: Output
            }], onDataReady: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,