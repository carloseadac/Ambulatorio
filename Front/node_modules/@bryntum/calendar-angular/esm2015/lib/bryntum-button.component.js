/**
 * Angular wrapper for Bryntum Button
 */
import { Component, EventEmitter, Output, Input } from '@angular/core';
import WrapperHelper from './wrapper.helper';
import { Button, WidgetHelper } from '@bryntum/calendar';
import * as i0 from "@angular/core";
export class BryntumButtonComponent {
    constructor(element) {
        this.bryntumConfig = {
            adopt: undefined,
            appendTo: undefined,
            href: undefined,
            angularComponent: this,
            features: {},
            listeners: {}
        };
        // Events
        this.onAction = new EventEmitter();
        this.onBeforeDestroy = new EventEmitter();
        this.onBeforeHide = new EventEmitter();
        this.onBeforeShow = new EventEmitter();
        this.onBeforeShowMenu = new EventEmitter();
        this.onBeforeToggle = new EventEmitter();
        this.onCatchAll = new EventEmitter();
        this.onClick = new EventEmitter();
        this.onDestroy = new EventEmitter();
        this.onFocusIn = new EventEmitter();
        this.onFocusOut = new EventEmitter();
        this.onHide = new EventEmitter();
        this.onPaint = new EventEmitter();
        this.onReadOnly = new EventEmitter();
        this.onRecompose = new EventEmitter();
        this.onResize = new EventEmitter();
        this.onShow = new EventEmitter();
        this.onToggle = new EventEmitter();
        this.elementRef = element;
    }
    /**
     * Create and append the underlying widget
     */
    ngOnInit() {
        const me = this, { elementRef, bryntumConfig } = me, { instanceClass, instanceName, bryntumConfigs, bryntumEvents } = BryntumButtonComponent;
        bryntumConfigs.filter(prop => prop in this).forEach(prop => {
            // @ts-ignore
            WrapperHelper.applyPropValue(bryntumConfig, prop, this[prop]);
            if (['features', 'config'].includes(prop)) {
                WrapperHelper.devWarningConfigProp(instanceName, prop);
            }
        });
        // @ts-ignore
        bryntumEvents.filter(event => this[event] && this[event].observers.length > 0).forEach(event => {
            const uncapitalize = (str) => str.charAt(0).toLowerCase() + str.slice(1), eventName = (str) => uncapitalize(str.slice(2));
            // @ts-ignore
            bryntumConfig.listeners[eventName(event)] = e => {
                // @ts-ignore
                me[event].emit(e);
                // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                // in Angular listeners
                return e.returnValue;
            };
        });
        // If component has no container specified in config then use adopt to Wrapper's element
        const containerParam = [
            'adopt',
            'appendTo',
            'insertAfter',
            'insertBefore'
            // @ts-ignore
        ].find(prop => bryntumConfig[prop]);
        if (!containerParam) {
            if (instanceName === 'Button') {
                // Button should always be <a> or <button> inside owner element
                bryntumConfig.appendTo = elementRef.nativeElement;
            }
            else {
                bryntumConfig.adopt = elementRef.nativeElement;
            }
        }
        else {
            WrapperHelper.devWarningContainer(instanceName, containerParam);
        }
        // @ts-ignore
        me.instance = instanceName === 'Widget' ? WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
    }
    /**
     * Watch for changes
     * @param changes
     */
    ngOnChanges(changes) {
        const { instance } = this, { instanceName } = BryntumButtonComponent;
        if (!instance) {
            return;
        }
        // Iterate over all changes
        Object.entries(changes).forEach(([prop, change]) => {
            const newValue = change.currentValue, { instance } = this, { bryntumConfigsOnly, bryntumProps } = BryntumButtonComponent;
            if (bryntumProps.includes(prop)) {
                WrapperHelper.applyPropValue(instance, prop, newValue, false);
                if (bryntumConfigsOnly.includes(prop)) {
                    WrapperHelper.devWarningUpdateProp(instanceName, prop);
                }
            }
        });
    }
    /**
     * Destroy the component
     */
    ngOnDestroy() {
        // @ts-ignore
        this.instance && this.instance.destroy && this.instance.destroy();
    }
}
BryntumButtonComponent.instanceClass = Button;
BryntumButtonComponent.instanceName = 'Button';
BryntumButtonComponent.bryntumEvents = [
    'onAction',
    'onBeforeDestroy',
    'onBeforeHide',
    'onBeforeShow',
    'onBeforeShowMenu',
    'onBeforeToggle',
    'onCatchAll',
    'onClick',
    'onDestroy',
    'onFocusIn',
    'onFocusOut',
    'onHide',
    'onPaint',
    'onRecompose',
    'onResize',
    'onShow',
    'onToggle'
];
BryntumButtonComponent.bryntumFeatureNames = [];
BryntumButtonComponent.bryntumConfigs = BryntumButtonComponent.bryntumFeatureNames.concat([
    'adopt',
    'align',
    'alignSelf',
    'anchor',
    'appendTo',
    'ariaDescription',
    'ariaLabel',
    'badge',
    'bubbleEvents',
    'callOnFunctions',
    'centered',
    'cls',
    'color',
    'config',
    'constrainTo',
    'content',
    'contentElementCls',
    'dataset',
    'defaultBindProperty',
    'disabled',
    'dock',
    'draggable',
    'extraData',
    'flex',
    'floating',
    'height',
    'hidden',
    'hideAnimation',
    'href',
    'html',
    'htmlCls',
    'icon',
    'iconAlign',
    'id',
    'ignoreParentReadOnly',
    'insertBefore',
    'insertFirst',
    'listeners',
    'localeClass',
    'localizable',
    'localizableProperties',
    'margin',
    'maskDefaults',
    'masked',
    'maxHeight',
    'maxWidth',
    'menu',
    'menuIcon',
    'minHeight',
    'minWidth',
    'monitorResize',
    'owner',
    'positioned',
    'pressed',
    'pressedIcon',
    'preventTooltipOnTouch',
    'readOnly',
    'relayStoreEvents',
    'ripple',
    'rootElement',
    'scrollable',
    'scrollAction',
    'showAnimation',
    'showTooltipWhenDisabled',
    'tab',
    'tag',
    'target',
    'text',
    'textAlign',
    'title',
    'toggleable',
    'toggleGroup',
    'tooltip',
    'ui',
    'weight',
    'width',
    'x',
    'y'
]);
BryntumButtonComponent.bryntumConfigsOnly = [
    'adopt',
    'align',
    'anchor',
    'ariaDescription',
    'ariaLabel',
    'bubbleEvents',
    'callOnFunctions',
    'centered',
    'config',
    'constrainTo',
    'contentElementCls',
    'defaultBindProperty',
    'dock',
    'draggable',
    'floating',
    'hideAnimation',
    'htmlCls',
    'ignoreParentReadOnly',
    'listeners',
    'localeClass',
    'localizable',
    'localizableProperties',
    'maskDefaults',
    'masked',
    'monitorResize',
    'owner',
    'positioned',
    'preventTooltipOnTouch',
    'relayStoreEvents',
    'ripple',
    'rootElement',
    'scrollAction',
    'showAnimation',
    'showTooltipWhenDisabled',
    'tab',
    'tag',
    'textAlign',
    'title',
    'ui',
    'weight'
];
BryntumButtonComponent.bryntumProps = BryntumButtonComponent.bryntumFeatureNames.concat([
    'alignSelf',
    'anchorSize',
    'appendTo',
    'badge',
    'cls',
    'color',
    'content',
    'dataset',
    'disabled',
    'extraData',
    'flex',
    'height',
    'hidden',
    'href',
    'html',
    'icon',
    'iconAlign',
    'id',
    'insertBefore',
    'insertFirst',
    'margin',
    'maxHeight',
    'maxWidth',
    'menu',
    'menuIcon',
    'minHeight',
    'minWidth',
    'pressed',
    'pressedIcon',
    'readOnly',
    'scrollable',
    'target',
    'text',
    'toggleable',
    'toggleGroup',
    'tooltip',
    'type',
    'width',
    'x',
    'y'
]);
BryntumButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: BryntumButtonComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
BryntumButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumButtonComponent, selector: "bryntum-button", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", tab: "tab", tag: "tag", textAlign: "textAlign", title: "title", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", color: "color", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", href: "href", html: "html", icon: "icon", iconAlign: "iconAlign", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuIcon: "menuIcon", minHeight: "minHeight", minWidth: "minWidth", pressed: "pressed", pressedIcon: "pressedIcon", readOnly: "readOnly", scrollable: "scrollable", target: "target", text: "text", toggleable: "toggleable", toggleGroup: "toggleGroup", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onBeforeShowMenu: "onBeforeShowMenu", onBeforeToggle: "onBeforeToggle", onCatchAll: "onCatchAll", onClick: "onClick", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onToggle: "onToggle" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: BryntumButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bryntum-button',
                    template: ''
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { adopt: [{
                type: Input
            }], align: [{
                type: Input
            }], anchor: [{
                type: Input
            }], ariaDescription: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], bubbleEvents: [{
                type: Input
            }], callOnFunctions: [{
                type: Input
            }], centered: [{
                type: Input
            }], config: [{
                type: Input
            }], constrainTo: [{
                type: Input
            }], contentElementCls: [{
                type: Input
            }], defaultBindProperty: [{
                type: Input
            }], dock: [{
                type: Input
            }], draggable: [{
                type: Input
            }], floating: [{
                type: Input
            }], hideAnimation: [{
                type: Input
            }], htmlCls: [{
                type: Input
            }], ignoreParentReadOnly: [{
                type: Input
            }], listeners: [{
                type: Input
            }], localeClass: [{
                type: Input
            }], localizable: [{
                type: Input
            }], localizableProperties: [{
                type: Input
            }], maskDefaults: [{
                type: Input
            }], masked: [{
                type: Input
            }], monitorResize: [{
                type: Input
            }], owner: [{
                type: Input
            }], positioned: [{
                type: Input
            }], preventTooltipOnTouch: [{
                type: Input
            }], relayStoreEvents: [{
                type: Input
            }], ripple: [{
                type: Input
            }], rootElement: [{
                type: Input
            }], scrollAction: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], showTooltipWhenDisabled: [{
                type: Input
            }], tab: [{
                type: Input
            }], tag: [{
                type: Input
            }], textAlign: [{
                type: Input
            }], title: [{
                type: Input
            }], ui: [{
                type: Input
            }], weight: [{
                type: Input
            }], alignSelf: [{
                type: Input
            }], appendTo: [{
                type: Input
            }], badge: [{
                type: Input
            }], cls: [{
                type: Input
            }], color: [{
                type: Input
            }], content: [{
                type: Input
            }], dataset: [{
                type: Input
            }], disabled: [{
                type: Input
            }], extraData: [{
                type: Input
            }], flex: [{
                type: Input
            }], height: [{
                type: Input
            }], hidden: [{
                type: Input
            }], href: [{
                type: Input
            }], html: [{
                type: Input
            }], icon: [{
                type: Input
            }], iconAlign: [{
                type: Input
            }], id: [{
                type: Input
            }], insertBefore: [{
                type: Input
            }], insertFirst: [{
                type: Input
            }], margin: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], menu: [{
                type: Input
            }], menuIcon: [{
                type: Input
            }], minHeight: [{
                type: Input
            }], minWidth: [{
                type: Input
            }], pressed: [{
                type: Input
            }], pressedIcon: [{
                type: Input
            }], readOnly: [{
                type: Input
            }], scrollable: [{
                type: Input
            }], target: [{
                type: Input
            }], text: [{
                type: Input
            }], toggleable: [{
                type: Input
            }], toggleGroup: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], width: [{
                type: Input
            }], x: [{
                type: Input
            }], y: [{
                type: Input
            }], anchorSize: [{
                type: Input
            }], type: [{
                type: Input
            }], onAction: [{
                type: Output
            }], onBeforeDestroy: [{
                type: Output
            }], onBeforeHide: [{
                type: Output
            }], onBeforeShow: [{
                type: Output
            }], onBeforeShowMenu: [{
                type: Output
            }], onBeforeToggle: [{
                type: Output
            }], onCatchAll: [{
                type: Output
            }], onClick: [{
                type: Output
            }], onDestroy: [{
                type: Output
            }], onFocusIn: [{
                type: Output
            }], onFocusOut: [{
                type: Output
            }], onHide: [{
                type: Output
            }], onPaint: [{
                type: Output
            }], onReadOnly: [{
                type: Output
            }], onRecompose: [{
                type: Output
            }], onResize: [{
                type: Output
            }], onShow: [{
                type: Output
            }], onToggle: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,