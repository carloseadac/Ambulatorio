/**
 * Angular wrapper for Bryntum TextField
 */
import { Component, EventEmitter, Output, Input } from '@angular/core';
import WrapperHelper from './wrapper.helper';
import { TextField, WidgetHelper } from '@bryntum/calendar';
import * as i0 from "@angular/core";
export class BryntumTextFieldComponent {
    constructor(element) {
        this.bryntumConfig = {
            adopt: undefined,
            appendTo: undefined,
            href: undefined,
            angularComponent: this,
            features: {},
            listeners: {}
        };
        // Events
        this.onAction = new EventEmitter();
        this.onBeforeDestroy = new EventEmitter();
        this.onBeforeHide = new EventEmitter();
        this.onBeforeShow = new EventEmitter();
        this.onCatchAll = new EventEmitter();
        this.onChange = new EventEmitter();
        this.onClear = new EventEmitter();
        this.onDestroy = new EventEmitter();
        this.onFocusIn = new EventEmitter();
        this.onFocusOut = new EventEmitter();
        this.onHide = new EventEmitter();
        this.onInput = new EventEmitter();
        this.onPaint = new EventEmitter();
        this.onReadOnly = new EventEmitter();
        this.onRecompose = new EventEmitter();
        this.onResize = new EventEmitter();
        this.onShow = new EventEmitter();
        this.onTrigger = new EventEmitter();
        this.elementRef = element;
    }
    /**
     * Create and append the underlying widget
     */
    ngOnInit() {
        const me = this, { elementRef, bryntumConfig } = me, { instanceClass, instanceName, bryntumConfigs, bryntumEvents } = BryntumTextFieldComponent;
        bryntumConfigs.filter(prop => prop in this).forEach(prop => {
            // @ts-ignore
            WrapperHelper.applyPropValue(bryntumConfig, prop, this[prop]);
            if (['features', 'config'].includes(prop)) {
                WrapperHelper.devWarningConfigProp(instanceName, prop);
            }
        });
        // @ts-ignore
        bryntumEvents.filter(event => this[event] && this[event].observers.length > 0).forEach(event => {
            const uncapitalize = (str) => str.charAt(0).toLowerCase() + str.slice(1), eventName = (str) => uncapitalize(str.slice(2));
            // @ts-ignore
            bryntumConfig.listeners[eventName(event)] = e => {
                // @ts-ignore
                me[event].emit(e);
                // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                // in Angular listeners
                return e.returnValue;
            };
        });
        // If component has no container specified in config then use adopt to Wrapper's element
        const containerParam = [
            'adopt',
            'appendTo',
            'insertAfter',
            'insertBefore'
            // @ts-ignore
        ].find(prop => bryntumConfig[prop]);
        if (!containerParam) {
            if (instanceName === 'Button') {
                // Button should always be <a> or <button> inside owner element
                bryntumConfig.appendTo = elementRef.nativeElement;
            }
            else {
                bryntumConfig.adopt = elementRef.nativeElement;
            }
        }
        else {
            WrapperHelper.devWarningContainer(instanceName, containerParam);
        }
        // @ts-ignore
        me.instance = instanceName === 'Widget' ? WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
    }
    /**
     * Watch for changes
     * @param changes
     */
    ngOnChanges(changes) {
        const { instance } = this, { instanceName } = BryntumTextFieldComponent;
        if (!instance) {
            return;
        }
        // Iterate over all changes
        Object.entries(changes).forEach(([prop, change]) => {
            const newValue = change.currentValue, { instance } = this, { bryntumConfigsOnly, bryntumProps } = BryntumTextFieldComponent;
            if (bryntumProps.includes(prop)) {
                WrapperHelper.applyPropValue(instance, prop, newValue, false);
                if (bryntumConfigsOnly.includes(prop)) {
                    WrapperHelper.devWarningUpdateProp(instanceName, prop);
                }
            }
        });
    }
    /**
     * Destroy the component
     */
    ngOnDestroy() {
        // @ts-ignore
        this.instance && this.instance.destroy && this.instance.destroy();
    }
}
BryntumTextFieldComponent.instanceClass = TextField;
BryntumTextFieldComponent.instanceName = 'TextField';
BryntumTextFieldComponent.bryntumEvents = [
    'onAction',
    'onBeforeDestroy',
    'onBeforeHide',
    'onBeforeShow',
    'onCatchAll',
    'onChange',
    'onClear',
    'onDestroy',
    'onFocusIn',
    'onFocusOut',
    'onHide',
    'onPaint',
    'onRecompose',
    'onResize',
    'onShow',
    'onTrigger'
];
BryntumTextFieldComponent.bryntumFeatureNames = [];
BryntumTextFieldComponent.bryntumConfigs = BryntumTextFieldComponent.bryntumFeatureNames.concat([
    'adopt',
    'align',
    'alignSelf',
    'anchor',
    'appendTo',
    'ariaDescription',
    'ariaLabel',
    'autoComplete',
    'autoSelect',
    'badge',
    'bubbleEvents',
    'callOnFunctions',
    'centered',
    'clearable',
    'cls',
    'config',
    'constrainTo',
    'container',
    'containValues',
    'content',
    'contentElementCls',
    'dataset',
    'defaultBindProperty',
    'disabled',
    'dock',
    'draggable',
    'editable',
    'extraData',
    'flex',
    'floating',
    'height',
    'hidden',
    'hideAnimation',
    'highlightExternalChange',
    'hint',
    'hintHtml',
    'html',
    'htmlCls',
    'id',
    'ignoreParentReadOnly',
    'inline',
    'inputAlign',
    'inputAttributes',
    'inputType',
    'inputWidth',
    'insertBefore',
    'insertFirst',
    'keyStrokeChangeDelay',
    'label',
    'labelCls',
    'labelPosition',
    'labels',
    'labelWidth',
    'listeners',
    'localeClass',
    'localizable',
    'localizableProperties',
    'margin',
    'maskDefaults',
    'masked',
    'maxHeight',
    'maxLength',
    'maxWidth',
    'minHeight',
    'minLength',
    'minWidth',
    'monitorResize',
    'name',
    'owner',
    'placeholder',
    'positioned',
    'preventTooltipOnTouch',
    'readOnly',
    'relayStoreEvents',
    'required',
    'revertOnEscape',
    'ripple',
    'rootElement',
    'scrollable',
    'scrollAction',
    'showAnimation',
    'showTooltipWhenDisabled',
    'spellCheck',
    'tab',
    'tabIndex',
    'tag',
    'textAlign',
    'title',
    'tooltip',
    'triggers',
    'ui',
    'validateOnInput',
    'value',
    'weight',
    'width',
    'x',
    'y'
]);
BryntumTextFieldComponent.bryntumConfigsOnly = [
    'adopt',
    'align',
    'anchor',
    'ariaDescription',
    'ariaLabel',
    'autoComplete',
    'autoSelect',
    'bubbleEvents',
    'callOnFunctions',
    'centered',
    'clearable',
    'config',
    'constrainTo',
    'container',
    'containValues',
    'contentElementCls',
    'defaultBindProperty',
    'dock',
    'draggable',
    'floating',
    'hideAnimation',
    'highlightExternalChange',
    'hint',
    'hintHtml',
    'htmlCls',
    'ignoreParentReadOnly',
    'inline',
    'inputAlign',
    'inputAttributes',
    'inputType',
    'inputWidth',
    'keyStrokeChangeDelay',
    'labelCls',
    'labelPosition',
    'labels',
    'labelWidth',
    'listeners',
    'localeClass',
    'localizable',
    'localizableProperties',
    'maskDefaults',
    'masked',
    'maxLength',
    'minLength',
    'monitorResize',
    'name',
    'owner',
    'placeholder',
    'positioned',
    'preventTooltipOnTouch',
    'relayStoreEvents',
    'required',
    'revertOnEscape',
    'ripple',
    'rootElement',
    'scrollAction',
    'showAnimation',
    'showTooltipWhenDisabled',
    'spellCheck',
    'tab',
    'tabIndex',
    'tag',
    'textAlign',
    'title',
    'ui',
    'validateOnInput',
    'weight'
];
BryntumTextFieldComponent.bryntumProps = BryntumTextFieldComponent.bryntumFeatureNames.concat([
    'alignSelf',
    'anchorSize',
    'appendTo',
    'badge',
    'cls',
    'content',
    'dataset',
    'disabled',
    'editable',
    'extraData',
    'flex',
    'height',
    'hidden',
    'html',
    'id',
    'input',
    'insertBefore',
    'insertFirst',
    'label',
    'margin',
    'maxHeight',
    'maxWidth',
    'minHeight',
    'minWidth',
    'readOnly',
    'scrollable',
    'tooltip',
    'triggers',
    'type',
    'value',
    'width',
    'x',
    'y'
]);
BryntumTextFieldComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: BryntumTextFieldComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
BryntumTextFieldComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumTextFieldComponent, selector: "bryntum-text-field", inputs: { adopt: "adopt", align: "align", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoComplete: "autoComplete", autoSelect: "autoSelect", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", clearable: "clearable", config: "config", constrainTo: "constrainTo", container: "container", containValues: "containValues", contentElementCls: "contentElementCls", defaultBindProperty: "defaultBindProperty", dock: "dock", draggable: "draggable", floating: "floating", hideAnimation: "hideAnimation", highlightExternalChange: "highlightExternalChange", hint: "hint", hintHtml: "hintHtml", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", inline: "inline", inputAlign: "inputAlign", inputAttributes: "inputAttributes", inputType: "inputType", inputWidth: "inputWidth", keyStrokeChangeDelay: "keyStrokeChangeDelay", labelCls: "labelCls", labelPosition: "labelPosition", labels: "labels", labelWidth: "labelWidth", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maxLength: "maxLength", minLength: "minLength", monitorResize: "monitorResize", name: "name", owner: "owner", placeholder: "placeholder", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", required: "required", revertOnEscape: "revertOnEscape", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", spellCheck: "spellCheck", tab: "tab", tabIndex: "tabIndex", tag: "tag", textAlign: "textAlign", title: "title", ui: "ui", validateOnInput: "validateOnInput", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", badge: "badge", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", editable: "editable", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", label: "label", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", scrollable: "scrollable", tooltip: "tooltip", triggers: "triggers", value: "value", width: "width", x: "x", y: "y", anchorSize: "anchorSize", input: "input", type: "type" }, outputs: { onAction: "onAction", onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onClear: "onClear", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onInput: "onInput", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow", onTrigger: "onTrigger" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: BryntumTextFieldComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bryntum-text-field',
                    template: ''
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { adopt: [{
                type: Input
            }], align: [{
                type: Input
            }], anchor: [{
                type: Input
            }], ariaDescription: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], autoComplete: [{
                type: Input
            }], autoSelect: [{
                type: Input
            }], bubbleEvents: [{
                type: Input
            }], callOnFunctions: [{
                type: Input
            }], centered: [{
                type: Input
            }], clearable: [{
                type: Input
            }], config: [{
                type: Input
            }], constrainTo: [{
                type: Input
            }], container: [{
                type: Input
            }], containValues: [{
                type: Input
            }], contentElementCls: [{
                type: Input
            }], defaultBindProperty: [{
                type: Input
            }], dock: [{
                type: Input
            }], draggable: [{
                type: Input
            }], floating: [{
                type: Input
            }], hideAnimation: [{
                type: Input
            }], highlightExternalChange: [{
                type: Input
            }], hint: [{
                type: Input
            }], hintHtml: [{
                type: Input
            }], htmlCls: [{
                type: Input
            }], ignoreParentReadOnly: [{
                type: Input
            }], inline: [{
                type: Input
            }], inputAlign: [{
                type: Input
            }], inputAttributes: [{
                type: Input
            }], inputType: [{
                type: Input
            }], inputWidth: [{
                type: Input
            }], keyStrokeChangeDelay: [{
                type: Input
            }], labelCls: [{
                type: Input
            }], labelPosition: [{
                type: Input
            }], labels: [{
                type: Input
            }], labelWidth: [{
                type: Input
            }], listeners: [{
                type: Input
            }], localeClass: [{
                type: Input
            }], localizable: [{
                type: Input
            }], localizableProperties: [{
                type: Input
            }], maskDefaults: [{
                type: Input
            }], masked: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], minLength: [{
                type: Input
            }], monitorResize: [{
                type: Input
            }], name: [{
                type: Input
            }], owner: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], positioned: [{
                type: Input
            }], preventTooltipOnTouch: [{
                type: Input
            }], relayStoreEvents: [{
                type: Input
            }], required: [{
                type: Input
            }], revertOnEscape: [{
                type: Input
            }], ripple: [{
                type: Input
            }], rootElement: [{
                type: Input
            }], scrollAction: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], showTooltipWhenDisabled: [{
                type: Input
            }], spellCheck: [{
                type: Input
            }], tab: [{
                type: Input
            }], tabIndex: [{
                type: Input
            }], tag: [{
                type: Input
            }], textAlign: [{
                type: Input
            }], title: [{
                type: Input
            }], ui: [{
                type: Input
            }], validateOnInput: [{
                type: Input
            }], weight: [{
                type: Input
            }], alignSelf: [{
                type: Input
            }], appendTo: [{
                type: Input
            }], badge: [{
                type: Input
            }], cls: [{
                type: Input
            }], content: [{
                type: Input
            }], dataset: [{
                type: Input
            }], disabled: [{
                type: Input
            }], editable: [{
                type: Input
            }], extraData: [{
                type: Input
            }], flex: [{
                type: Input
            }], height: [{
                type: Input
            }], hidden: [{
                type: Input
            }], html: [{
                type: Input
            }], id: [{
                type: Input
            }], insertBefore: [{
                type: Input
            }], insertFirst: [{
                type: Input
            }], label: [{
                type: Input
            }], margin: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], minHeight: [{
                type: Input
            }], minWidth: [{
                type: Input
            }], readOnly: [{
                type: Input
            }], scrollable: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], triggers: [{
                type: Input
            }], value: [{
                type: Input
            }], width: [{
                type: Input
            }], x: [{
                type: Input
            }], y: [{
                type: Input
            }], anchorSize: [{
                type: Input
            }], input: [{
                type: Input
            }], type: [{
                type: Input
            }], onAction: [{
                type: Output
            }], onBeforeDestroy: [{
                type: Output
            }], onBeforeHide: [{
                type: Output
            }], onBeforeShow: [{
                type: Output
            }], onCatchAll: [{
                type: Output
            }], onChange: [{
                type: Output
            }], onClear: [{
                type: Output
            }], onDestroy: [{
                type: Output
            }], onFocusIn: [{
                type: Output
            }], onFocusOut: [{
                type: Output
            }], onHide: [{
                type: Output
            }], onInput: [{
                type: Output
            }], onPaint: [{
                type: Output
            }], onReadOnly: [{
                type: Output
            }], onRecompose: [{
                type: Output
            }], onResize: [{
                type: Output
            }], onShow: [{
                type: Output
            }], onTrigger: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,