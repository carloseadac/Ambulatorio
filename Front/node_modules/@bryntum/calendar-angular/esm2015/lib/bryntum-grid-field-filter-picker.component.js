/**
 * Angular wrapper for Bryntum GridFieldFilterPicker
 */
import { Component, EventEmitter, Output, Input } from '@angular/core';
import WrapperHelper from './wrapper.helper';
import { GridFieldFilterPicker, WidgetHelper } from '@bryntum/calendar';
import * as i0 from "@angular/core";
export class BryntumGridFieldFilterPickerComponent {
    constructor(element) {
        this.bryntumConfig = {
            adopt: undefined,
            appendTo: undefined,
            href: undefined,
            angularComponent: this,
            features: {},
            listeners: {}
        };
        // Events
        this.onBeforeDestroy = new EventEmitter();
        this.onBeforeHide = new EventEmitter();
        this.onBeforeSetRecord = new EventEmitter();
        this.onBeforeShow = new EventEmitter();
        this.onCatchAll = new EventEmitter();
        this.onChange = new EventEmitter();
        this.onDestroy = new EventEmitter();
        this.onFocusIn = new EventEmitter();
        this.onFocusOut = new EventEmitter();
        this.onHide = new EventEmitter();
        this.onPaint = new EventEmitter();
        this.onReadOnly = new EventEmitter();
        this.onRecompose = new EventEmitter();
        this.onResize = new EventEmitter();
        this.onShow = new EventEmitter();
        this.elementRef = element;
    }
    /**
     * Create and append the underlying widget
     */
    ngOnInit() {
        const me = this, { elementRef, bryntumConfig } = me, { instanceClass, instanceName, bryntumConfigs, bryntumEvents } = BryntumGridFieldFilterPickerComponent;
        bryntumConfigs.filter(prop => prop in this).forEach(prop => {
            // @ts-ignore
            WrapperHelper.applyPropValue(bryntumConfig, prop, this[prop]);
            if (['features', 'config'].includes(prop)) {
                WrapperHelper.devWarningConfigProp(instanceName, prop);
            }
        });
        // @ts-ignore
        bryntumEvents.filter(event => this[event] && this[event].observers.length > 0).forEach(event => {
            const uncapitalize = (str) => str.charAt(0).toLowerCase() + str.slice(1), eventName = (str) => uncapitalize(str.slice(2));
            // @ts-ignore
            bryntumConfig.listeners[eventName(event)] = e => {
                // @ts-ignore
                me[event].emit(e);
                // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                // in Angular listeners
                return e.returnValue;
            };
        });
        // If component has no container specified in config then use adopt to Wrapper's element
        const containerParam = [
            'adopt',
            'appendTo',
            'insertAfter',
            'insertBefore'
            // @ts-ignore
        ].find(prop => bryntumConfig[prop]);
        if (!containerParam) {
            if (instanceName === 'Button') {
                // Button should always be <a> or <button> inside owner element
                bryntumConfig.appendTo = elementRef.nativeElement;
            }
            else {
                bryntumConfig.adopt = elementRef.nativeElement;
            }
        }
        else {
            WrapperHelper.devWarningContainer(instanceName, containerParam);
        }
        // @ts-ignore
        me.instance = instanceName === 'Widget' ? WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
    }
    /**
     * Watch for changes
     * @param changes
     */
    ngOnChanges(changes) {
        const { instance } = this, { instanceName } = BryntumGridFieldFilterPickerComponent;
        if (!instance) {
            return;
        }
        // Iterate over all changes
        Object.entries(changes).forEach(([prop, change]) => {
            const newValue = change.currentValue, { instance } = this, { bryntumConfigsOnly, bryntumProps } = BryntumGridFieldFilterPickerComponent;
            if (bryntumProps.includes(prop)) {
                WrapperHelper.applyPropValue(instance, prop, newValue, false);
                if (bryntumConfigsOnly.includes(prop)) {
                    WrapperHelper.devWarningUpdateProp(instanceName, prop);
                }
            }
        });
    }
    /**
     * Destroy the component
     */
    ngOnDestroy() {
        // @ts-ignore
        this.instance && this.instance.destroy && this.instance.destroy();
    }
}
BryntumGridFieldFilterPickerComponent.instanceClass = GridFieldFilterPicker;
BryntumGridFieldFilterPickerComponent.instanceName = 'GridFieldFilterPicker';
BryntumGridFieldFilterPickerComponent.bryntumEvents = [
    'onBeforeDestroy',
    'onBeforeHide',
    'onBeforeSetRecord',
    'onBeforeShow',
    'onCatchAll',
    'onChange',
    'onDestroy',
    'onFocusIn',
    'onFocusOut',
    'onHide',
    'onPaint',
    'onRecompose',
    'onResize',
    'onShow'
];
BryntumGridFieldFilterPickerComponent.bryntumFeatureNames = [];
BryntumGridFieldFilterPickerComponent.bryntumConfigs = BryntumGridFieldFilterPickerComponent.bryntumFeatureNames.concat([
    'adopt',
    'align',
    'alignSelf',
    'allowedFieldNames',
    'anchor',
    'appendTo',
    'ariaDescription',
    'ariaLabel',
    'autoUpdateRecord',
    'bubbleEvents',
    'callOnFunctions',
    'centered',
    'cls',
    'config',
    'constrainTo',
    'content',
    'contentElementCls',
    'dataset',
    'dateFormat',
    'defaultBindProperty',
    'defaultFocus',
    'defaults',
    'disabled',
    'dock',
    'draggable',
    'extraData',
    'fields',
    'filter',
    'flex',
    'floating',
    'getValueFieldConfig',
    'grid',
    'height',
    'hidden',
    'hideAnimation',
    'hideWhenEmpty',
    'html',
    'htmlCls',
    'id',
    'ignoreParentReadOnly',
    'insertBefore',
    'insertFirst',
    'itemCls',
    'items',
    'layout',
    'layoutStyle',
    'lazyItems',
    'listeners',
    'localeClass',
    'localizable',
    'localizableProperties',
    'margin',
    'maskDefaults',
    'masked',
    'maxHeight',
    'maxWidth',
    'minHeight',
    'minWidth',
    'monitorResize',
    'namedItems',
    'operators',
    'owner',
    'positioned',
    'preventTooltipOnTouch',
    'propertyFieldConfig',
    'readOnly',
    'record',
    'relayStoreEvents',
    'ripple',
    'rootElement',
    'scrollable',
    'scrollAction',
    'showAnimation',
    'showTooltipWhenDisabled',
    'store',
    'strictRecordMapping',
    'tab',
    'tag',
    'textAlign',
    'textContent',
    'title',
    'tooltip',
    'ui',
    'valueFieldPlaceholders',
    'weight',
    'width',
    'x',
    'y'
]);
BryntumGridFieldFilterPickerComponent.bryntumConfigsOnly = [
    'adopt',
    'align',
    'allowedFieldNames',
    'anchor',
    'ariaDescription',
    'ariaLabel',
    'autoUpdateRecord',
    'bubbleEvents',
    'callOnFunctions',
    'centered',
    'config',
    'constrainTo',
    'contentElementCls',
    'dateFormat',
    'defaultBindProperty',
    'defaultFocus',
    'defaults',
    'dock',
    'draggable',
    'fields',
    'filter',
    'floating',
    'getValueFieldConfig',
    'grid',
    'hideAnimation',
    'hideWhenEmpty',
    'htmlCls',
    'ignoreParentReadOnly',
    'itemCls',
    'lazyItems',
    'listeners',
    'localeClass',
    'localizable',
    'localizableProperties',
    'maskDefaults',
    'masked',
    'monitorResize',
    'namedItems',
    'operators',
    'owner',
    'positioned',
    'preventTooltipOnTouch',
    'propertyFieldConfig',
    'relayStoreEvents',
    'ripple',
    'rootElement',
    'scrollAction',
    'showAnimation',
    'showTooltipWhenDisabled',
    'store',
    'tab',
    'tag',
    'textAlign',
    'textContent',
    'title',
    'ui',
    'valueFieldPlaceholders',
    'weight'
];
BryntumGridFieldFilterPickerComponent.bryntumProps = BryntumGridFieldFilterPickerComponent.bryntumFeatureNames.concat([
    'alignSelf',
    'anchorSize',
    'appendTo',
    'cls',
    'content',
    'dataset',
    'disabled',
    'extraData',
    'flex',
    'height',
    'hidden',
    'html',
    'id',
    'insertBefore',
    'insertFirst',
    'isSettingValues',
    'isValid',
    'items',
    'layout',
    'layoutStyle',
    'margin',
    'maxHeight',
    'maxWidth',
    'minHeight',
    'minWidth',
    'readOnly',
    'record',
    'scrollable',
    'strictRecordMapping',
    'tooltip',
    'type',
    'values',
    'width',
    'x',
    'y'
]);
BryntumGridFieldFilterPickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: BryntumGridFieldFilterPickerComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
BryntumGridFieldFilterPickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumGridFieldFilterPickerComponent, selector: "bryntum-grid-field-filter-picker", inputs: { adopt: "adopt", align: "align", allowedFieldNames: "allowedFieldNames", anchor: "anchor", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoUpdateRecord: "autoUpdateRecord", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", dateFormat: "dateFormat", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaults: "defaults", dock: "dock", draggable: "draggable", fields: "fields", filter: "filter", floating: "floating", getValueFieldConfig: "getValueFieldConfig", grid: "grid", hideAnimation: "hideAnimation", hideWhenEmpty: "hideWhenEmpty", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", lazyItems: "lazyItems", listeners: "listeners", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", monitorResize: "monitorResize", namedItems: "namedItems", operators: "operators", owner: "owner", positioned: "positioned", preventTooltipOnTouch: "preventTooltipOnTouch", propertyFieldConfig: "propertyFieldConfig", relayStoreEvents: "relayStoreEvents", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", showAnimation: "showAnimation", showTooltipWhenDisabled: "showTooltipWhenDisabled", store: "store", tab: "tab", tag: "tag", textAlign: "textAlign", textContent: "textContent", title: "title", ui: "ui", valueFieldPlaceholders: "valueFieldPlaceholders", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", content: "content", dataset: "dataset", disabled: "disabled", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", scrollable: "scrollable", strictRecordMapping: "strictRecordMapping", tooltip: "tooltip", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", type: "type", values: "values" }, outputs: { onBeforeDestroy: "onBeforeDestroy", onBeforeHide: "onBeforeHide", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onCatchAll: "onCatchAll", onChange: "onChange", onDestroy: "onDestroy", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onHide: "onHide", onPaint: "onPaint", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onResize: "onResize", onShow: "onShow" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: BryntumGridFieldFilterPickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bryntum-grid-field-filter-picker',
                    template: ''
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { adopt: [{
                type: Input
            }], align: [{
                type: Input
            }], allowedFieldNames: [{
                type: Input
            }], anchor: [{
                type: Input
            }], ariaDescription: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], autoUpdateRecord: [{
                type: Input
            }], bubbleEvents: [{
                type: Input
            }], callOnFunctions: [{
                type: Input
            }], centered: [{
                type: Input
            }], config: [{
                type: Input
            }], constrainTo: [{
                type: Input
            }], contentElementCls: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], defaultBindProperty: [{
                type: Input
            }], defaultFocus: [{
                type: Input
            }], defaults: [{
                type: Input
            }], dock: [{
                type: Input
            }], draggable: [{
                type: Input
            }], fields: [{
                type: Input
            }], filter: [{
                type: Input
            }], floating: [{
                type: Input
            }], getValueFieldConfig: [{
                type: Input
            }], grid: [{
                type: Input
            }], hideAnimation: [{
                type: Input
            }], hideWhenEmpty: [{
                type: Input
            }], htmlCls: [{
                type: Input
            }], ignoreParentReadOnly: [{
                type: Input
            }], itemCls: [{
                type: Input
            }], lazyItems: [{
                type: Input
            }], listeners: [{
                type: Input
            }], localeClass: [{
                type: Input
            }], localizable: [{
                type: Input
            }], localizableProperties: [{
                type: Input
            }], maskDefaults: [{
                type: Input
            }], masked: [{
                type: Input
            }], monitorResize: [{
                type: Input
            }], namedItems: [{
                type: Input
            }], operators: [{
                type: Input
            }], owner: [{
                type: Input
            }], positioned: [{
                type: Input
            }], preventTooltipOnTouch: [{
                type: Input
            }], propertyFieldConfig: [{
                type: Input
            }], relayStoreEvents: [{
                type: Input
            }], ripple: [{
                type: Input
            }], rootElement: [{
                type: Input
            }], scrollAction: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], showTooltipWhenDisabled: [{
                type: Input
            }], store: [{
                type: Input
            }], tab: [{
                type: Input
            }], tag: [{
                type: Input
            }], textAlign: [{
                type: Input
            }], textContent: [{
                type: Input
            }], title: [{
                type: Input
            }], ui: [{
                type: Input
            }], valueFieldPlaceholders: [{
                type: Input
            }], weight: [{
                type: Input
            }], alignSelf: [{
                type: Input
            }], appendTo: [{
                type: Input
            }], cls: [{
                type: Input
            }], content: [{
                type: Input
            }], dataset: [{
                type: Input
            }], disabled: [{
                type: Input
            }], extraData: [{
                type: Input
            }], flex: [{
                type: Input
            }], height: [{
                type: Input
            }], hidden: [{
                type: Input
            }], html: [{
                type: Input
            }], id: [{
                type: Input
            }], insertBefore: [{
                type: Input
            }], insertFirst: [{
                type: Input
            }], items: [{
                type: Input
            }], layout: [{
                type: Input
            }], layoutStyle: [{
                type: Input
            }], margin: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], minHeight: [{
                type: Input
            }], minWidth: [{
                type: Input
            }], readOnly: [{
                type: Input
            }], record: [{
                type: Input
            }], scrollable: [{
                type: Input
            }], strictRecordMapping: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], width: [{
                type: Input
            }], x: [{
                type: Input
            }], y: [{
                type: Input
            }], anchorSize: [{
                type: Input
            }], isSettingValues: [{
                type: Input
            }], isValid: [{
                type: Input
            }], type: [{
                type: Input
            }], values: [{
                type: Input
            }], onBeforeDestroy: [{
                type: Output
            }], onBeforeHide: [{
                type: Output
            }], onBeforeSetRecord: [{
                type: Output
            }], onBeforeShow: [{
                type: Output
            }], onCatchAll: [{
                type: Output
            }], onChange: [{
                type: Output
            }], onDestroy: [{
                type: Output
            }], onFocusIn: [{
                type: Output
            }], onFocusOut: [{
                type: Output
            }], onHide: [{
                type: Output
            }], onPaint: [{
                type: Output
            }], onReadOnly: [{
                type: Output
            }], onRecompose: [{
                type: Output
            }], onResize: [{
                type: Output
            }], onShow: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,