/**
 * Angular wrapper for Bryntum GridBase
 */
import { Component, EventEmitter, Output, Input } from '@angular/core';
import WrapperHelper from './wrapper.helper';
import { GridBase, StringHelper, WidgetHelper } from '@bryntum/calendar';
import * as i0 from "@angular/core";
export class BryntumGridBaseComponent {
    constructor(element) {
        this.bryntumConfig = {
            adopt: undefined,
            appendTo: undefined,
            href: undefined,
            angularComponent: this,
            features: {},
            listeners: {}
        };
        // Events
        this.onBeforeCancelCellEdit = new EventEmitter();
        this.onBeforeCellDelete = new EventEmitter();
        this.onBeforeCellEditStart = new EventEmitter();
        this.onBeforeClose = new EventEmitter();
        this.onBeforeColumnDragStart = new EventEmitter();
        this.onBeforeColumnDropFinalize = new EventEmitter();
        this.onBeforeCopy = new EventEmitter();
        this.onBeforeDestroy = new EventEmitter();
        this.onBeforeFinishCellEdit = new EventEmitter();
        this.onBeforeHide = new EventEmitter();
        this.onBeforePaste = new EventEmitter();
        this.onBeforePdfExport = new EventEmitter();
        this.onBeforeRenderRow = new EventEmitter();
        this.onBeforeRenderRows = new EventEmitter();
        this.onBeforeSelectionChange = new EventEmitter();
        this.onBeforeSetRecord = new EventEmitter();
        this.onBeforeShow = new EventEmitter();
        this.onBeforeToggleGroup = new EventEmitter();
        this.onBeforeToggleNode = new EventEmitter();
        this.onCancelCellEdit = new EventEmitter();
        this.onCatchAll = new EventEmitter();
        this.onCellClick = new EventEmitter();
        this.onCellContextMenu = new EventEmitter();
        this.onCellDblClick = new EventEmitter();
        this.onCellMenuBeforeShow = new EventEmitter();
        this.onCellMenuItem = new EventEmitter();
        this.onCellMenuShow = new EventEmitter();
        this.onCellMenuToggleItem = new EventEmitter();
        this.onCellMouseOut = new EventEmitter();
        this.onCellMouseOver = new EventEmitter();
        this.onCollapseNode = new EventEmitter();
        this.onColumnDrag = new EventEmitter();
        this.onColumnDragStart = new EventEmitter();
        this.onColumnDrop = new EventEmitter();
        this.onContextMenuItem = new EventEmitter();
        this.onContextMenuToggleItem = new EventEmitter();
        this.onCopy = new EventEmitter();
        this.onDataChange = new EventEmitter();
        this.onDestroy = new EventEmitter();
        this.onDragSelecting = new EventEmitter();
        this.onExpandNode = new EventEmitter();
        this.onFinishCellEdit = new EventEmitter();
        this.onFocusIn = new EventEmitter();
        this.onFocusOut = new EventEmitter();
        this.onGridRowAbort = new EventEmitter();
        this.onGridRowBeforeDragStart = new EventEmitter();
        this.onGridRowBeforeDropFinalize = new EventEmitter();
        this.onGridRowDrag = new EventEmitter();
        this.onGridRowDragStart = new EventEmitter();
        this.onGridRowDrop = new EventEmitter();
        this.onHeaderMenuBeforeShow = new EventEmitter();
        this.onHeaderMenuItem = new EventEmitter();
        this.onHeaderMenuShow = new EventEmitter();
        this.onHeaderMenuToggleItem = new EventEmitter();
        this.onHide = new EventEmitter();
        this.onMouseOut = new EventEmitter();
        this.onMouseOver = new EventEmitter();
        this.onPaint = new EventEmitter();
        this.onPaste = new EventEmitter();
        this.onPdfExport = new EventEmitter();
        this.onPointerOver = new EventEmitter();
        this.onReadOnly = new EventEmitter();
        this.onRecompose = new EventEmitter();
        this.onRenderRow = new EventEmitter();
        this.onRenderRows = new EventEmitter();
        this.onResize = new EventEmitter();
        this.onResponsive = new EventEmitter();
        this.onScroll = new EventEmitter();
        this.onSelectionChange = new EventEmitter();
        this.onSelectionModeChange = new EventEmitter();
        this.onShow = new EventEmitter();
        this.onStartCellEdit = new EventEmitter();
        this.onSubGridCollapse = new EventEmitter();
        this.onSubGridExpand = new EventEmitter();
        this.onToggleGroup = new EventEmitter();
        this.onToggleNode = new EventEmitter();
        this.onToolClick = new EventEmitter();
        this.elementRef = element;
    }
    /**
     * Create and append the underlying widget
     */
    ngOnInit() {
        const me = this, { elementRef, bryntumConfig } = me, { instanceClass, instanceName, bryntumConfigs, bryntumEvents } = BryntumGridBaseComponent;
        bryntumConfigs.filter(prop => prop in this).forEach(prop => {
            // @ts-ignore
            WrapperHelper.applyPropValue(bryntumConfig, prop, this[prop]);
            if (['features', 'config'].includes(prop)) {
                WrapperHelper.devWarningConfigProp(instanceName, prop);
            }
        });
        // @ts-ignore
        bryntumEvents.filter(event => this[event] && this[event].observers.length > 0).forEach(event => {
            const uncapitalize = (str) => str.charAt(0).toLowerCase() + str.slice(1), eventName = (str) => uncapitalize(str.slice(2));
            // @ts-ignore
            bryntumConfig.listeners[eventName(event)] = e => {
                // @ts-ignore
                me[event].emit(e);
                // EventEmitter does not return values in the normal way, work around it by setting `returnValue` flag
                // in Angular listeners
                return e.returnValue;
            };
        });
        // If component has no container specified in config then use adopt to Wrapper's element
        const containerParam = [
            'adopt',
            'appendTo',
            'insertAfter',
            'insertBefore'
            // @ts-ignore
        ].find(prop => bryntumConfig[prop]);
        if (!containerParam) {
            if (instanceName === 'Button') {
                // Button should always be <a> or <button> inside owner element
                bryntumConfig.appendTo = elementRef.nativeElement;
            }
            else {
                bryntumConfig.adopt = elementRef.nativeElement;
            }
        }
        else {
            WrapperHelper.devWarningContainer(instanceName, containerParam);
        }
        // @ts-ignore
        me.instance = instanceName === 'Widget' ? WidgetHelper.createWidget(bryntumConfig) : new instanceClass(bryntumConfig);
        // Backwards compatibility for gridInstance, schedulerInstance etc.
        // @ts-ignore
        me[StringHelper.uncapitalize(instanceName) + 'Instance'] = me.instance;
        // 
    }
    /**
     * Watch for changes
     * @param changes
     */
    ngOnChanges(changes) {
        const { instance } = this, { instanceName } = BryntumGridBaseComponent;
        if (!instance) {
            return;
        }
        // Iterate over all changes
        Object.entries(changes).forEach(([prop, change]) => {
            const newValue = change.currentValue, { instance } = this, { bryntumConfigsOnly, bryntumProps } = BryntumGridBaseComponent;
            if (bryntumProps.includes(prop)) {
                WrapperHelper.applyPropValue(instance, prop, newValue, false);
                if (bryntumConfigsOnly.includes(prop)) {
                    WrapperHelper.devWarningUpdateProp(instanceName, prop);
                }
            }
        });
    }
    /**
     * Destroy the component
     */
    ngOnDestroy() {
        // @ts-ignore
        this.instance && this.instance.destroy && this.instance.destroy();
    }
}
BryntumGridBaseComponent.instanceClass = GridBase;
BryntumGridBaseComponent.instanceName = 'GridBase';
BryntumGridBaseComponent.bryntumEvents = [
    'onBeforeCancelCellEdit',
    'onBeforeCellDelete',
    'onBeforeCellEditStart',
    'onBeforeClose',
    'onBeforeColumnDragStart',
    'onBeforeColumnDropFinalize',
    'onBeforeCopy',
    'onBeforeDestroy',
    'onBeforeFinishCellEdit',
    'onBeforeHide',
    'onBeforePaste',
    'onBeforePdfExport',
    'onBeforeRenderRow',
    'onBeforeRenderRows',
    'onBeforeSelectionChange',
    'onBeforeSetRecord',
    'onBeforeShow',
    'onBeforeToggleGroup',
    'onBeforeToggleNode',
    'onCancelCellEdit',
    'onCatchAll',
    'onCellClick',
    'onCellContextMenu',
    'onCellDblClick',
    'onCellMenuBeforeShow',
    'onCellMenuItem',
    'onCellMenuShow',
    'onCellMenuToggleItem',
    'onCellMouseOut',
    'onCellMouseOver',
    'onCollapseNode',
    'onColumnDrag',
    'onColumnDragStart',
    'onColumnDrop',
    'onContextMenuItem',
    'onContextMenuToggleItem',
    'onCopy',
    'onDataChange',
    'onDestroy',
    'onDragSelecting',
    'onExpandNode',
    'onFinishCellEdit',
    'onFocusIn',
    'onFocusOut',
    'onGridRowAbort',
    'onGridRowBeforeDragStart',
    'onGridRowBeforeDropFinalize',
    'onGridRowDrag',
    'onGridRowDragStart',
    'onGridRowDrop',
    'onHeaderMenuBeforeShow',
    'onHeaderMenuItem',
    'onHeaderMenuShow',
    'onHeaderMenuToggleItem',
    'onHide',
    'onMouseOut',
    'onMouseOver',
    'onPaint',
    'onPaste',
    'onPdfExport',
    'onPointerOver',
    'onRecompose',
    'onRenderRow',
    'onRenderRows',
    'onResize',
    'onResponsive',
    'onScroll',
    'onSelectionChange',
    'onSelectionModeChange',
    'onShow',
    'onStartCellEdit',
    'onSubGridCollapse',
    'onSubGridExpand',
    'onToggleGroup',
    'onToggleNode',
    'onToolClick'
];
BryntumGridBaseComponent.bryntumFeatureNames = [
    'cellCopyPasteFeature',
    'cellEditFeature',
    'cellMenuFeature',
    'cellTooltipFeature',
    'columnAutoWidthFeature',
    'columnDragToolbarFeature',
    'columnPickerFeature',
    'columnRenameFeature',
    'columnReorderFeature',
    'columnResizeFeature',
    'excelExporterFeature',
    'fillHandleFeature',
    'filterFeature',
    'filterBarFeature',
    'groupFeature',
    'groupSummaryFeature',
    'headerMenuFeature',
    'mergeCellsFeature',
    'multipageFeature',
    'multipageverticalFeature',
    'pdfExportFeature',
    'quickFindFeature',
    'regionResizeFeature',
    'rowCopyPasteFeature',
    'rowExpanderFeature',
    'rowReorderFeature',
    'searchFeature',
    'singlepageFeature',
    'sortFeature',
    'stickyCellsFeature',
    'stripeFeature',
    'summaryFeature',
    'treeFeature',
    'treeGroupFeature'
];
BryntumGridBaseComponent.bryntumConfigs = BryntumGridBaseComponent.bryntumFeatureNames.concat([
    'adopt',
    'align',
    'alignSelf',
    'allowOver',
    'anchor',
    'anchorToTarget',
    'animateRemovingRows',
    'appendTo',
    'ariaDescription',
    'ariaLabel',
    'autoClose',
    'autoHeight',
    'autoShow',
    'autoUpdateRecord',
    'bbar',
    'bodyCls',
    'bubbleEvents',
    'callOnFunctions',
    'centered',
    'closable',
    'closeAction',
    'cls',
    'collapsed',
    'collapsible',
    'columnLines',
    'columns',
    'config',
    'constrainTo',
    'content',
    'contentElementCls',
    'contextMenuTriggerEvent',
    'data',
    'dataset',
    'defaultBindProperty',
    'defaultFocus',
    'defaultRegion',
    'defaults',
    'destroyStore',
    'disabled',
    'disableGridRowModelWarning',
    'dismissDelay',
    'dock',
    'draggable',
    'emptyText',
    'enableSticky',
    'enableTextSelection',
    'enableUndoRedoKeys',
    'extraData',
    'features',
    'fillLastColumn',
    'fixedRowHeight',
    'flex',
    'floating',
    'focusOnToFront',
    'footer',
    'forElement',
    'forSelector',
    'fullRowRefresh',
    'getHtml',
    'getRowHeight',
    'header',
    'height',
    'hidden',
    'hideAnimation',
    'hideDelay',
    'hideHeaders',
    'hideOnDelegateChange',
    'hideWhenEmpty',
    'hoverDelay',
    'html',
    'htmlCls',
    'id',
    'ignoreParentReadOnly',
    'insertBefore',
    'insertFirst',
    'itemCls',
    'items',
    'keyMap',
    'layout',
    'layoutStyle',
    'lazyItems',
    'listeners',
    'loadingMsg',
    'loadMask',
    'loadMaskDefaults',
    'loadMaskError',
    'localeClass',
    'localizable',
    'localizableProperties',
    'longPressTime',
    'margin',
    'maskDefaults',
    'masked',
    'maxHeight',
    'maximizable',
    'maximized',
    'maxWidth',
    'minHeight',
    'minWidth',
    'modal',
    'monitorResize',
    'mouseOffsetX',
    'mouseOffsetY',
    'namedItems',
    'owner',
    'plugins',
    'positioned',
    'preserveFocusOnDatasetChange',
    'preserveScrollOnDatasetChange',
    'preventTooltipOnTouch',
    'readOnly',
    'record',
    'relayStoreEvents',
    'resizeToFitIncludesHeader',
    'responsiveLevels',
    'ripple',
    'rootElement',
    'rowHeight',
    'scrollable',
    'scrollAction',
    'scrollerClass',
    'scrollManager',
    'selectionMode',
    'showAnimation',
    'showDirty',
    'showOnClick',
    'showOnHover',
    'showTooltipWhenDisabled',
    'stateful',
    'statefulEvents',
    'stateId',
    'stateProvider',
    'store',
    'strictRecordMapping',
    'strips',
    'subGridConfigs',
    'syncMask',
    'tab',
    'tag',
    'tbar',
    'textAlign',
    'textContent',
    'title',
    'tools',
    'tooltip',
    'trackMouse',
    'transitionDuration',
    'trapFocus',
    'ui',
    'weight',
    'width',
    'x',
    'y'
]);
BryntumGridBaseComponent.bryntumConfigsOnly = [
    'adopt',
    'align',
    'allowOver',
    'anchor',
    'anchorToTarget',
    'animateRemovingRows',
    'ariaDescription',
    'ariaLabel',
    'autoClose',
    'autoHeight',
    'autoShow',
    'autoUpdateRecord',
    'bbar',
    'bodyCls',
    'bubbleEvents',
    'callOnFunctions',
    'centered',
    'closable',
    'closeAction',
    'collapsed',
    'collapsible',
    'columns',
    'config',
    'constrainTo',
    'contentElementCls',
    'contextMenuTriggerEvent',
    'defaultBindProperty',
    'defaultFocus',
    'defaultRegion',
    'defaults',
    'destroyStore',
    'disableGridRowModelWarning',
    'dismissDelay',
    'dock',
    'draggable',
    'enableSticky',
    'enableTextSelection',
    'features',
    'fillLastColumn',
    'fixedRowHeight',
    'floating',
    'focusOnToFront',
    'footer',
    'forElement',
    'forSelector',
    'fullRowRefresh',
    'getHtml',
    'getRowHeight',
    'header',
    'hideAnimation',
    'hideDelay',
    'hideHeaders',
    'hideOnDelegateChange',
    'hideWhenEmpty',
    'hoverDelay',
    'htmlCls',
    'ignoreParentReadOnly',
    'itemCls',
    'keyMap',
    'lazyItems',
    'listeners',
    'loadingMsg',
    'loadMask',
    'loadMaskDefaults',
    'loadMaskError',
    'localeClass',
    'localizable',
    'localizableProperties',
    'maskDefaults',
    'masked',
    'maximizable',
    'maximized',
    'modal',
    'monitorResize',
    'mouseOffsetX',
    'mouseOffsetY',
    'namedItems',
    'owner',
    'plugins',
    'positioned',
    'preserveFocusOnDatasetChange',
    'preserveScrollOnDatasetChange',
    'preventTooltipOnTouch',
    'relayStoreEvents',
    'resizeToFitIncludesHeader',
    'responsiveLevels',
    'ripple',
    'rootElement',
    'scrollAction',
    'scrollerClass',
    'scrollManager',
    'selectionMode',
    'showAnimation',
    'showDirty',
    'showOnClick',
    'showOnHover',
    'showTooltipWhenDisabled',
    'stateful',
    'statefulEvents',
    'stateId',
    'stateProvider',
    'strips',
    'subGridConfigs',
    'syncMask',
    'tab',
    'tag',
    'tbar',
    'textAlign',
    'textContent',
    'trackMouse',
    'trapFocus',
    'ui',
    'weight'
];
BryntumGridBaseComponent.bryntumProps = BryntumGridBaseComponent.bryntumFeatureNames.concat([
    'alignSelf',
    'anchorSize',
    'appendTo',
    'cls',
    'columnLines',
    'content',
    'data',
    'dataset',
    'disabled',
    'emptyText',
    'enableUndoRedoKeys',
    'extraData',
    'flex',
    'height',
    'hidden',
    'html',
    'id',
    'insertBefore',
    'insertFirst',
    'isSettingValues',
    'isValid',
    'items',
    'layout',
    'layoutStyle',
    'longPressTime',
    'margin',
    'maxHeight',
    'maxWidth',
    'minHeight',
    'minWidth',
    'readOnly',
    'record',
    'rowHeight',
    'scrollable',
    'selectedCell',
    'selectedCells',
    'selectedRecord',
    'selectedRecords',
    'selectedRows',
    'state',
    'store',
    'strictRecordMapping',
    'title',
    'tools',
    'tooltip',
    'transitionDuration',
    'type',
    'values',
    'width',
    'x',
    'y'
]);
BryntumGridBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: BryntumGridBaseComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
BryntumGridBaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.0", type: BryntumGridBaseComponent, selector: "bryntum-grid-base", inputs: { adopt: "adopt", align: "align", allowOver: "allowOver", anchor: "anchor", anchorToTarget: "anchorToTarget", animateRemovingRows: "animateRemovingRows", ariaDescription: "ariaDescription", ariaLabel: "ariaLabel", autoClose: "autoClose", autoHeight: "autoHeight", autoShow: "autoShow", autoUpdateRecord: "autoUpdateRecord", bbar: "bbar", bodyCls: "bodyCls", bubbleEvents: "bubbleEvents", callOnFunctions: "callOnFunctions", centered: "centered", closable: "closable", closeAction: "closeAction", collapsed: "collapsed", collapsible: "collapsible", columns: "columns", config: "config", constrainTo: "constrainTo", contentElementCls: "contentElementCls", contextMenuTriggerEvent: "contextMenuTriggerEvent", defaultBindProperty: "defaultBindProperty", defaultFocus: "defaultFocus", defaultRegion: "defaultRegion", defaults: "defaults", destroyStore: "destroyStore", disableGridRowModelWarning: "disableGridRowModelWarning", dismissDelay: "dismissDelay", dock: "dock", draggable: "draggable", enableSticky: "enableSticky", enableTextSelection: "enableTextSelection", features: "features", fillLastColumn: "fillLastColumn", fixedRowHeight: "fixedRowHeight", floating: "floating", focusOnToFront: "focusOnToFront", footer: "footer", forElement: "forElement", forSelector: "forSelector", fullRowRefresh: "fullRowRefresh", getHtml: "getHtml", getRowHeight: "getRowHeight", header: "header", hideAnimation: "hideAnimation", hideDelay: "hideDelay", hideHeaders: "hideHeaders", hideOnDelegateChange: "hideOnDelegateChange", hideWhenEmpty: "hideWhenEmpty", hoverDelay: "hoverDelay", htmlCls: "htmlCls", ignoreParentReadOnly: "ignoreParentReadOnly", itemCls: "itemCls", keyMap: "keyMap", lazyItems: "lazyItems", listeners: "listeners", loadingMsg: "loadingMsg", loadMask: "loadMask", loadMaskDefaults: "loadMaskDefaults", loadMaskError: "loadMaskError", localeClass: "localeClass", localizable: "localizable", localizableProperties: "localizableProperties", maskDefaults: "maskDefaults", masked: "masked", maximizable: "maximizable", maximized: "maximized", modal: "modal", monitorResize: "monitorResize", mouseOffsetX: "mouseOffsetX", mouseOffsetY: "mouseOffsetY", namedItems: "namedItems", owner: "owner", plugins: "plugins", positioned: "positioned", preserveFocusOnDatasetChange: "preserveFocusOnDatasetChange", preserveScrollOnDatasetChange: "preserveScrollOnDatasetChange", preventTooltipOnTouch: "preventTooltipOnTouch", relayStoreEvents: "relayStoreEvents", resizeToFitIncludesHeader: "resizeToFitIncludesHeader", responsiveLevels: "responsiveLevels", ripple: "ripple", rootElement: "rootElement", scrollAction: "scrollAction", scrollerClass: "scrollerClass", scrollManager: "scrollManager", selectionMode: "selectionMode", showAnimation: "showAnimation", showDirty: "showDirty", showOnClick: "showOnClick", showOnHover: "showOnHover", showTooltipWhenDisabled: "showTooltipWhenDisabled", stateful: "stateful", statefulEvents: "statefulEvents", stateId: "stateId", stateProvider: "stateProvider", strips: "strips", subGridConfigs: "subGridConfigs", syncMask: "syncMask", tab: "tab", tag: "tag", tbar: "tbar", textAlign: "textAlign", textContent: "textContent", trackMouse: "trackMouse", trapFocus: "trapFocus", ui: "ui", weight: "weight", alignSelf: "alignSelf", appendTo: "appendTo", cls: "cls", columnLines: "columnLines", content: "content", data: "data", dataset: "dataset", disabled: "disabled", emptyText: "emptyText", enableUndoRedoKeys: "enableUndoRedoKeys", extraData: "extraData", flex: "flex", height: "height", hidden: "hidden", html: "html", id: "id", insertBefore: "insertBefore", insertFirst: "insertFirst", items: "items", layout: "layout", layoutStyle: "layoutStyle", longPressTime: "longPressTime", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", readOnly: "readOnly", record: "record", rowHeight: "rowHeight", scrollable: "scrollable", store: "store", strictRecordMapping: "strictRecordMapping", title: "title", tools: "tools", tooltip: "tooltip", transitionDuration: "transitionDuration", width: "width", x: "x", y: "y", anchorSize: "anchorSize", isSettingValues: "isSettingValues", isValid: "isValid", selectedCell: "selectedCell", selectedCells: "selectedCells", selectedRecord: "selectedRecord", selectedRecords: "selectedRecords", selectedRows: "selectedRows", state: "state", type: "type", values: "values", cellCopyPasteFeature: "cellCopyPasteFeature", cellEditFeature: "cellEditFeature", cellMenuFeature: "cellMenuFeature", cellTooltipFeature: "cellTooltipFeature", columnAutoWidthFeature: "columnAutoWidthFeature", columnDragToolbarFeature: "columnDragToolbarFeature", columnPickerFeature: "columnPickerFeature", columnRenameFeature: "columnRenameFeature", columnReorderFeature: "columnReorderFeature", columnResizeFeature: "columnResizeFeature", excelExporterFeature: "excelExporterFeature", fillHandleFeature: "fillHandleFeature", filterFeature: "filterFeature", filterBarFeature: "filterBarFeature", groupFeature: "groupFeature", groupSummaryFeature: "groupSummaryFeature", headerMenuFeature: "headerMenuFeature", mergeCellsFeature: "mergeCellsFeature", multipageFeature: "multipageFeature", multipageverticalFeature: "multipageverticalFeature", pdfExportFeature: "pdfExportFeature", quickFindFeature: "quickFindFeature", regionResizeFeature: "regionResizeFeature", rowCopyPasteFeature: "rowCopyPasteFeature", rowExpanderFeature: "rowExpanderFeature", rowReorderFeature: "rowReorderFeature", searchFeature: "searchFeature", singlepageFeature: "singlepageFeature", sortFeature: "sortFeature", stickyCellsFeature: "stickyCellsFeature", stripeFeature: "stripeFeature", summaryFeature: "summaryFeature", treeFeature: "treeFeature", treeGroupFeature: "treeGroupFeature" }, outputs: { onBeforeCancelCellEdit: "onBeforeCancelCellEdit", onBeforeCellDelete: "onBeforeCellDelete", onBeforeCellEditStart: "onBeforeCellEditStart", onBeforeClose: "onBeforeClose", onBeforeColumnDragStart: "onBeforeColumnDragStart", onBeforeColumnDropFinalize: "onBeforeColumnDropFinalize", onBeforeCopy: "onBeforeCopy", onBeforeDestroy: "onBeforeDestroy", onBeforeFinishCellEdit: "onBeforeFinishCellEdit", onBeforeHide: "onBeforeHide", onBeforePaste: "onBeforePaste", onBeforePdfExport: "onBeforePdfExport", onBeforeRenderRow: "onBeforeRenderRow", onBeforeRenderRows: "onBeforeRenderRows", onBeforeSelectionChange: "onBeforeSelectionChange", onBeforeSetRecord: "onBeforeSetRecord", onBeforeShow: "onBeforeShow", onBeforeToggleGroup: "onBeforeToggleGroup", onBeforeToggleNode: "onBeforeToggleNode", onCancelCellEdit: "onCancelCellEdit", onCatchAll: "onCatchAll", onCellClick: "onCellClick", onCellContextMenu: "onCellContextMenu", onCellDblClick: "onCellDblClick", onCellMenuBeforeShow: "onCellMenuBeforeShow", onCellMenuItem: "onCellMenuItem", onCellMenuShow: "onCellMenuShow", onCellMenuToggleItem: "onCellMenuToggleItem", onCellMouseOut: "onCellMouseOut", onCellMouseOver: "onCellMouseOver", onCollapseNode: "onCollapseNode", onColumnDrag: "onColumnDrag", onColumnDragStart: "onColumnDragStart", onColumnDrop: "onColumnDrop", onContextMenuItem: "onContextMenuItem", onContextMenuToggleItem: "onContextMenuToggleItem", onCopy: "onCopy", onDataChange: "onDataChange", onDestroy: "onDestroy", onDragSelecting: "onDragSelecting", onExpandNode: "onExpandNode", onFinishCellEdit: "onFinishCellEdit", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onGridRowAbort: "onGridRowAbort", onGridRowBeforeDragStart: "onGridRowBeforeDragStart", onGridRowBeforeDropFinalize: "onGridRowBeforeDropFinalize", onGridRowDrag: "onGridRowDrag", onGridRowDragStart: "onGridRowDragStart", onGridRowDrop: "onGridRowDrop", onHeaderMenuBeforeShow: "onHeaderMenuBeforeShow", onHeaderMenuItem: "onHeaderMenuItem", onHeaderMenuShow: "onHeaderMenuShow", onHeaderMenuToggleItem: "onHeaderMenuToggleItem", onHide: "onHide", onMouseOut: "onMouseOut", onMouseOver: "onMouseOver", onPaint: "onPaint", onPaste: "onPaste", onPdfExport: "onPdfExport", onPointerOver: "onPointerOver", onReadOnly: "onReadOnly", onRecompose: "onRecompose", onRenderRow: "onRenderRow", onRenderRows: "onRenderRows", onResize: "onResize", onResponsive: "onResponsive", onScroll: "onScroll", onSelectionChange: "onSelectionChange", onSelectionModeChange: "onSelectionModeChange", onShow: "onShow", onStartCellEdit: "onStartCellEdit", onSubGridCollapse: "onSubGridCollapse", onSubGridExpand: "onSubGridExpand", onToggleGroup: "onToggleGroup", onToggleNode: "onToggleNode", onToolClick: "onToolClick" }, usesOnChanges: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.0", ngImport: i0, type: BryntumGridBaseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bryntum-grid-base',
                    template: ''
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { adopt: [{
                type: Input
            }], align: [{
                type: Input
            }], allowOver: [{
                type: Input
            }], anchor: [{
                type: Input
            }], anchorToTarget: [{
                type: Input
            }], animateRemovingRows: [{
                type: Input
            }], ariaDescription: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], autoClose: [{
                type: Input
            }], autoHeight: [{
                type: Input
            }], autoShow: [{
                type: Input
            }], autoUpdateRecord: [{
                type: Input
            }], bbar: [{
                type: Input
            }], bodyCls: [{
                type: Input
            }], bubbleEvents: [{
                type: Input
            }], callOnFunctions: [{
                type: Input
            }], centered: [{
                type: Input
            }], closable: [{
                type: Input
            }], closeAction: [{
                type: Input
            }], collapsed: [{
                type: Input
            }], collapsible: [{
                type: Input
            }], columns: [{
                type: Input
            }], config: [{
                type: Input
            }], constrainTo: [{
                type: Input
            }], contentElementCls: [{
                type: Input
            }], contextMenuTriggerEvent: [{
                type: Input
            }], defaultBindProperty: [{
                type: Input
            }], defaultFocus: [{
                type: Input
            }], defaultRegion: [{
                type: Input
            }], defaults: [{
                type: Input
            }], destroyStore: [{
                type: Input
            }], disableGridRowModelWarning: [{
                type: Input
            }], dismissDelay: [{
                type: Input
            }], dock: [{
                type: Input
            }], draggable: [{
                type: Input
            }], enableSticky: [{
                type: Input
            }], enableTextSelection: [{
                type: Input
            }], features: [{
                type: Input
            }], fillLastColumn: [{
                type: Input
            }], fixedRowHeight: [{
                type: Input
            }], floating: [{
                type: Input
            }], focusOnToFront: [{
                type: Input
            }], footer: [{
                type: Input
            }], forElement: [{
                type: Input
            }], forSelector: [{
                type: Input
            }], fullRowRefresh: [{
                type: Input
            }], getHtml: [{
                type: Input
            }], getRowHeight: [{
                type: Input
            }], header: [{
                type: Input
            }], hideAnimation: [{
                type: Input
            }], hideDelay: [{
                type: Input
            }], hideHeaders: [{
                type: Input
            }], hideOnDelegateChange: [{
                type: Input
            }], hideWhenEmpty: [{
                type: Input
            }], hoverDelay: [{
                type: Input
            }], htmlCls: [{
                type: Input
            }], ignoreParentReadOnly: [{
                type: Input
            }], itemCls: [{
                type: Input
            }], keyMap: [{
                type: Input
            }], lazyItems: [{
                type: Input
            }], listeners: [{
                type: Input
            }], loadingMsg: [{
                type: Input
            }], loadMask: [{
                type: Input
            }], loadMaskDefaults: [{
                type: Input
            }], loadMaskError: [{
                type: Input
            }], localeClass: [{
                type: Input
            }], localizable: [{
                type: Input
            }], localizableProperties: [{
                type: Input
            }], maskDefaults: [{
                type: Input
            }], masked: [{
                type: Input
            }], maximizable: [{
                type: Input
            }], maximized: [{
                type: Input
            }], modal: [{
                type: Input
            }], monitorResize: [{
                type: Input
            }], mouseOffsetX: [{
                type: Input
            }], mouseOffsetY: [{
                type: Input
            }], namedItems: [{
                type: Input
            }], owner: [{
                type: Input
            }], plugins: [{
                type: Input
            }], positioned: [{
                type: Input
            }], preserveFocusOnDatasetChange: [{
                type: Input
            }], preserveScrollOnDatasetChange: [{
                type: Input
            }], preventTooltipOnTouch: [{
                type: Input
            }], relayStoreEvents: [{
                type: Input
            }], resizeToFitIncludesHeader: [{
                type: Input
            }], responsiveLevels: [{
                type: Input
            }], ripple: [{
                type: Input
            }], rootElement: [{
                type: Input
            }], scrollAction: [{
                type: Input
            }], scrollerClass: [{
                type: Input
            }], scrollManager: [{
                type: Input
            }], selectionMode: [{
                type: Input
            }], showAnimation: [{
                type: Input
            }], showDirty: [{
                type: Input
            }], showOnClick: [{
                type: Input
            }], showOnHover: [{
                type: Input
            }], showTooltipWhenDisabled: [{
                type: Input
            }], stateful: [{
                type: Input
            }], statefulEvents: [{
                type: Input
            }], stateId: [{
                type: Input
            }], stateProvider: [{
                type: Input
            }], strips: [{
                type: Input
            }], subGridConfigs: [{
                type: Input
            }], syncMask: [{
                type: Input
            }], tab: [{
                type: Input
            }], tag: [{
                type: Input
            }], tbar: [{
                type: Input
            }], textAlign: [{
                type: Input
            }], textContent: [{
                type: Input
            }], trackMouse: [{
                type: Input
            }], trapFocus: [{
                type: Input
            }], ui: [{
                type: Input
            }], weight: [{
                type: Input
            }], alignSelf: [{
                type: Input
            }], appendTo: [{
                type: Input
            }], cls: [{
                type: Input
            }], columnLines: [{
                type: Input
            }], content: [{
                type: Input
            }], data: [{
                type: Input
            }], dataset: [{
                type: Input
            }], disabled: [{
                type: Input
            }], emptyText: [{
                type: Input
            }], enableUndoRedoKeys: [{
                type: Input
            }], extraData: [{
                type: Input
            }], flex: [{
                type: Input
            }], height: [{
                type: Input
            }], hidden: [{
                type: Input
            }], html: [{
                type: Input
            }], id: [{
                type: Input
            }], insertBefore: [{
                type: Input
            }], insertFirst: [{
                type: Input
            }], items: [{
                type: Input
            }], layout: [{
                type: Input
            }], layoutStyle: [{
                type: Input
            }], longPressTime: [{
                type: Input
            }], margin: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], minHeight: [{
                type: Input
            }], minWidth: [{
                type: Input
            }], readOnly: [{
                type: Input
            }], record: [{
                type: Input
            }], rowHeight: [{
                type: Input
            }], scrollable: [{
                type: Input
            }], store: [{
                type: Input
            }], strictRecordMapping: [{
                type: Input
            }], title: [{
                type: Input
            }], tools: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], transitionDuration: [{
                type: Input
            }], width: [{
                type: Input
            }], x: [{
                type: Input
            }], y: [{
                type: Input
            }], anchorSize: [{
                type: Input
            }], isSettingValues: [{
                type: Input
            }], isValid: [{
                type: Input
            }], selectedCell: [{
                type: Input
            }], selectedCells: [{
                type: Input
            }], selectedRecord: [{
                type: Input
            }], selectedRecords: [{
                type: Input
            }], selectedRows: [{
                type: Input
            }], state: [{
                type: Input
            }], type: [{
                type: Input
            }], values: [{
                type: Input
            }], onBeforeCancelCellEdit: [{
                type: Output
            }], onBeforeCellDelete: [{
                type: Output
            }], onBeforeCellEditStart: [{
                type: Output
            }], onBeforeClose: [{
                type: Output
            }], onBeforeColumnDragStart: [{
                type: Output
            }], onBeforeColumnDropFinalize: [{
                type: Output
            }], onBeforeCopy: [{
                type: Output
            }], onBeforeDestroy: [{
                type: Output
            }], onBeforeFinishCellEdit: [{
                type: Output
            }], onBeforeHide: [{
                type: Output
            }], onBeforePaste: [{
                type: Output
            }], onBeforePdfExport: [{
                type: Output
            }], onBeforeRenderRow: [{
                type: Output
            }], onBeforeRenderRows: [{
                type: Output
            }], onBeforeSelectionChange: [{
                type: Output
            }], onBeforeSetRecord: [{
                type: Output
            }], onBeforeShow: [{
                type: Output
            }], onBeforeToggleGroup: [{
                type: Output
            }], onBeforeToggleNode: [{
                type: Output
            }], onCancelCellEdit: [{
                type: Output
            }], onCatchAll: [{
                type: Output
            }], onCellClick: [{
                type: Output
            }], onCellContextMenu: [{
                type: Output
            }], onCellDblClick: [{
                type: Output
            }], onCellMenuBeforeShow: [{
                type: Output
            }], onCellMenuItem: [{
                type: Output
            }], onCellMenuShow: [{
                type: Output
            }], onCellMenuToggleItem: [{
                type: Output
            }], onCellMouseOut: [{
                type: Output
            }], onCellMouseOver: [{
                type: Output
            }], onCollapseNode: [{
                type: Output
            }], onColumnDrag: [{
                type: Output
            }], onColumnDragStart: [{
                type: Output
            }], onColumnDrop: [{
                type: Output
            }], onContextMenuItem: [{
                type: Output
            }], onContextMenuToggleItem: [{
                type: Output
            }], onCopy: [{
                type: Output
            }], onDataChange: [{
                type: Output
            }], onDestroy: [{
                type: Output
            }], onDragSelecting: [{
                type: Output
            }], onExpandNode: [{
                type: Output
            }], onFinishCellEdit: [{
                type: Output
            }], onFocusIn: [{
                type: Output
            }], onFocusOut: [{
                type: Output
            }], onGridRowAbort: [{
                type: Output
            }], onGridRowBeforeDragStart: [{
                type: Output
            }], onGridRowBeforeDropFinalize: [{
                type: Output
            }], onGridRowDrag: [{
                type: Output
            }], onGridRowDragStart: [{
                type: Output
            }], onGridRowDrop: [{
                type: Output
            }], onHeaderMenuBeforeShow: [{
                type: Output
            }], onHeaderMenuItem: [{
                type: Output
            }], onHeaderMenuShow: [{
                type: Output
            }], onHeaderMenuToggleItem: [{
                type: Output
            }], onHide: [{
                type: Output
            }], onMouseOut: [{
                type: Output
            }], onMouseOver: [{
                type: Output
            }], onPaint: [{
                type: Output
            }], onPaste: [{
                type: Output
            }], onPdfExport: [{
                type: Output
            }], onPointerOver: [{
                type: Output
            }], onReadOnly: [{
                type: Output
            }], onRecompose: [{
                type: Output
            }], onRenderRow: [{
                type: Output
            }], onRenderRows: [{
                type: Output
            }], onResize: [{
                type: Output
            }], onResponsive: [{
                type: Output
            }], onScroll: [{
                type: Output
            }], onSelectionChange: [{
                type: Output
            }], onSelectionModeChange: [{
                type: Output
            }], onShow: [{
                type: Output
            }], onStartCellEdit: [{
                type: Output
            }], onSubGridCollapse: [{
                type: Output
            }], onSubGridExpand: [{
                type: Output
            }], onToggleGroup: [{
                type: Output
            }], onToggleNode: [{
                type: Output
            }], onToolClick: [{
                type: Output
            }], cellCopyPasteFeature: [{
                type: Input
            }], cellEditFeature: [{
                type: Input
            }], cellMenuFeature: [{
                type: Input
            }], cellTooltipFeature: [{
                type: Input
            }], columnAutoWidthFeature: [{
                type: Input
            }], columnDragToolbarFeature: [{
                type: Input
            }], columnPickerFeature: [{
                type: Input
            }], columnRenameFeature: [{
                type: Input
            }], columnReorderFeature: [{
                type: Input
            }], columnResizeFeature: [{
                type: Input
            }], excelExporterFeature: [{
                type: Input
            }], fillHandleFeature: [{
                type: Input
            }], filterFeature: [{
                type: Input
            }], filterBarFeature: [{
                type: Input
            }], groupFeature: [{
                type: Input
            }], groupSummaryFeature: [{
                type: Input
            }], headerMenuFeature: [{
                type: Input
            }], mergeCellsFeature: [{
                type: Input
            }], multipageFeature: [{
                type: Input
            }], multipageverticalFeature: [{
                type: Input
            }], pdfExportFeature: [{
                type: Input
            }], quickFindFeature: [{
                type: Input
            }], regionResizeFeature: [{
                type: Input
            }], rowCopyPasteFeature: [{
                type: Input
            }], rowExpanderFeature: [{
                type: Input
            }], rowReorderFeature: [{
                type: Input
            }], searchFeature: [{
                type: Input
            }], singlepageFeature: [{
                type: Input
            }], sortFeature: [{
                type: Input
            }], stickyCellsFeature: [{
                type: Input
            }], stripeFeature: [{
                type: Input
            }], summaryFeature: [{
                type: Input
            }], treeFeature: [{
                type: Input
            }], treeGroupFeature: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJ5bnR1bS1ncmlkLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29tcG9uZW50L3NyYy9saWIvYnJ5bnR1bS1ncmlkLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBYyxZQUFZLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBa0QsTUFBTSxlQUFlLENBQUM7QUFFbkksT0FBTyxhQUFhLE1BQU0sa0JBQWtCLENBQUM7QUFHN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7O0FBTXpFLE1BQU0sT0FBTyx3QkFBd0I7SUE0Y2pDLFlBQVksT0FBbUI7UUFUdkIsa0JBQWEsR0FBRztZQUNwQixLQUFLLEVBQWMsU0FBUztZQUM1QixRQUFRLEVBQVcsU0FBUztZQUM1QixJQUFJLEVBQWUsU0FBUztZQUM1QixnQkFBZ0IsRUFBRyxJQUFJO1lBQ3ZCLFFBQVEsRUFBVyxFQUFFO1lBQ3JCLFNBQVMsRUFBVSxFQUFFO1NBQ3hCLENBQUM7UUFnTEQsU0FBUztRQUNBLDJCQUFzQixHQUFRLElBQUksWUFBWSxFQUFVLENBQUM7UUFDekQsdUJBQWtCLEdBQVksSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUN6RCwwQkFBcUIsR0FBUyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBQ3pELGtCQUFhLEdBQWlCLElBQUksWUFBWSxFQUFVLENBQUM7UUFDekQsNEJBQXVCLEdBQU8sSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUN6RCwrQkFBMEIsR0FBSSxJQUFJLFlBQVksRUFBVSxDQUFDO1FBQ3pELGlCQUFZLEdBQWtCLElBQUksWUFBWSxFQUFVLENBQUM7UUFDekQsb0JBQWUsR0FBZSxJQUFJLFlBQVksRUFBVSxDQUFDO1FBQ3pELDJCQUFzQixHQUFRLElBQUksWUFBWSxFQUFVLENBQUM7UUFDekQs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QkFBM0IsS0FBSztnQkFDRyxpQkFBaUI7c0JBQXpCLEtBQUs7Z0JBQ0csaUJBQWlCO3NCQUF6QixLQUFLO2dCQUNHLGdCQUFnQjtzQkFBeEIsS0FBSztnQkFDRyx3QkFBd0I7c0JBQWhDLEtBQUs7Z0JBQ0csZ0JBQWdCO3NCQUF4QixLQUFLO2dCQUNHLGdCQUFnQjtzQkFBeEIsS0FBSztnQkFDRyxtQkFBbUI7c0JBQTNCLEtBQUs7Z0JBQ0csbUJBQW1CO3NCQUEzQixLQUFLO2dCQUNHLGtCQUFrQjtzQkFBMUIsS0FBSztnQkFDRyxpQkFBaUI7c0JBQXpCLEtBQUs7Z0JBQ0csYUFBYTtzQkFBckIsS0FBSztnQkFDRyxpQkFBaUI7c0JBQXpCLEtBQUs7Z0JBQ0csV0FBVztzQkFBbkIsS0FBSztnQkFDRyxrQkFBa0I7c0JBQTFCLEtBQUs7Z0JBQ0csYUFBYTtzQkFBckIsS0FBSztnQkFDRyxjQUFjO3NCQUF0QixLQUFLO2dCQUNHLFdBQVc7c0JBQW5CLEtBQUs7Z0JBQ0csZ0JBQWdCO3NCQUF4QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBbmd1bGFyIHdyYXBwZXIgZm9yIEJyeW50dW0gR3JpZEJhc2VcbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBJbnB1dCwgU2ltcGxlQ2hhbmdlLCBTaW1wbGVDaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgV3JhcHBlckhlbHBlciBmcm9tICcuL3dyYXBwZXIuaGVscGVyJztcblxuaW1wb3J0IHsgQWxpZ25TcGVjLCBCYXNlLCBDZWxsQ29weVBhc3RlLCBDZWxsQ29weVBhc3RlQ29uZmlnLCBDZWxsRWRpdCwgQ2VsbEVkaXRDb25maWcsIENlbGxNZW51LCBDZWxsTWVudUNvbmZpZywgQ2VsbFRvb2x0aXAsIENlbGxUb29sdGlwQ29uZmlnLCBDb2x1bW5BdXRvV2lkdGgsIENvbHVtbkF1dG9XaWR0aENvbmZpZywgQ29sdW1uRHJhZ1Rvb2xiYXIsIENvbHVtbkRyYWdUb29sYmFyQ29uZmlnLCBDb2x1bW5QaWNrZXIsIENvbHVtblBpY2tlckNvbmZpZywgQ29sdW1uUmVuYW1lLCBDb2x1bW5SZW5hbWVDb25maWcsIENvbHVtblJlb3JkZXIsIENvbHVtblJlb3JkZXJDb25maWcsIENvbHVtblJlc2l6ZSwgQ29sdW1uUmVzaXplQ29uZmlnLCBDb2x1bW5TdG9yZSwgQ29sdW1uU3RvcmVDb25maWcsIENvbnRhaW5lckl0ZW1Db25maWcsIENvbnRhaW5lckxheW91dENvbmZpZywgRmlsbEhhbmRsZSwgRmlsbEhhbmRsZUNvbmZpZywgRmlsdGVyLCBGaWx0ZXJCYXIsIEZpbHRlckJhckNvbmZpZywgRmlsdGVyQ29uZmlnLCBHcmlkQmFzZUZlYXR1cmVzQ29uZmlnVHlwZSwgR3JpZENvbHVtbkNvbmZpZywgR3JpZEV4Y2VsRXhwb3J0ZXIsIEdyaWRFeGNlbEV4cG9ydGVyQ29uZmlnLCBHcmlkR3JvdXBTdW1tYXJ5LCBHcmlkR3JvdXBTdW1tYXJ5Q29uZmlnLCBHcmlkTXVsdGlQYWdlRXhwb3J0ZXIsIEdyaWRNdWx0aVBhZ2VFeHBvcnRlckNvbmZpZywgR3JpZE11bHRpUGFnZVZlcnRpY2FsRXhwb3J0ZXIsIEdyaWRNdWx0aVBhZ2VWZXJ0aWNhbEV4cG9ydGVyQ29uZmlnLCBHcmlkUGRmRXhwb3J0LCBHcmlkUGRmRXhwb3J0Q29uZmlnLCBHcmlkU2luZ2xlUGFnZUV4cG9ydGVyLCBHcmlkU2luZ2xlUGFnZUV4cG9ydGVyQ29uZmlnLCBHcmlkU3VtbWFyeSwgR3JpZFN1bW1hcnlDb25maWcsIEdyb3VwLCBHcm91cENvbmZpZywgSGVhZGVyTWVudSwgSGVhZGVyTWVudUNvbmZpZywgTGF5b3V0LCBMb2NhdGlvbiwgTWFzaywgTWFza0NvbmZpZywgTWVyZ2VDZWxscywgTWVyZ2VDZWxsc0NvbmZpZywgTW9kZWwsIE1vZGVsQ29uZmlnLCBQYW5lbENvbGxhcHNlckNvbmZpZywgUGFuZWxDb2xsYXBzZXJPdmVybGF5Q29uZmlnLCBQYW5lbEhlYWRlciwgUXVpY2tGaW5kLCBRdWlja0ZpbmRDb25maWcsIFJlY3RhbmdsZSwgUmVnaW9uUmVzaXplLCBSZWdpb25SZXNpemVDb25maWcsIFJvd0NvcHlQYXN0ZSwgUm93Q29weVBhc3RlQ29uZmlnLCBSb3dFeHBhbmRlciwgUm93RXhwYW5kZXJDb25maWcsIFJvd1Jlb3JkZXIsIFJvd1Jlb3JkZXJDb25maWcsIFNjcm9sbE1hbmFnZXIsIFNjcm9sbE1hbmFnZXJDb25maWcsIFNjcm9sbGVyLCBTY3JvbGxlckNvbmZpZywgU2VhcmNoLCBTZWFyY2hDb25maWcsIFNvcnQsIFNvcnRDb25maWcsIFN0YXRlUHJvdmlkZXIsIFN0aWNreUNlbGxzLCBTdGlja3lDZWxsc0NvbmZpZywgU3RvcmUsIFN0b3JlQ29uZmlnLCBTdHJpcGUsIFN0cmlwZUNvbmZpZywgU3ViR3JpZENvbmZpZywgVGFiQ29uZmlnLCBUb29sLCBUb29sQ29uZmlnLCBUb29sYmFyQ29uZmlnLCBUb29sdGlwQ29uZmlnLCBUcmVlLCBUcmVlQ29uZmlnLCBUcmVlR3JvdXAsIFRyZWVHcm91cENvbmZpZywgV2lkZ2V0IH0gZnJvbSAnQGJyeW50dW0vY2FsZW5kYXInO1xuaW1wb3J0IHsgR3JpZEJhc2UsIFN0cmluZ0hlbHBlciwgV2lkZ2V0SGVscGVyIH0gZnJvbSAnQGJyeW50dW0vY2FsZW5kYXInO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvciA6ICdicnludHVtLWdyaWQtYmFzZScsXG4gICAgdGVtcGxhdGUgOiAnJ1xufSlcbmV4cG9ydCBjbGFzcyBCcnludHVtR3JpZEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgICBwdWJsaWMgc3RhdGljIGluc3RhbmNlQ2xhc3MgPSBHcmlkQmFzZTtcblxuICAgIHB1YmxpYyBzdGF0aWMgaW5zdGFuY2VOYW1lID0gJ0dyaWRCYXNlJztcblxuICAgIHByaXZhdGUgc3RhdGljIGJyeW50dW1FdmVudHM6IHN0cmluZ1tdID0gW1xuICAgICAgICAnb25CZWZvcmVDYW5jZWxDZWxsRWRpdCcsXG4gICAgICAgICdvbkJlZm9yZUNlbGxEZWxldGUnLFxuICAgICAgICAnb25CZWZvcmVDZWxsRWRpdFN0YXJ0JyxcbiAgICAgICAgJ29uQmVmb3JlQ2xvc2UnLFxuICAgICAgICAnb25CZWZvcmVDb2x1bW5EcmFnU3RhcnQnLFxuICAgICAgICAnb25CZWZvcmVDb2x1bW5Ecm9wRmluYWxpemUnLFxuICAgICAgICAnb25CZWZvcmVDb3B5JyxcbiAgICAgICAgJ29uQmVmb3JlRGVzdHJveScsXG4gICAgICAgICdvbkJlZm9yZUZpbmlzaENlbGxFZGl0JyxcbiAgICAgICAgJ29uQmVmb3JlSGlkZScsXG4gICAgICAgICdvbkJlZm9yZVBhc3RlJyxcbiAgICAgICAgJ29uQmVmb3JlUGRmRXhwb3J0JyxcbiAgICAgICAgJ29uQmVmb3JlUmVuZGVyUm93JyxcbiAgICAgICAgJ29uQmVmb3JlUmVuZGVyUm93cycsXG4gICAgICAgICdvbkJlZm9yZVNlbGVjdGlvbkNoYW5nZScsXG4gICAgICAgICdvbkJlZm9yZVNldFJlY29yZCcsXG4gICAgICAgICdvbkJlZm9yZVNob3cnLFxuICAgICAgICAnb25CZWZvcmVUb2dnbGVHcm91cCcsXG4gICAgICAgICdvbkJlZm9yZVRvZ2dsZU5vZGUnLFxuICAgICAgICAnb25DYW5jZWxDZWxsRWRpdCcsXG4gICAgICAgICdvbkNhdGNoQWxsJyxcbiAgICAgICAgJ29uQ2VsbENsaWNrJyxcbiAgICAgICAgJ29uQ2VsbENvbnRleHRNZW51JyxcbiAgICAgICAgJ29uQ2VsbERibENsaWNrJyxcbiAgICAgICAgJ29uQ2VsbE1lbnVCZWZvcmVTaG93JyxcbiAgICAgICAgJ29uQ2VsbE1lbnVJdGVtJyxcbiAgICAgICAgJ29uQ2VsbE1lbnVTaG93JyxcbiAgICAgICAgJ29uQ2VsbE1lbnVUb2dnbGVJdGVtJyxcbiAgICAgICAgJ29uQ2VsbE1vdXNlT3V0JyxcbiAgICAgICAgJ29uQ2VsbE1vdXNlT3ZlcicsXG4gICAgICAgICdvbkNvbGxhcHNlTm9kZScsXG4gICAgICAgICdvbkNvbHVtbkRyYWcnLFxuICAgICAgICAnb25Db2x1bW5EcmFnU3RhcnQnLFxuICAgICAgICAnb25Db2x1bW5Ecm9wJyxcbiAgICAgICAgJ29uQ29udGV4dE1lbnVJdGVtJyxcbiAgICAgICAgJ29uQ29udGV4dE1lbnVUb2dnbGVJdGVtJyxcbiAgICAgICAgJ29uQ29weScsXG4gICAgICAgICdvbkRhdGFDaGFuZ2UnLFxuICAgICAgICAnb25EZXN0cm95JyxcbiAgICAgICAgJ29uRHJhZ1NlbGVjdGluZycsXG4gICAgICAgICdvbkV4cGFuZE5vZGUnLFxuICAgICAgICAnb25GaW5pc2hDZWxsRWRpdCcsXG4gICAgICAgICdvbkZvY3VzSW4nLFxuICAgICAgICAnb25Gb2N1c091dCcsXG4gICAgICAgICdvbkdyaWRSb3dBYm9ydCcsXG4gICAgICAgICdvbkdyaWRSb3dCZWZvcmVEcmFnU3RhcnQnLFxuICAgICAgICAnb25HcmlkUm93QmVmb3JlRHJvcEZpbmFsaXplJyxcbiAgICAgICAgJ29uR3JpZFJvd0RyYWcnLFxuICAgICAgICAnb25HcmlkUm93RHJhZ1N0YXJ0JyxcbiAgICAgICAgJ29uR3JpZFJvd0Ryb3AnLFxuICAgICAgICAnb25IZWFkZXJNZW51QmVmb3JlU2hvdycsXG4gICAgICAgICdvbkhlYWRlck1lbnVJdGVtJyxcbiAgICAgICAgJ29uSGVhZGVyTWVudVNob3cnLFxuICAgICAgICAnb25IZWFkZXJNZW51VG9nZ2xlSXRlbScsXG4gICAgICAgICdvbkhpZGUnLFxuICAgICAgICAnb25Nb3VzZU91dCcsXG4gICAgICAgICdvbk1vdXNlT3ZlcicsXG4gICAgICAgICdvblBhaW50JyxcbiAgICAgICAgJ29uUGFzdGUnLFxuICAgICAgICAnb25QZGZFeHBvcnQnLFxuICAgICAgICAnb25Qb2ludGVyT3ZlcicsXG4gICAgICAgICdvblJlY29tcG9zZScsXG4gICAgICAgICdvblJlbmRlclJvdycsXG4gICAgICAgICdvblJlbmRlclJvd3MnLFxuICAgICAgICAnb25SZXNpemUnLFxuICAgICAgICAnb25SZXNwb25zaXZlJyxcbiAgICAgICAgJ29uU2Nyb2xsJyxcbiAgICAgICAgJ29uU2VsZWN0aW9uQ2hhbmdlJyxcbiAgICAgICAgJ29uU2VsZWN0aW9uTW9kZUNoYW5nZScsXG4gICAgICAgICdvblNob3cnLFxuICAgICAgICAnb25TdGFydENlbGxFZGl0JyxcbiAgICAgICAgJ29uU3ViR3JpZENvbGxhcHNlJyxcbiAgICAgICAgJ29uU3ViR3JpZEV4cGFuZCcsXG4gICAgICAgICdvblRvZ2dsZUdyb3VwJyxcbiAgICAgICAgJ29uVG9nZ2xlTm9kZScsXG4gICAgICAgICdvblRvb2xDbGljaydcbiAgICBdO1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgYnJ5bnR1bUZlYXR1cmVOYW1lczogc3RyaW5nW10gPSBbXG4gICAgICAgICdjZWxsQ29weVBhc3RlRmVhdHVyZScsXG4gICAgICAgICdjZWxsRWRpdEZlYXR1cmUnLFxuICAgICAgICAnY2VsbE1lbnVGZWF0dXJlJyxcbiAgICAgICAgJ2NlbGxUb29sdGlwRmVhdHVyZScsXG4gICAgICAgICdjb2x1bW5BdXRvV2lkdGhGZWF0dXJlJyxcbiAgICAgICAgJ2NvbHVtbkRyYWdUb29sYmFyRmVhdHVyZScsXG4gICAgICAgICdjb2x1bW5QaWNrZXJGZWF0dXJlJyxcbiAgICAgICAgJ2NvbHVtblJlbmFtZUZlYXR1cmUnLFxuICAgICAgICAnY29sdW1uUmVvcmRlckZlYXR1cmUnLFxuICAgICAgICAnY29sdW1uUmVzaXplRmVhdHVyZScsXG4gICAgICAgICdleGNlbEV4cG9ydGVyRmVhdHVyZScsXG4gICAgICAgICdmaWxsSGFuZGxlRmVhdHVyZScsXG4gICAgICAgICdmaWx0ZXJGZWF0dXJlJyxcbiAgICAgICAgJ2ZpbHRlckJhckZlYXR1cmUnLFxuICAgICAgICAnZ3JvdXBGZWF0dXJlJyxcbiAgICAgICAgJ2dyb3VwU3VtbWFyeUZlYXR1cmUnLFxuICAgICAgICAnaGVhZGVyTWVudUZlYXR1cmUnLFxuICAgICAgICAnbWVyZ2VDZWxsc0ZlYXR1cmUnLFxuICAgICAgICAnbXVsdGlwYWdlRmVhdHVyZScsXG4gICAgICAgICdtdWx0aXBhZ2V2ZXJ0aWNhbEZlYXR1cmUnLFxuICAgICAgICAncGRmRXhwb3J0RmVhdHVyZScsXG4gICAgICAgICdxdWlja0ZpbmRGZWF0dXJlJyxcbiAgICAgICAgJ3JlZ2lvblJlc2l6ZUZlYXR1cmUnLFxuICAgICAgICAncm93Q29weVBhc3RlRmVhdHVyZScsXG4gICAgICAgICdyb3dFeHBhbmRlckZlYXR1cmUnLFxuICAgICAgICAncm93UmVvcmRlckZlYXR1cmUnLFxuICAgICAgICAnc2VhcmNoRmVhdHVyZScsXG4gICAgICAgICdzaW5nbGVwYWdlRmVhdHVyZScsXG4gICAgICAgICdzb3J0RmVhdHVyZScsXG4gICAgICAgICdzdGlja3lDZWxsc0ZlYXR1cmUnLFxuICAgICAgICAnc3RyaXBlRmVhdHVyZScsXG4gICAgICAgICdzdW1tYXJ5RmVhdHVyZScsXG4gICAgICAgICd0cmVlRmVhdHVyZScsXG4gICAgICAgICd0cmVlR3JvdXBGZWF0dXJlJ1xuICAgIF07XG5cbiAgICBwcml2YXRlIHN0YXRpYyBicnludHVtQ29uZmlnczogc3RyaW5nW10gPSBCcnludHVtR3JpZEJhc2VDb21wb25lbnQuYnJ5bnR1bUZlYXR1cmVOYW1lcy5jb25jYXQoW1xuICAgICAgICAnYWRvcHQnLFxuICAgICAgICAnYWxpZ24nLFxuICAgICAgICAnYWxpZ25TZWxmJyxcbiAgICAgICAgJ2FsbG93T3ZlcicsXG4gICAgICAgICdhbmNob3InLFxuICAgICAgICAnYW5jaG9yVG9UYXJnZXQnLFxuICAgICAgICAnYW5pbWF0ZVJlbW92aW5nUm93cycsXG4gICAgICAgICdhcHBlbmRUbycsXG4gICAgICAgICdhcmlhRGVzY3JpcHRpb24nLFxuICAgICAgICAnYXJpYUxhYmVsJyxcbiAgICAgICAgJ2F1dG9DbG9zZScsXG4gICAgICAgICdhdXRvSGVpZ2h0JyxcbiAgICAgICAgJ2F1dG9TaG93JyxcbiAgICAgICAgJ2F1dG9VcGRhdGVSZWNvcmQnLFxuICAgICAgICAnYmJhcicsXG4gICAgICAgICdib2R5Q2xzJyxcbiAgICAgICAgJ2J1YmJsZUV2ZW50cycsXG4gICAgICAgICdjYWxsT25GdW5jdGlvbnMnLFxuICAgICAgICAnY2VudGVyZWQnLFxuICAgICAgICAnY2xvc2FibGUnLFxuICAgICAgICAnY2xvc2VBY3Rpb24nLFxuICAgICAgICAnY2xzJyxcbiAgICAgICAgJ2NvbGxhcHNlZCcsXG4gICAgICAgICdjb2xsYXBzaWJsZScsXG4gICAgICAgICdjb2x1bW5MaW5lcycsXG4gICAgICAgICdjb2x1bW5zJyxcbiAgICAgICAgJ2NvbmZpZycsXG4gICAgICAgICdjb25zdHJhaW5UbycsXG4gICAgICAgICdjb250ZW50JyxcbiAgICAgICAgJ2NvbnRlbnRFbGVtZW50Q2xzJyxcbiAgICAgICAgJ2NvbnRleHRNZW51VHJpZ2dlckV2ZW50JyxcbiAgICAgICAgJ2RhdGEnLFxuICAgICAgICAnZGF0YXNldCcsXG4gICAgICAgICdkZWZhdWx0QmluZFByb3BlcnR5JyxcbiAgICAgICAgJ2RlZmF1bHRGb2N1cycsXG4gICAgICAgICdkZWZhdWx0UmVnaW9uJyxcbiAgICAgICAgJ2RlZmF1bHRzJyxcbiAgICAgICAgJ2Rlc3Ryb3lTdG9yZScsXG4gICAgICAgICdkaXNhYmxlZCcsXG4gICAgICAgICdkaXNhYmxlR3JpZFJvd01vZGVsV2FybmluZycsXG4gICAgICAgICdkaXNtaXNzRGVsYXknLFxuICAgICAgICAnZG9jaycsXG4gICAgICAgICdkcmFnZ2FibGUnLFxuICAgICAgICAnZW1wdHlUZXh0JyxcbiAgICAgICAgJ2VuYWJsZVN0aWNreScsXG4gICAgICAgICdlbmFibGVUZXh0U2VsZWN0aW9uJyxcbiAgICAgICAgJ2VuYWJsZVVuZG9SZWRvS2V5cycsXG4gICAgICAgICdleHRyYURhdGEnLFxuICAgICAgICAnZmVhdHVyZXMnLFxuICAgICAgICAnZmlsbExhc3RDb2x1bW4nLFxuICAgICAgICAnZml4ZWRSb3dIZWlnaHQnLFxuICAgICAgICAnZmxleCcsXG4gICAgICAgICdmbG9hdGluZycsXG4gICAgICAgICdmb2N1c09uVG9Gcm9udCcsXG4gICAgICAgICdmb290ZXInLFxuICAgICAgICAnZm9yRWxlbWVudCcsXG4gICAgICAgICdmb3JTZWxlY3RvcicsXG4gICAgICAgICdmdWxsUm93UmVmcmVzaCcsXG4gICAgICAgICdnZXRIdG1sJyxcbiAgICAgICAgJ2dldFJvd0hlaWdodCcsXG4gICAgICAgICdoZWFkZXInLFxuICAgICAgICAnaGVpZ2h0JyxcbiAgICAgICAgJ2hpZGRlbicsXG4gICAgICAgICdoaWRlQW5pbWF0aW9uJyxcbiAgICAgICAgJ2hpZGVEZWxheScsXG4gICAgICAgICdoaWRlSGVhZGVycycsXG4gICAgICAgICdoaWRlT25EZWxlZ2F0ZUNoYW5nZScsXG4gICAgICAgICdoaWRlV2hlbkVtcHR5JyxcbiAgICAgICAgJ2hvdmVyRGVsYXknLFxuICAgICAgICAnaHRtbCcsXG4gICAgICAgICdodG1sQ2xzJyxcbiAgICAgICAgJ2lkJyxcbiAgICAgICAgJ2lnbm9yZVBhcmVudFJlYWRPbmx5JyxcbiAgICAgICAgJ2luc2VydEJlZm9yZScsXG4gICAgICAgICdpbnNlcnRGaXJzdCcsXG4gICAgICAgICdpdGVtQ2xzJyxcbiAgICAgICAgJ2l0ZW1zJyxcbiAgICAgICAgJ2tleU1hcCcsXG4gICAgICAgICdsYXlvdXQnLFxuICAgICAgICAnbGF5b3V0U3R5bGUnLFxuICAgICAgICAnbGF6eUl0ZW1zJyxcbiAgICAgICAgJ2xpc3RlbmVycycsXG4gICAgICAgICdsb2FkaW5nTXNnJyxcbiAgICAgICAgJ2xvYWRNYXNrJyxcbiAgICAgICAgJ2xvYWRNYXNrRGVmYXVsdHMnLFxuICAgICAgICAnbG9hZE1hc2tFcnJvcicsXG4gICAgICAgICdsb2NhbGVDbGFzcycsXG4gICAgICAgICdsb2NhbGl6YWJsZScsXG4gICAgICAgICdsb2NhbGl6YWJsZVByb3BlcnRpZXMnLFxuICAgICAgICAnbG9uZ1ByZXNzVGltZScsXG4gICAgICAgICdtYXJnaW4nLFxuICAgICAgICAnbWFza0RlZmF1bHRzJyxcbiAgICAgICAgJ21hc2tlZCcsXG4gICAgICAgICdtYXhIZWlnaHQnLFxuICAgICAgICAnbWF4aW1pemFibGUnLFxuICAgICAgICAnbWF4aW1pemVkJyxcbiAgICAgICAgJ21heFdpZHRoJyxcbiAgICAgICAgJ21pbkhlaWdodCcsXG4gICAgICAgICdtaW5XaWR0aCcsXG4gICAgICAgICdtb2RhbCcsXG4gICAgICAgICdtb25pdG9yUmVzaXplJyxcbiAgICAgICAgJ21vdXNlT2Zmc2V0WCcsXG4gICAgICAgICdtb3VzZU9mZnNldFknLFxuICAgICAgICAnbmFtZWRJdGVtcycsXG4gICAgICAgICdvd25lcicsXG4gICAgICAgICdwbHVnaW5zJyxcbiAgICAgICAgJ3Bvc2l0aW9uZWQnLFxuICAgICAgICAncHJlc2VydmVGb2N1c09uRGF0YXNldENoYW5nZScsXG4gICAgICAgICdwcmVzZXJ2ZVNjcm9sbE9uRGF0YXNldENoYW5nZScsXG4gICAgICAgICdwcmV2ZW50VG9vbHRpcE9uVG91Y2gnLFxuICAgICAgICAncmVhZE9ubHknLFxuICAgICAgICAncmVjb3JkJyxcbiAgICAgICAgJ3JlbGF5U3RvcmVFdmVudHMnLFxuICAgICAgICAncmVzaXplVG9GaXRJbmNsdWRlc0hlYWRlcicsXG4gICAgICAgICdyZXNwb25zaXZlTGV2ZWxzJyxcbiAgICAgICAgJ3JpcHBsZScsXG4gICAgICAgICdyb290RWxlbWVudCcsXG4gICAgICAgICdyb3dIZWlnaHQnLFxuICAgICAgICAnc2Nyb2xsYWJsZScsXG4gICAgICAgICdzY3JvbGxBY3Rpb24nLFxuICAgICAgICAnc2Nyb2xsZXJDbGFzcycsXG4gICAgICAgICdzY3JvbGxNYW5hZ2VyJyxcbiAgICAgICAgJ3NlbGVjdGlvbk1vZGUnLFxuICAgICAgICAnc2hvd0FuaW1hdGlvbicsXG4gICAgICAgICdzaG93RGlydHknLFxuICAgICAgICAnc2hvd09uQ2xpY2snLFxuICAgICAgICAnc2hvd09uSG92ZXInLFxuICAgICAgICAnc2hvd1Rvb2x0aXBXaGVuRGlzYWJsZWQnLFxuICAgICAgICAnc3RhdGVmdWwnLFxuICAgICAgICAnc3RhdGVmdWxFdmVudHMnLFxuICAgICAgICAnc3RhdGVJZCcsXG4gICAgICAgICdzdGF0ZVByb3ZpZGVyJyxcbiAgICAgICAgJ3N0b3JlJyxcbiAgICAgICAgJ3N0cmljdFJlY29yZE1hcHBpbmcnLFxuICAgICAgICAnc3RyaXBzJyxcbiAgICAgICAgJ3N1YkdyaWRDb25maWdzJyxcbiAgICAgICAgJ3N5bmNNYXNrJyxcbiAgICAgICAgJ3RhYicsXG4gICAgICAgICd0YWcnLFxuICAgICAgICAndGJhcicsXG4gICAgICAgICd0ZXh0QWxpZ24nLFxuICAgICAgICAndGV4dENvbnRlbnQnLFxuICAgICAgICAndGl0bGUnLFxuICAgICAgICAndG9vbHMnLFxuICAgICAgICAndG9vbHRpcCcsXG4gICAgICAgICd0cmFja01vdXNlJyxcbiAgICAgICAgJ3RyYW5zaXRpb25EdXJhdGlvbicsXG4gICAgICAgICd0cmFwRm9jdXMnLFxuICAgICAgICAndWknLFxuICAgICAgICAnd2VpZ2h0JyxcbiAgICAgICAgJ3dpZHRoJyxcbiAgICAgICAgJ3gnLFxuICAgICAgICAneSdcbiAgICBdKTtcblxuICAgIHByaXZhdGUgc3RhdGljIGJyeW50dW1Db25maWdzT25seTogc3RyaW5nW10gPSBbXG4gICAgICAgICdhZG9wdCcsXG4gICAgICAgICdhbGlnbicsXG4gICAgICAgICdhbGxvd092ZXInLFxuICAgICAgICAnYW5jaG9yJyxcbiAgICAgICAgJ2FuY2hvclRvVGFyZ2V0JyxcbiAgICAgICAgJ2FuaW1hdGVSZW1vdmluZ1Jvd3MnLFxuICAgICAgICAnYXJpYURlc2NyaXB0aW9uJyxcbiAgICAgICAgJ2FyaWFMYWJlbCcsXG4gICAgICAgICdhdXRvQ2xvc2UnLFxuICAgICAgICAnYXV0b0hlaWdodCcsXG4gICAgICAgICdhdXRvU2hvdycsXG4gICAgICAgICdhdXRvVXBkYXRlUmVjb3JkJyxcbiAgICAgICAgJ2JiYXInLFxuICAgICAgICAnYm9keUNscycsXG4gICAgICAgICdidWJibGVFdmVudHMnLFxuICAgICAgICAnY2FsbE9uRnVuY3Rpb25zJyxcbiAgICAgICAgJ2NlbnRlcmVkJyxcbiAgICAgICAgJ2Nsb3NhYmxlJyxcbiAgICAgICAgJ2Nsb3NlQWN0aW9uJyxcbiAgICAgICAgJ2NvbGxhcHNlZCcsXG4gICAgICAgICdjb2xsYXBzaWJsZScsXG4gICAgICAgICdjb2x1bW5zJyxcbiAgICAgICAgJ2NvbmZpZycsXG4gICAgICAgICdjb25zdHJhaW5UbycsXG4gICAgICAgICdjb250ZW50RWxlbWVudENscycsXG4gICAgICAgICdjb250ZXh0TWVudVRyaWdnZXJFdmVudCcsXG4gICAgICAgICdkZWZhdWx0QmluZFByb3BlcnR5JyxcbiAgICAgICAgJ2RlZmF1bHRGb2N1cycsXG4gICAgICAgICdkZWZhdWx0UmVnaW9uJyxcbiAgICAgICAgJ2RlZmF1bHRzJyxcbiAgICAgICAgJ2Rlc3Ryb3lTdG9yZScsXG4gICAgICAgICdkaXNhYmxlR3JpZFJvd01vZGVsV2FybmluZycsXG4gICAgICAgICdkaXNtaXNzRGVsYXknLFxuICAgICAgICAnZG9jaycsXG4gICAgICAgICdkcmFnZ2FibGUnLFxuICAgICAgICAnZW5hYmxlU3RpY2t5JyxcbiAgICAgICAgJ2VuYWJsZVRleHRTZWxlY3Rpb24nLFxuICAgICAgICAnZmVhdHVyZXMnLFxuICAgICAgICAnZmlsbExhc3RDb2x1bW4nLFxuICAgICAgICAnZml4ZWRSb3dIZWlnaHQnLFxuICAgICAgICAnZmxvYXRpbmcnLFxuICAgICAgICAnZm9jdXNPblRvRnJvbnQnLFxuICAgICAgICAnZm9vdGVyJyxcbiAgICAgICAgJ2ZvckVsZW1lbnQnLFxuICAgICAgICAnZm9yU2VsZWN0b3InLFxuICAgICAgICAnZnVsbFJvd1JlZnJlc2gnLFxuICAgICAgICAnZ2V0SHRtbCcsXG4gICAgICAgICdnZXRSb3dIZWlnaHQnLFxuICAgICAgICAnaGVhZGVyJyxcbiAgICAgICAgJ2hpZGVBbmltYXRpb24nLFxuICAgICAgICAnaGlkZURlbGF5JyxcbiAgICAgICAgJ2hpZGVIZWFkZXJzJyxcbiAgICAgICAgJ2hpZGVPbkRlbGVnYXRlQ2hhbmdlJyxcbiAgICAgICAgJ2hpZGVXaGVuRW1wdHknLFxuICAgICAgICAnaG92ZXJEZWxheScsXG4gICAgICAgICdodG1sQ2xzJyxcbiAgICAgICAgJ2lnbm9yZVBhcmVudFJlYWRPbmx5JyxcbiAgICAgICAgJ2l0ZW1DbHMnLFxuICAgICAgICAna2V5TWFwJyxcbiAgICAgICAgJ2xhenlJdGVtcycsXG4gICAgICAgICdsaXN0ZW5lcnMnLFxuICAgICAgICAnbG9hZGluZ01zZycsXG4gICAgICAgICdsb2FkTWFzaycsXG4gICAgICAgICdsb2FkTWFza0RlZmF1bHRzJyxcbiAgICAgICAgJ2xvYWRNYXNrRXJyb3InLFxuICAgICAgICAnbG9jYWxlQ2xhc3MnLFxuICAgICAgICAnbG9jYWxpemFibGUnLFxuICAgICAgICAnbG9jYWxpemFibGVQcm9wZXJ0aWVzJyxcbiAgICAgICAgJ21hc2tEZWZhdWx0cycsXG4gICAgICAgICdtYXNrZWQnLFxuICAgICAgICAnbWF4aW1pemFibGUnLFxuICAgICAgICAnbWF4aW1pemVkJyxcbiAgICAgICAgJ21vZGFsJyxcbiAgICAgICAgJ21vbml0b3JSZXNpemUnLFxuICAgICAgICAnbW91c2VPZmZzZXRYJyxcbiAgICAgICAgJ21vdXNlT2Zmc2V0WScsXG4gICAgICAgICduYW1lZEl0ZW1zJyxcbiAgICAgICAgJ293bmVyJyxcbiAgICAgICAgJ3BsdWdpbnMnLFxuICAgICAgICAncG9zaXRpb25lZCcsXG4gICAgICAgICdwcmVzZXJ2ZUZvY3VzT25EYXRhc2V0Q2hhbmdlJyxcbiAgICAgICAgJ3ByZXNlcnZlU2Nyb2xsT25EYXRhc2V0Q2hhbmdlJyxcbiAgICAgICAgJ3ByZXZlbnRUb29sdGlwT25Ub3VjaCcsXG4gICAgICAgICdyZWxheVN0b3JlRXZlbnRzJyxcbiAgICAgICAgJ3Jlc2l6ZVRvRml0SW5jbHVkZXNIZWFkZXInLFxuICAgICAgICAncmVzcG9uc2l2ZUxldmVscycsXG4gICAgICAgICdyaXBwbGUnLFxuICAgICAgICAncm9vdEVsZW1lbnQnLFxuICAgICAgICAnc2Nyb2xsQWN0aW9uJyxcbiAgICAgICAgJ3Njcm9sbGVyQ2xhc3MnLFxuICAgICAgICAnc2Nyb2xsTWFuYWdlcicsXG4gICAgICAgICdzZWxlY3Rpb25Nb2RlJyxcbiAgICAgICAgJ3Nob3dBbmltYXRpb24nLFxuICAgICAgICAnc2hvd0RpcnR5JyxcbiAgICAgICAgJ3Nob3dPbkNsaWNrJyxcbiAgICAgICAgJ3Nob3dPbkhvdmVyJyxcbiAgICAgICAgJ3Nob3dUb29sdGlwV2hlbkRpc2FibGVkJyxcbiAgICAgICAgJ3N0YXRlZnVsJyxcbiAgICAgICAgJ3N0YXRlZnVsRXZlbnRzJyxcbiAgICAgICAgJ3N0YXRlSWQnLFxuICAgICAgICAnc3RhdGVQcm92aWRlcicsXG4gICAgICAgICdzdHJpcHMnLFxuICAgICAgICAnc3ViR3JpZENvbmZpZ3MnLFxuICAgICAgICAnc3luY01hc2snLFxuICAgICAgICAndGFiJyxcbiAgICAgICAgJ3RhZycsXG4gICAgICAgICd0YmFyJyxcbiAgICAgICAgJ3RleHRBbGlnbicsXG4gICAgICAgICd0ZXh0Q29udGVudCcsXG4gICAgICAgICd0cmFja01vdXNlJyxcbiAgICAgICAgJ3RyYXBGb2N1cycsXG4gICAgICAgICd1aScsXG4gICAgICAgICd3ZWlnaHQnXG4gICAgXTtcblxuICAgIHByaXZhdGUgc3RhdGljIGJyeW50dW1Qcm9wczogc3RyaW5nW10gPSBCcnludHVtR3JpZEJhc2VDb21wb25lbnQuYnJ5bnR1bUZlYXR1cmVOYW1lcy5jb25jYXQoW1xuICAgICAgICAnYWxpZ25TZWxmJyxcbiAgICAgICAgJ2FuY2hvclNpemUnLFxuICAgICAgICAnYXBwZW5kVG8nLFxuICAgICAgICAnY2xzJyxcbiAgICAgICAgJ2NvbHVtbkxpbmVzJyxcbiAgICAgICAgJ2NvbnRlbnQnLFxuICAgICAgICAnZGF0YScsXG4gICAgICAgICdkYXRhc2V0JyxcbiAgICAgICAgJ2Rpc2FibGVkJyxcbiAgICAgICAgJ2VtcHR5VGV4dCcsXG4gICAgICAgICdlbmFibGVVbmRvUmVkb0tleXMnLFxuICAgICAgICAnZXh0cmFEYXRhJyxcbiAgICAgICAgJ2ZsZXgnLFxuICAgICAgICAnaGVpZ2h0JyxcbiAgICAgICAgJ2hpZGRlbicsXG4gICAgICAgICdodG1sJyxcbiAgICAgICAgJ2lkJyxcbiAgICAgICAgJ2luc2VydEJlZm9yZScsXG4gICAgICAgICdpbnNlcnRGaXJzdCcsXG4gICAgICAgICdpc1NldHRpbmdWYWx1ZXMnLFxuICAgICAgICAnaXNWYWxpZCcsXG4gICAgICAgICdpdGVtcycsXG4gICAgICAgICdsYXlvdXQnLFxuICAgICAgICAnbGF5b3V0U3R5bGUnLFxuICAgICAgICAnbG9uZ1ByZXNzVGltZScsXG4gICAgICAgICdtYXJnaW4nLFxuICAgICAgICAnbWF4SGVpZ2h0JyxcbiAgICAgICAgJ21heFdpZHRoJyxcbiAgICAgICAgJ21pbkhlaWdodCcsXG4gICAgICAgICdtaW5XaWR0aCcsXG4gICAgICAgICdyZWFkT25seScsXG4gICAgICAgICdyZWNvcmQnLFxuICAgICAgICAncm93SGVpZ2h0JyxcbiAgICAgICAgJ3Njcm9sbGFibGUnLFxuICAgICAgICAnc2VsZWN0ZWRDZWxsJyxcbiAgICAgICAgJ3NlbGVjdGVkQ2VsbHMnLFxuICAgICAgICAnc2VsZWN0ZWRSZWNvcmQnLFxuICAgICAgICAnc2VsZWN0ZWRSZWNvcmRzJyxcbiAgICAgICAgJ3NlbGVjdGVkUm93cycsXG4gICAgICAgICdzdGF0ZScsXG4gICAgICAgICdzdG9yZScsXG4gICAgICAgICdzdHJpY3RSZWNvcmRNYXBwaW5nJyxcbiAgICAgICAgJ3RpdGxlJyxcbiAgICAgICAgJ3Rvb2xzJyxcbiAgICAgICAgJ3Rvb2x0aXAnLFxuICAgICAgICAndHJhbnNpdGlvbkR1cmF0aW9uJyxcbiAgICAgICAgJ3R5cGUnLFxuICAgICAgICAndmFsdWVzJyxcbiAgICAgICAgJ3dpZHRoJyxcbiAgICAgICAgJ3gnLFxuICAgICAgICAneSdcbiAgICBdKTtcblxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBwdWJsaWMgaW5zdGFuY2UhOiBHcmlkQmFzZTtcblxuICAgIHByaXZhdGUgYnJ5bnR1bUNvbmZpZyA9IHtcbiAgICAgICAgYWRvcHQgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgYXBwZW5kVG8gICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgaHJlZiAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgYW5ndWxhckNvbXBvbmVudCA6IHRoaXMsXG4gICAgICAgIGZlYXR1cmVzICAgICAgICAgOiB7fSxcbiAgICAgICAgbGlzdGVuZXJzICAgICAgICA6IHt9XG4gICAgfTtcblxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50UmVmID0gZWxlbWVudDtcbiAgICB9XG5cbiAgICAgLy8gQ29uZmlncyBvbmx5XG4gICAgQElucHV0KCkgYWRvcHQgICAgICAgICAgICAgICAgICAgICAgICAhIDogSFRNTEVsZW1lbnR8c3RyaW5nO1xuICAgIEBJbnB1dCgpIGFsaWduICAgICAgICAgICAgICAgICAgICAgICAgISA6IEFsaWduU3BlY3xzdHJpbmc7XG4gICAgQElucHV0KCkgYWxsb3dPdmVyICAgICAgICAgICAgICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBhbmNob3IgICAgICAgICAgICAgICAgICAgICAgICEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIGFuY2hvclRvVGFyZ2V0ICAgICAgICAgICAgICAgISA6IGJvb2xlYW47XG4gICAgQElucHV0KCkgYW5pbWF0ZVJlbW92aW5nUm93cyAgICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBhcmlhRGVzY3JpcHRpb24gICAgICAgICAgICAgICEgOiBzdHJpbmc7XG4gICAgQElucHV0KCkgYXJpYUxhYmVsICAgICAgICAgICAgICAgICAgICAhIDogc3RyaW5nO1xuICAgIEBJbnB1dCgpIGF1dG9DbG9zZSAgICAgICAgICAgICAgICAgICAgISA6IGJvb2xlYW47XG4gICAgQElucHV0KCkgYXV0b0hlaWdodCAgICAgICAgICAgICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBhdXRvU2hvdyAgICAgICAgICAgICAgICAgICAgICEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIGF1dG9VcGRhdGVSZWNvcmQgICAgICAgICAgICAgISA6IGJvb2xlYW47XG4gICAgQElucHV0KCkgYmJhciAgICAgICAgICAgICAgICAgICAgICAgICAhIDogKFBhcnRpYWw8Q29udGFpbmVySXRlbUNvbmZpZz58c3RyaW5nKVtdfFBhcnRpYWw8VG9vbGJhckNvbmZpZz47XG4gICAgQElucHV0KCkgYm9keUNscyAgICAgICAgICAgICAgICAgICAgICAhIDogc3RyaW5nfG9iamVjdDtcbiAgICBASW5wdXQoKSBidWJibGVFdmVudHMgICAgICAgICAgICAgICAgICEgOiBvYmplY3Q7XG4gICAgQElucHV0KCkgY2FsbE9uRnVuY3Rpb25zICAgICAgICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBjZW50ZXJlZCAgICAgICAgICAgICAgICAgICAgICEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIGNsb3NhYmxlICAgICAgICAgICAgICAgICAgICAgISA6IGJvb2xlYW47XG4gICAgQElucHV0KCkgY2xvc2VBY3Rpb24gICAgICAgICAgICAgICAgICAhIDogJ2hpZGUnfCdkZXN0cm95JztcbiAgICBASW5wdXQoKSBjb2xsYXBzZWQgICAgICAgICAgICAgICAgICAgICEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIGNvbGxhcHNpYmxlICAgICAgICAgICAgICAgICAgISA6IGJvb2xlYW58UGFydGlhbDxQYW5lbENvbGxhcHNlckNvbmZpZz58UGFydGlhbDxQYW5lbENvbGxhcHNlck92ZXJsYXlDb25maWc+O1xuICAgIEBJbnB1dCgpIGNvbHVtbnMgICAgICAgICAgICAgICAgICAgICAgISA6IENvbHVtblN0b3JlfFBhcnRpYWw8R3JpZENvbHVtbkNvbmZpZz5bXXxQYXJ0aWFsPENvbHVtblN0b3JlQ29uZmlnPjtcbiAgICBASW5wdXQoKSBjb25maWcgICAgICAgICAgICAgICAgICAgICAgICEgOiBvYmplY3Q7XG4gICAgQElucHV0KCkgY29uc3RyYWluVG8gICAgICAgICAgICAgICAgICAhIDogSFRNTEVsZW1lbnR8V2lkZ2V0fFJlY3RhbmdsZTtcbiAgICBASW5wdXQoKSBjb250ZW50RWxlbWVudENscyAgICAgICAgICAgICEgOiBzdHJpbmd8b2JqZWN0O1xuICAgIEBJbnB1dCgpIGNvbnRleHRNZW51VHJpZ2dlckV2ZW50ICAgICAgISA6ICdjb250ZXh0bWVudSd8J2NsaWNrJ3wnZGJsY2xpY2snO1xuICAgIEBJbnB1dCgpIGRlZmF1bHRCaW5kUHJvcGVydHkgICAgICAgICAgISA6IHN0cmluZztcbiAgICBASW5wdXQoKSBkZWZhdWx0Rm9jdXMgICAgICAgICAgICAgICAgICEgOiBGdW5jdGlvbjtcbiAgICBASW5wdXQoKSBkZWZhdWx0UmVnaW9uICAgICAgICAgICAgICAgICEgOiBzdHJpbmc7XG4gICAgQElucHV0KCkgZGVmYXVsdHMgICAgICAgICAgICAgICAgICAgICAhIDogb2JqZWN0O1xuICAgIEBJbnB1dCgpIGRlc3Ryb3lTdG9yZSAgICAgICAgICAgICAgICAgISA6IGJvb2xlYW47XG4gICAgQElucHV0KCkgZGlzYWJsZUdyaWRSb3dNb2RlbFdhcm5pbmcgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBkaXNtaXNzRGVsYXkgICAgICAgICAgICAgICAgICEgOiBudW1iZXI7XG4gICAgQElucHV0KCkgZG9jayAgICAgICAgICAgICAgICAgICAgICAgICAhIDogJ3RvcCd8J2JvdHRvbSd8J2xlZnQnfCdyaWdodCd8J3N0YXJ0J3wnZW5kJ3wnaGVhZGVyJ3wncHJlLWhlYWRlcid8b2JqZWN0O1xuICAgIEBJbnB1dCgpIGRyYWdnYWJsZSAgICAgICAgICAgICAgICAgICAgISA6IGJvb2xlYW58b2JqZWN0O1xuICAgIEBJbnB1dCgpIGVuYWJsZVN0aWNreSAgICAgICAgICAgICAgICAgISA6IGJvb2xlYW47XG4gICAgQElucHV0KCkgZW5hYmxlVGV4dFNlbGVjdGlvbiAgICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBmZWF0dXJlcyAgICAgICAgICAgICAgICAgICAgICEgOiBvYmplY3Q7XG4gICAgQElucHV0KCkgZmlsbExhc3RDb2x1bW4gICAgICAgICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBmaXhlZFJvd0hlaWdodCAgICAgICAgICAgICAgICEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIGZsb2F0aW5nICAgICAgICAgICAgICAgICAgICAgISA6IGJvb2xlYW47XG4gICAgQElucHV0KCkgZm9jdXNPblRvRnJvbnQgICAgICAgICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBmb290ZXIgICAgICAgICAgICAgICAgICAgICAgICEgOiBvYmplY3R8c3RyaW5nO1xuICAgIEBJbnB1dCgpIGZvckVsZW1lbnQgICAgICAgICAgICAgICAgICAgISA6IEhUTUxFbGVtZW50O1xuICAgIEBJbnB1dCgpIGZvclNlbGVjdG9yICAgICAgICAgICAgICAgICAgISA6IHN0cmluZztcbiAgICBASW5wdXQoKSBmdWxsUm93UmVmcmVzaCAgICAgICAgICAgICAgICEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIGdldEh0bWwgICAgICAgICAgICAgICAgICAgICAgISA6IEZ1bmN0aW9ufHN0cmluZztcbiAgICBASW5wdXQoKSBnZXRSb3dIZWlnaHQgICAgICAgICAgICAgICAgICEgOiBGdW5jdGlvbjtcbiAgICBASW5wdXQoKSBoZWFkZXIgICAgICAgICAgICAgICAgICAgICAgICEgOiBzdHJpbmd8Ym9vbGVhbnxQYW5lbEhlYWRlcjtcbiAgICBASW5wdXQoKSBoaWRlQW5pbWF0aW9uICAgICAgICAgICAgICAgICEgOiBib29sZWFufG9iamVjdDtcbiAgICBASW5wdXQoKSBoaWRlRGVsYXkgICAgICAgICAgICAgICAgICAgICEgOiBudW1iZXI7XG4gICAgQElucHV0KCkgaGlkZUhlYWRlcnMgICAgICAgICAgICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBoaWRlT25EZWxlZ2F0ZUNoYW5nZSAgICAgICAgICEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIGhpZGVXaGVuRW1wdHkgICAgICAgICAgICAgICAgISA6IGJvb2xlYW47XG4gICAgQElucHV0KCkgaG92ZXJEZWxheSAgICAgICAgICAgICAgICAgICAhIDogbnVtYmVyO1xuICAgIEBJbnB1dCgpIGh0bWxDbHMgICAgICAgICAgICAgICAgICAgICAgISA6IHN0cmluZ3xvYmplY3Q7XG4gICAgQElucHV0KCkgaWdub3JlUGFyZW50UmVhZE9ubHkgICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBpdGVtQ2xzICAgICAgICAgICAgICAgICAgICAgICEgOiBzdHJpbmc7XG4gICAgQElucHV0KCkga2V5TWFwICAgICAgICAgICAgICAgICAgICAgICAhIDogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgICBASW5wdXQoKSBsYXp5SXRlbXMgICAgICAgICAgICAgICAgICAgICEgOiBSZWNvcmQ8c3RyaW5nLCBQYXJ0aWFsPENvbnRhaW5lckl0ZW1Db25maWc+PnxQYXJ0aWFsPENvbnRhaW5lckl0ZW1Db25maWc+W118V2lkZ2V0W107XG4gICAgQElucHV0KCkgbGlzdGVuZXJzICAgICAgICAgICAgICAgICAgICAhIDogb2JqZWN0O1xuICAgIEBJbnB1dCgpIGxvYWRpbmdNc2cgICAgICAgICAgICAgICAgICAgISA6IHN0cmluZztcbiAgICBASW5wdXQoKSBsb2FkTWFzayAgICAgICAgICAgICAgICAgICAgICEgOiBzdHJpbmd8UGFydGlhbDxNYXNrQ29uZmlnPnxudWxsO1xuICAgIEBJbnB1dCgpIGxvYWRNYXNrRGVmYXVsdHMgICAgICAgICAgICAgISA6IFBhcnRpYWw8TWFza0NvbmZpZz58TWFzaztcbiAgICBASW5wdXQoKSBsb2FkTWFza0Vycm9yICAgICAgICAgICAgICAgICEgOiBQYXJ0aWFsPE1hc2tDb25maWc+fE1hc2t8Ym9vbGVhbjtcbiAgICBASW5wdXQoKSBsb2NhbGVDbGFzcyAgICAgICAgICAgICAgICAgICEgOiB0eXBlb2YgQmFzZTtcbiAgICBASW5wdXQoKSBsb2NhbGl6YWJsZSAgICAgICAgICAgICAgICAgICEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIGxvY2FsaXphYmxlUHJvcGVydGllcyAgICAgICAgISA6IHN0cmluZ1tdO1xuICAgIEBJbnB1dCgpIG1hc2tEZWZhdWx0cyAgICAgICAgICAgICAgICAgISA6IFBhcnRpYWw8TWFza0NvbmZpZz47XG4gICAgQElucHV0KCkgbWFza2VkICAgICAgICAgICAgICAgICAgICAgICAhIDogYm9vbGVhbnxzdHJpbmd8UGFydGlhbDxNYXNrQ29uZmlnPjtcbiAgICBASW5wdXQoKSBtYXhpbWl6YWJsZSAgICAgICAgICAgICAgICAgICEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIG1heGltaXplZCAgICAgICAgICAgICAgICAgICAgISA6IGJvb2xlYW47XG4gICAgQElucHV0KCkgbW9kYWwgICAgICAgICAgICAgICAgICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBtb25pdG9yUmVzaXplICAgICAgICAgICAgICAgICEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIG1vdXNlT2Zmc2V0WCAgICAgICAgICAgICAgICAgISA6IG51bWJlcjtcbiAgICBASW5wdXQoKSBtb3VzZU9mZnNldFkgICAgICAgICAgICAgICAgICEgOiBudW1iZXI7XG4gICAgQElucHV0KCkgbmFtZWRJdGVtcyAgICAgICAgICAgICAgICAgICAhIDogUmVjb3JkPHN0cmluZywgUGFydGlhbDxDb250YWluZXJJdGVtQ29uZmlnPj47XG4gICAgQElucHV0KCkgb3duZXIgICAgICAgICAgICAgICAgICAgICAgICAhIDogV2lkZ2V0O1xuICAgIEBJbnB1dCgpIHBsdWdpbnMgICAgICAgICAgICAgICAgICAgICAgISA6IEZ1bmN0aW9uW107XG4gICAgQElucHV0KCkgcG9zaXRpb25lZCAgICAgICAgICAgICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBwcmVzZXJ2ZUZvY3VzT25EYXRhc2V0Q2hhbmdlICEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIHByZXNlcnZlU2Nyb2xsT25EYXRhc2V0Q2hhbmdlISA6IGJvb2xlYW47XG4gICAgQElucHV0KCkgcHJldmVudFRvb2x0aXBPblRvdWNoICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSByZWxheVN0b3JlRXZlbnRzICAgICAgICAgICAgICEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIHJlc2l6ZVRvRml0SW5jbHVkZXNIZWFkZXIgICAgISA6IGJvb2xlYW47XG4gICAgQElucHV0KCkgcmVzcG9uc2l2ZUxldmVscyAgICAgICAgICAgICAhIDogUmVjb3JkPHN0cmluZywgbnVtYmVyfHN0cmluZz47XG4gICAgQElucHV0KCkgcmlwcGxlICAgICAgICAgICAgICAgICAgICAgICAhIDogYm9vbGVhbnxvYmplY3Q7XG4gICAgQElucHV0KCkgcm9vdEVsZW1lbnQgICAgICAgICAgICAgICAgICAhIDogU2hhZG93Um9vdDtcbiAgICBASW5wdXQoKSBzY3JvbGxBY3Rpb24gICAgICAgICAgICAgICAgICEgOiAnaGlkZSd8J3JlYWxpZ24nfG51bGw7XG4gICAgQElucHV0KCkgc2Nyb2xsZXJDbGFzcyAgICAgICAgICAgICAgICAhIDogdHlwZW9mIFNjcm9sbGVyO1xuICAgIEBJbnB1dCgpIHNjcm9sbE1hbmFnZXIgICAgICAgICAgICAgICAgISA6IFBhcnRpYWw8U2Nyb2xsTWFuYWdlckNvbmZpZz58U2Nyb2xsTWFuYWdlcjtcbiAgICBASW5wdXQoKSBzZWxlY3Rpb25Nb2RlICAgICAgICAgICAgICAgICEgOiBvYmplY3Q7XG4gICAgQElucHV0KCkgc2hvd0FuaW1hdGlvbiAgICAgICAgICAgICAgICAhIDogYm9vbGVhbnxvYmplY3Q7XG4gICAgQElucHV0KCkgc2hvd0RpcnR5ICAgICAgICAgICAgICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBzaG93T25DbGljayAgICAgICAgICAgICAgICAgICEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIHNob3dPbkhvdmVyICAgICAgICAgICAgICAgICAgISA6IGJvb2xlYW47XG4gICAgQElucHV0KCkgc2hvd1Rvb2x0aXBXaGVuRGlzYWJsZWQgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBzdGF0ZWZ1bCAgICAgICAgICAgICAgICAgICAgICEgOiBib29sZWFufG9iamVjdHxzdHJpbmdbXTtcbiAgICBASW5wdXQoKSBzdGF0ZWZ1bEV2ZW50cyAgICAgICAgICAgICAgICEgOiBvYmplY3R8c3RyaW5nW107XG4gICAgQElucHV0KCkgc3RhdGVJZCAgICAgICAgICAgICAgICAgICAgICAhIDogc3RyaW5nO1xuICAgIEBJbnB1dCgpIHN0YXRlUHJvdmlkZXIgICAgICAgICAgICAgICAgISA6IFN0YXRlUHJvdmlkZXI7XG4gICAgQElucHV0KCkgc3RyaXBzICAgICAgICAgICAgICAgICAgICAgICAhIDogUmVjb3JkPHN0cmluZywgUGFydGlhbDxDb250YWluZXJJdGVtQ29uZmlnPj47XG4gICAgQElucHV0KCkgc3ViR3JpZENvbmZpZ3MgICAgICAgICAgICAgICAhIDogUmVjb3JkPHN0cmluZywgUGFydGlhbDxTdWJHcmlkQ29uZmlnPj47XG4gICAgQElucHV0KCkgc3luY01hc2sgICAgICAgICAgICAgICAgICAgICAhIDogc3RyaW5nfFBhcnRpYWw8TWFza0NvbmZpZz58bnVsbDtcbiAgICBASW5wdXQoKSB0YWIgICAgICAgICAgICAgICAgICAgICAgICAgICEgOiBib29sZWFufFBhcnRpYWw8VGFiQ29uZmlnPjtcbiAgICBASW5wdXQoKSB0YWcgICAgICAgICAgICAgICAgICAgICAgICAgICEgOiBzdHJpbmc7XG4gICAgQElucHV0KCkgdGJhciAgICAgICAgICAgICAgICAgICAgICAgICAhIDogKFBhcnRpYWw8Q29udGFpbmVySXRlbUNvbmZpZz58c3RyaW5nKVtdfFBhcnRpYWw8VG9vbGJhckNvbmZpZz47XG4gICAgQElucHV0KCkgdGV4dEFsaWduICAgICAgICAgICAgICAgICAgICAhIDogJ2xlZnQnfCdjZW50ZXInfCdyaWdodCd8J3N0YXJ0J3wnZW5kJztcbiAgICBASW5wdXQoKSB0ZXh0Q29udGVudCAgICAgICAgICAgICAgICAgICEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIHRyYWNrTW91c2UgICAgICAgICAgICAgICAgICAgISA6IGJvb2xlYW47XG4gICAgQElucHV0KCkgdHJhcEZvY3VzICAgICAgICAgICAgICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSB1aSAgICAgICAgICAgICAgICAgICAgICAgICAgICEgOiBzdHJpbmd8b2JqZWN0O1xuICAgIEBJbnB1dCgpIHdlaWdodCAgICAgICAgICAgICAgICAgICAgICAgISA6IG51bWJlcjtcblxuICAgICAvLyBDb25maWdzIGFuZCBwcm9wZXJ0aWVzXG4gICAgQElucHV0KCkgYWxpZ25TZWxmICAgICAgICAgICEgOiBzdHJpbmc7XG4gICAgQElucHV0KCkgYXBwZW5kVG8gICAgICAgICAgICEgOiBIVE1MRWxlbWVudHxzdHJpbmc7XG4gICAgQElucHV0KCkgY2xzICAgICAgICAgICAgICAgICEgOiBzdHJpbmd8b2JqZWN0O1xuICAgIEBJbnB1dCgpIGNvbHVtbkxpbmVzICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBjb250ZW50ICAgICAgICAgICAgISA6IHN0cmluZztcbiAgICBASW5wdXQoKSBkYXRhICAgICAgICAgICAgICAgISA6IG9iamVjdFtdfE1vZGVsW118UGFydGlhbDxNb2RlbENvbmZpZz5bXTtcbiAgICBASW5wdXQoKSBkYXRhc2V0ICAgICAgICAgICAgISA6IG9iamVjdDtcbiAgICBASW5wdXQoKSBkaXNhYmxlZCAgICAgICAgICAgISA6IGJvb2xlYW47XG4gICAgQElucHV0KCkgZW1wdHlUZXh0ICAgICAgICAgICEgOiBzdHJpbmc7XG4gICAgQElucHV0KCkgZW5hYmxlVW5kb1JlZG9LZXlzICEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIGV4dHJhRGF0YSAgICAgICAgICAhIDogc3RyaW5nfG51bWJlcnxib29sZWFufG9iamVjdDtcbiAgICBASW5wdXQoKSBmbGV4ICAgICAgICAgICAgICAgISA6IG51bWJlcnxzdHJpbmc7XG4gICAgQElucHV0KCkgaGVpZ2h0ICAgICAgICAgICAgICEgOiBudW1iZXJ8c3RyaW5nO1xuICAgIEBJbnB1dCgpIGhpZGRlbiAgICAgICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSBodG1sICAgICAgICAgICAgICAgISA6IHN0cmluZ3xGdW5jdGlvbjtcbiAgICBASW5wdXQoKSBpZCAgICAgICAgICAgICAgICAgISA6IHN0cmluZztcbiAgICBASW5wdXQoKSBpbnNlcnRCZWZvcmUgICAgICAgISA6IEhUTUxFbGVtZW50fHN0cmluZztcbiAgICBASW5wdXQoKSBpbnNlcnRGaXJzdCAgICAgICAgISA6IEhUTUxFbGVtZW50fHN0cmluZztcbiAgICBASW5wdXQoKSBpdGVtcyAgICAgICAgICAgICAgISA6IFdpZGdldFtdfFBhcnRpYWw8Q29udGFpbmVySXRlbUNvbmZpZz5bXXxSZWNvcmQ8c3RyaW5nLCBQYXJ0aWFsPENvbnRhaW5lckl0ZW1Db25maWc+PnxSZWNvcmQ8c3RyaW5nLCBQYXJ0aWFsPENvbnRhaW5lckl0ZW1Db25maWc+fGJvb2xlYW58bnVsbD47XG4gICAgQElucHV0KCkgbGF5b3V0ICAgICAgICAgICAgICEgOiBMYXlvdXR8c3RyaW5nfFBhcnRpYWw8Q29udGFpbmVyTGF5b3V0Q29uZmlnPjtcbiAgICBASW5wdXQoKSBsYXlvdXRTdHlsZSAgICAgICAgISA6IG9iamVjdDtcbiAgICBASW5wdXQoKSBsb25nUHJlc3NUaW1lICAgICAgISA6IG51bWJlcjtcbiAgICBASW5wdXQoKSBtYXJnaW4gICAgICAgICAgICAgISA6IG51bWJlcnxzdHJpbmc7XG4gICAgQElucHV0KCkgbWF4SGVpZ2h0ICAgICAgICAgICEgOiBzdHJpbmd8bnVtYmVyO1xuICAgIEBJbnB1dCgpIG1heFdpZHRoICAgICAgICAgICAhIDogc3RyaW5nfG51bWJlcjtcbiAgICBASW5wdXQoKSBtaW5IZWlnaHQgICAgICAgICAgISA6IHN0cmluZ3xudW1iZXI7XG4gICAgQElucHV0KCkgbWluV2lkdGggICAgICAgICAgICEgOiBzdHJpbmd8bnVtYmVyO1xuICAgIEBJbnB1dCgpIHJlYWRPbmx5ICAgICAgICAgICAhIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSByZWNvcmQgICAgICAgICAgICAgISA6IE1vZGVsO1xuICAgIEBJbnB1dCgpIHJvd0hlaWdodCAgICAgICAgICAhIDogbnVtYmVyO1xuICAgIEBJbnB1dCgpIHNjcm9sbGFibGUgICAgICAgICAhIDogU2Nyb2xsZXJ8Ym9vbGVhbnxQYXJ0aWFsPFNjcm9sbGVyQ29uZmlnPjtcbiAgICBASW5wdXQoKSBzdG9yZSAgICAgICAgICAgICAgISA6IFN0b3JlfFBhcnRpYWw8U3RvcmVDb25maWc+O1xuICAgIEBJbnB1dCgpIHN0cmljdFJlY29yZE1hcHBpbmchIDogYm9vbGVhbjtcbiAgICBASW5wdXQoKSB0aXRsZSAgICAgICAgICAgICAgISA6IHN0cmluZztcbiAgICBASW5wdXQoKSB0b29scyAgICAgICAgICAgICAgISA6IFJlY29yZDxzdHJpbmcsIFRvb2x8UGFydGlhbDxUb29sQ29uZmlnPj58UmVjb3JkPHN0cmluZywgVG9vbD58UmVjb3JkPHN0cmluZywgUGFydGlhbDxUb29sQ29uZmlnPj47XG4gICAgQElucHV0KCkgdG9vbHRpcCAgICAgICAgICAgICEgOiBzdHJpbmd8UGFydGlhbDxUb29sdGlwQ29uZmlnPjtcbiAgICBASW5wdXQoKSB0cmFuc2l0aW9uRHVyYXRpb24gISA6IG51bWJlcjtcbiAgICBASW5wdXQoKSB3aWR0aCAgICAgICAgICAgICAgISA6IG51bWJlcnxzdHJpbmc7XG4gICAgQElucHV0KCkgeCAgICAgICAgICAgICAgICAgICEgOiBudW1iZXI7XG4gICAgQElucHV0KCkgeSAgICAgICAgICAgICAgICAgICEgOiBudW1iZXI7XG5cbiAgICAgLy8gUHJvcGVydGllcyBvbmx5XG4gICAgQElucHV0KCkgYW5jaG9yU2l6ZSAgICAgISA6IG51bWJlcltdO1xuICAgIEBJbnB1dCgpIGlzU2V0dGluZ1ZhbHVlcyEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIGlzVmFsaWQgICAgICAgICEgOiBib29sZWFuO1xuICAgIEBJbnB1dCgpIHNlbGVjdGVkQ2VsbCAgICEgOiBMb2NhdGlvbjtcbiAgICBASW5wdXQoKSBzZWxlY3RlZENlbGxzICAhIDogTG9jYXRpb25bXTtcbiAgICBASW5wdXQoKSBzZWxlY3RlZFJlY29yZCAhIDogTW9kZWw7XG4gICAgQElucHV0KCkgc2VsZWN0ZWRSZWNvcmRzISA6IE1vZGVsW118bnVtYmVyW107XG4gICAgQElucHV0KCkgc2VsZWN0ZWRSb3dzICAgISA6IE1vZGVsW118bnVtYmVyW107XG4gICAgQElucHV0KCkgc3RhdGUgICAgICAgICAgISA6IG9iamVjdDtcbiAgICBASW5wdXQoKSB0eXBlICAgICAgICAgICAhIDogc3RyaW5nO1xuICAgIEBJbnB1dCgpIHZhbHVlcyAgICAgICAgICEgOiBSZWNvcmQ8c3RyaW5nLCBvYmplY3Q+O1xuXG4gICAgIC8vIEV2ZW50c1xuICAgIEBPdXRwdXQoKSBvbkJlZm9yZUNhbmNlbENlbGxFZGl0ICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25CZWZvcmVDZWxsRGVsZXRlICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uQmVmb3JlQ2VsbEVkaXRTdGFydCAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkJlZm9yZUNsb3NlICAgICAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25CZWZvcmVDb2x1bW5EcmFnU3RhcnQgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uQmVmb3JlQ29sdW1uRHJvcEZpbmFsaXplICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkJlZm9yZUNvcHkgICAgICAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25CZWZvcmVEZXN0cm95ICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uQmVmb3JlRmluaXNoQ2VsbEVkaXQgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkJlZm9yZUhpZGUgICAgICAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25CZWZvcmVQYXN0ZSAgICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uQmVmb3JlUGRmRXhwb3J0ICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkJlZm9yZVJlbmRlclJvdyAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25CZWZvcmVSZW5kZXJSb3dzICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uQmVmb3JlU2VsZWN0aW9uQ2hhbmdlICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkJlZm9yZVNldFJlY29yZCAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25CZWZvcmVTaG93ICAgICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uQmVmb3JlVG9nZ2xlR3JvdXAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkJlZm9yZVRvZ2dsZU5vZGUgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25DYW5jZWxDZWxsRWRpdCAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uQ2F0Y2hBbGwgICAgICAgICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkNlbGxDbGljayAgICAgICAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25DZWxsQ29udGV4dE1lbnUgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uQ2VsbERibENsaWNrICAgICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkNlbGxNZW51QmVmb3JlU2hvdyAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25DZWxsTWVudUl0ZW0gICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uQ2VsbE1lbnVTaG93ICAgICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkNlbGxNZW51VG9nZ2xlSXRlbSAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25DZWxsTW91c2VPdXQgICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uQ2VsbE1vdXNlT3ZlciAgICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkNvbGxhcHNlTm9kZSAgICAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25Db2x1bW5EcmFnICAgICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uQ29sdW1uRHJhZ1N0YXJ0ICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkNvbHVtbkRyb3AgICAgICAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25Db250ZXh0TWVudUl0ZW0gICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uQ29udGV4dE1lbnVUb2dnbGVJdGVtICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkNvcHkgICAgICAgICAgICAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25EYXRhQ2hhbmdlICAgICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uRGVzdHJveSAgICAgICAgICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkRyYWdTZWxlY3RpbmcgICAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25FeHBhbmROb2RlICAgICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uRmluaXNoQ2VsbEVkaXQgICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkZvY3VzSW4gICAgICAgICAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25Gb2N1c091dCAgICAgICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uR3JpZFJvd0Fib3J0ICAgICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkdyaWRSb3dCZWZvcmVEcmFnU3RhcnQgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25HcmlkUm93QmVmb3JlRHJvcEZpbmFsaXplID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uR3JpZFJvd0RyYWcgICAgICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkdyaWRSb3dEcmFnU3RhcnQgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25HcmlkUm93RHJvcCAgICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uSGVhZGVyTWVudUJlZm9yZVNob3cgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkhlYWRlck1lbnVJdGVtICAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25IZWFkZXJNZW51U2hvdyAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uSGVhZGVyTWVudVRvZ2dsZUl0ZW0gICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvbkhpZGUgICAgICAgICAgICAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25Nb3VzZU91dCAgICAgICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uTW91c2VPdmVyICAgICAgICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvblBhaW50ICAgICAgICAgICAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25QYXN0ZSAgICAgICAgICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uUGRmRXhwb3J0ICAgICAgICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvblBvaW50ZXJPdmVyICAgICAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25SZWFkT25seSAgICAgICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uUmVjb21wb3NlICAgICAgICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvblJlbmRlclJvdyAgICAgICAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25SZW5kZXJSb3dzICAgICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uUmVzaXplICAgICAgICAgICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvblJlc3BvbnNpdmUgICAgICAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25TY3JvbGwgICAgICAgICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uU2VsZWN0aW9uQ2hhbmdlICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvblNlbGVjdGlvbk1vZGVDaGFuZ2UgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25TaG93ICAgICAgICAgICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uU3RhcnRDZWxsRWRpdCAgICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvblN1YkdyaWRDb2xsYXBzZSAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25TdWJHcmlkRXhwYW5kICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG4gICAgQE91dHB1dCgpIG9uVG9nZ2xlR3JvdXAgICAgICAgICAgICAgICA9IG5ldyBFdmVudEVtaXR0ZXI8b2JqZWN0PigpO1xuICAgIEBPdXRwdXQoKSBvblRvZ2dsZU5vZGUgICAgICAgICAgICAgICAgPSBuZXcgRXZlbnRFbWl0dGVyPG9iamVjdD4oKTtcbiAgICBAT3V0cHV0KCkgb25Ub29sQ2xpY2sgICAgICAgICAgICAgICAgID0gbmV3IEV2ZW50RW1pdHRlcjxvYmplY3Q+KCk7XG5cbiAgICAgLy8gRmVhdHVyZXNcbiAgICBASW5wdXQoKSBjZWxsQ29weVBhc3RlRmVhdHVyZSEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8Q2VsbENvcHlQYXN0ZXxQYXJ0aWFsPENlbGxDb3B5UGFzdGVDb25maWc+O1xuICAgIEBJbnB1dCgpIGNlbGxFZGl0RmVhdHVyZSAgISA6IG9iamVjdHxib29sZWFufHN0cmluZ3xDZWxsRWRpdHxQYXJ0aWFsPENlbGxFZGl0Q29uZmlnPjtcbiAgICBASW5wdXQoKSBjZWxsTWVudUZlYXR1cmUgICEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8Q2VsbE1lbnV8UGFydGlhbDxDZWxsTWVudUNvbmZpZz47XG4gICAgQElucHV0KCkgY2VsbFRvb2x0aXBGZWF0dXJlISA6IG9iamVjdHxib29sZWFufHN0cmluZ3xDZWxsVG9vbHRpcHxQYXJ0aWFsPENlbGxUb29sdGlwQ29uZmlnPjtcbiAgICBASW5wdXQoKSBjb2x1bW5BdXRvV2lkdGhGZWF0dXJlISA6IG9iamVjdHxib29sZWFufHN0cmluZ3xDb2x1bW5BdXRvV2lkdGh8UGFydGlhbDxDb2x1bW5BdXRvV2lkdGhDb25maWc+O1xuICAgIEBJbnB1dCgpIGNvbHVtbkRyYWdUb29sYmFyRmVhdHVyZSEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8Q29sdW1uRHJhZ1Rvb2xiYXJ8UGFydGlhbDxDb2x1bW5EcmFnVG9vbGJhckNvbmZpZz47XG4gICAgQElucHV0KCkgY29sdW1uUGlja2VyRmVhdHVyZSEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8Q29sdW1uUGlja2VyfFBhcnRpYWw8Q29sdW1uUGlja2VyQ29uZmlnPjtcbiAgICBASW5wdXQoKSBjb2x1bW5SZW5hbWVGZWF0dXJlISA6IG9iamVjdHxib29sZWFufHN0cmluZ3xDb2x1bW5SZW5hbWV8UGFydGlhbDxDb2x1bW5SZW5hbWVDb25maWc+O1xuICAgIEBJbnB1dCgpIGNvbHVtblJlb3JkZXJGZWF0dXJlISA6IG9iamVjdHxib29sZWFufHN0cmluZ3xDb2x1bW5SZW9yZGVyfFBhcnRpYWw8Q29sdW1uUmVvcmRlckNvbmZpZz47XG4gICAgQElucHV0KCkgY29sdW1uUmVzaXplRmVhdHVyZSEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8Q29sdW1uUmVzaXplfFBhcnRpYWw8Q29sdW1uUmVzaXplQ29uZmlnPjtcbiAgICBASW5wdXQoKSBleGNlbEV4cG9ydGVyRmVhdHVyZSEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8R3JpZEV4Y2VsRXhwb3J0ZXJ8UGFydGlhbDxHcmlkRXhjZWxFeHBvcnRlckNvbmZpZz47XG4gICAgQElucHV0KCkgZmlsbEhhbmRsZUZlYXR1cmUhIDogb2JqZWN0fGJvb2xlYW58c3RyaW5nfEZpbGxIYW5kbGV8UGFydGlhbDxGaWxsSGFuZGxlQ29uZmlnPjtcbiAgICBASW5wdXQoKSBmaWx0ZXJGZWF0dXJlICAgICEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8RmlsdGVyfFBhcnRpYWw8RmlsdGVyQ29uZmlnPjtcbiAgICBASW5wdXQoKSBmaWx0ZXJCYXJGZWF0dXJlICEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8RmlsdGVyQmFyfFBhcnRpYWw8RmlsdGVyQmFyQ29uZmlnPjtcbiAgICBASW5wdXQoKSBncm91cEZlYXR1cmUgICAgICEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8R3JvdXB8UGFydGlhbDxHcm91cENvbmZpZz47XG4gICAgQElucHV0KCkgZ3JvdXBTdW1tYXJ5RmVhdHVyZSEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8R3JpZEdyb3VwU3VtbWFyeXxQYXJ0aWFsPEdyaWRHcm91cFN1bW1hcnlDb25maWc+O1xuICAgIEBJbnB1dCgpIGhlYWRlck1lbnVGZWF0dXJlISA6IG9iamVjdHxib29sZWFufHN0cmluZ3xIZWFkZXJNZW51fFBhcnRpYWw8SGVhZGVyTWVudUNvbmZpZz47XG4gICAgQElucHV0KCkgbWVyZ2VDZWxsc0ZlYXR1cmUhIDogb2JqZWN0fGJvb2xlYW58c3RyaW5nfE1lcmdlQ2VsbHN8UGFydGlhbDxNZXJnZUNlbGxzQ29uZmlnPjtcbiAgICBASW5wdXQoKSBtdWx0aXBhZ2VGZWF0dXJlICEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8R3JpZE11bHRpUGFnZUV4cG9ydGVyfFBhcnRpYWw8R3JpZE11bHRpUGFnZUV4cG9ydGVyQ29uZmlnPjtcbiAgICBASW5wdXQoKSBtdWx0aXBhZ2V2ZXJ0aWNhbEZlYXR1cmUhIDogb2JqZWN0fGJvb2xlYW58c3RyaW5nfEdyaWRNdWx0aVBhZ2VWZXJ0aWNhbEV4cG9ydGVyfFBhcnRpYWw8R3JpZE11bHRpUGFnZVZlcnRpY2FsRXhwb3J0ZXJDb25maWc+O1xuICAgIEBJbnB1dCgpIHBkZkV4cG9ydEZlYXR1cmUgISA6IG9iamVjdHxib29sZWFufHN0cmluZ3xHcmlkUGRmRXhwb3J0fFBhcnRpYWw8R3JpZFBkZkV4cG9ydENvbmZpZz47XG4gICAgQElucHV0KCkgcXVpY2tGaW5kRmVhdHVyZSAhIDogb2JqZWN0fGJvb2xlYW58c3RyaW5nfFF1aWNrRmluZHxQYXJ0aWFsPFF1aWNrRmluZENvbmZpZz47XG4gICAgQElucHV0KCkgcmVnaW9uUmVzaXplRmVhdHVyZSEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8UmVnaW9uUmVzaXplfFBhcnRpYWw8UmVnaW9uUmVzaXplQ29uZmlnPjtcbiAgICBASW5wdXQoKSByb3dDb3B5UGFzdGVGZWF0dXJlISA6IG9iamVjdHxib29sZWFufHN0cmluZ3xSb3dDb3B5UGFzdGV8UGFydGlhbDxSb3dDb3B5UGFzdGVDb25maWc+O1xuICAgIEBJbnB1dCgpIHJvd0V4cGFuZGVyRmVhdHVyZSEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8Um93RXhwYW5kZXJ8UGFydGlhbDxSb3dFeHBhbmRlckNvbmZpZz47XG4gICAgQElucHV0KCkgcm93UmVvcmRlckZlYXR1cmUhIDogb2JqZWN0fGJvb2xlYW58c3RyaW5nfFJvd1Jlb3JkZXJ8UGFydGlhbDxSb3dSZW9yZGVyQ29uZmlnPjtcbiAgICBASW5wdXQoKSBzZWFyY2hGZWF0dXJlICAgICEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8U2VhcmNofFBhcnRpYWw8U2VhcmNoQ29uZmlnPjtcbiAgICBASW5wdXQoKSBzaW5nbGVwYWdlRmVhdHVyZSEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8R3JpZFNpbmdsZVBhZ2VFeHBvcnRlcnxQYXJ0aWFsPEdyaWRTaW5nbGVQYWdlRXhwb3J0ZXJDb25maWc+O1xuICAgIEBJbnB1dCgpIHNvcnRGZWF0dXJlICAgICAgISA6IG9iamVjdHxib29sZWFufHN0cmluZ3xTb3J0fFBhcnRpYWw8U29ydENvbmZpZz47XG4gICAgQElucHV0KCkgc3RpY2t5Q2VsbHNGZWF0dXJlISA6IG9iamVjdHxib29sZWFufHN0cmluZ3xTdGlja3lDZWxsc3xQYXJ0aWFsPFN0aWNreUNlbGxzQ29uZmlnPjtcbiAgICBASW5wdXQoKSBzdHJpcGVGZWF0dXJlICAgICEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8U3RyaXBlfFBhcnRpYWw8U3RyaXBlQ29uZmlnPjtcbiAgICBASW5wdXQoKSBzdW1tYXJ5RmVhdHVyZSAgICEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8R3JpZFN1bW1hcnl8UGFydGlhbDxHcmlkU3VtbWFyeUNvbmZpZz47XG4gICAgQElucHV0KCkgdHJlZUZlYXR1cmUgICAgICAhIDogb2JqZWN0fGJvb2xlYW58c3RyaW5nfFRyZWV8UGFydGlhbDxUcmVlQ29uZmlnPjtcbiAgICBASW5wdXQoKSB0cmVlR3JvdXBGZWF0dXJlICEgOiBvYmplY3R8Ym9vbGVhbnxzdHJpbmd8VHJlZUdyb3VwfFBhcnRpYWw8VHJlZUdyb3VwQ29uZmlnPjtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbmQgYXBwZW5kIHRoZSB1bmRlcmx5aW5nIHdpZGdldFxuICAgICAqL1xuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICBjb25zdFxuICAgICAgICAgICAgbWUgPSB0aGlzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGVsZW1lbnRSZWYsXG4gICAgICAgICAgICAgICAgYnJ5bnR1bUNvbmZpZ1xuICAgICAgICAgICAgfSA9IG1lLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlQ2xhc3MsXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VOYW1lLFxuICAgICAgICAgICAgICAgIGJyeW50dW1Db25maWdzLFxuICAgICAgICAgICAgICAgIGJyeW50dW1FdmVudHNcbiAgICAgICAgICAgIH0gPSBCcnludHVtR3JpZEJhc2VDb21wb25lbnQ7XG5cbiAgICAgICAgYnJ5bnR1bUNvbmZpZ3MuZmlsdGVyKHByb3AgPT4gcHJvcCBpbiB0aGlzKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgV3JhcHBlckhlbHBlci5hcHBseVByb3BWYWx1ZShicnludHVtQ29uZmlnLCBwcm9wLCB0aGlzW3Byb3BdKTtcbiAgICAgICAgICAgIGlmIChbJ2ZlYXR1cmVzJywgJ2NvbmZpZyddLmluY2x1ZGVzKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgV3JhcHBlckhlbHBlci5kZXZXYXJuaW5nQ29uZmlnUHJvcChpbnN0YW5jZU5hbWUsIHByb3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBicnludHVtRXZlbnRzLmZpbHRlcihldmVudCA9PiB0aGlzW2V2ZW50XSAmJiB0aGlzW2V2ZW50XS5vYnNlcnZlcnMubGVuZ3RoID4gMCkuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICAgICAgICBjb25zdFxuICAgICAgICAgICAgICAgIHVuY2FwaXRhbGl6ZSA9IChzdHI6IHN0cmluZykgPT4gc3RyLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgc3RyLnNsaWNlKDEpLFxuICAgICAgICAgICAgICAgIGV2ZW50TmFtZSA9IChzdHI6IHN0cmluZykgPT4gdW5jYXBpdGFsaXplKHN0ci5zbGljZSgyKSk7XG5cbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGJyeW50dW1Db25maWcubGlzdGVuZXJzW2V2ZW50TmFtZShldmVudCldID0gZSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIG1lW2V2ZW50XS5lbWl0KGUpO1xuICAgICAgICAgICAgICAgIC8vIEV2ZW50RW1pdHRlciBkb2VzIG5vdCByZXR1cm4gdmFsdWVzIGluIHRoZSBub3JtYWwgd2F5LCB3b3JrIGFyb3VuZCBpdCBieSBzZXR0aW5nIGByZXR1cm5WYWx1ZWAgZmxhZ1xuICAgICAgICAgICAgICAgIC8vIGluIEFuZ3VsYXIgbGlzdGVuZXJzXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUucmV0dXJuVmFsdWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBJZiBjb21wb25lbnQgaGFzIG5vIGNvbnRhaW5lciBzcGVjaWZpZWQgaW4gY29uZmlnIHRoZW4gdXNlIGFkb3B0IHRvIFdyYXBwZXIncyBlbGVtZW50XG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgICBjb250YWluZXJQYXJhbSA9IFtcbiAgICAgICAgICAgICAgICAnYWRvcHQnLFxuICAgICAgICAgICAgICAgICdhcHBlbmRUbycsXG4gICAgICAgICAgICAgICAgJ2luc2VydEFmdGVyJyxcbiAgICAgICAgICAgICAgICAnaW5zZXJ0QmVmb3JlJ1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIF0uZmluZChwcm9wID0+IGJyeW50dW1Db25maWdbcHJvcF0pO1xuICAgICAgICBpZiAoIWNvbnRhaW5lclBhcmFtKSB7XG4gICAgICAgICAgICBpZiAoaW5zdGFuY2VOYW1lID09PSAnQnV0dG9uJykge1xuICAgICAgICAgICAgICAgIC8vIEJ1dHRvbiBzaG91bGQgYWx3YXlzIGJlIDxhPiBvciA8YnV0dG9uPiBpbnNpZGUgb3duZXIgZWxlbWVudFxuICAgICAgICAgICAgICAgIGJyeW50dW1Db25maWcuYXBwZW5kVG8gPSBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBicnludHVtQ29uZmlnLmFkb3B0ID0gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgV3JhcHBlckhlbHBlci5kZXZXYXJuaW5nQ29udGFpbmVyKGluc3RhbmNlTmFtZSwgY29udGFpbmVyUGFyYW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBtZS5pbnN0YW5jZSA9IGluc3RhbmNlTmFtZSA9PT0gJ1dpZGdldCcgPyBXaWRnZXRIZWxwZXIuY3JlYXRlV2lkZ2V0KGJyeW50dW1Db25maWcpIDogbmV3IGluc3RhbmNlQ2xhc3MoYnJ5bnR1bUNvbmZpZyk7XG5cbiAgICAgICAgLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yIGdyaWRJbnN0YW5jZSwgc2NoZWR1bGVySW5zdGFuY2UgZXRjLlxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIG1lW1N0cmluZ0hlbHBlci51bmNhcGl0YWxpemUoaW5zdGFuY2VOYW1lKSArICdJbnN0YW5jZSddID0gbWUuaW5zdGFuY2U7XG4gICAgICAgIC8vIFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdhdGNoIGZvciBjaGFuZ2VzXG4gICAgICogQHBhcmFtIGNoYW5nZXNcbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgICAgIGNvbnN0XG4gICAgICAgICAgICB7IGluc3RhbmNlIH0gPSB0aGlzLFxuICAgICAgICAgICAgeyBpbnN0YW5jZU5hbWUgfSA9IEJyeW50dW1HcmlkQmFzZUNvbXBvbmVudDtcbiAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBhbGwgY2hhbmdlc1xuICAgICAgICBPYmplY3QuZW50cmllcyhjaGFuZ2VzKS5mb3JFYWNoKChbcHJvcCwgY2hhbmdlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3RcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IChjaGFuZ2UgYXMgU2ltcGxlQ2hhbmdlKS5jdXJyZW50VmFsdWUsXG4gICAgICAgICAgICAgICAgeyBpbnN0YW5jZSB9ID0gdGhpcyxcbiAgICAgICAgICAgICAgICB7IGJyeW50dW1Db25maWdzT25seSwgYnJ5bnR1bVByb3BzIH0gPSBCcnludHVtR3JpZEJhc2VDb21wb25lbnQ7XG4gICAgICAgICAgICBpZiAoYnJ5bnR1bVByb3BzLmluY2x1ZGVzKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgV3JhcHBlckhlbHBlci5hcHBseVByb3BWYWx1ZShpbnN0YW5jZSwgcHJvcCwgbmV3VmFsdWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpZiAoYnJ5bnR1bUNvbmZpZ3NPbmx5LmluY2x1ZGVzKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIFdyYXBwZXJIZWxwZXIuZGV2V2FybmluZ1VwZGF0ZVByb3AoaW5zdGFuY2VOYW1lLCBwcm9wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgdGhlIGNvbXBvbmVudFxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuaW5zdGFuY2UgJiYgdGhpcy5pbnN0YW5jZS5kZXN0cm95ICYmIHRoaXMuaW5zdGFuY2UuZGVzdHJveSgpO1xuICAgIH1cbn1cbiJdfQ==